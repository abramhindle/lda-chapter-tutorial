{"rows": [{"doc": {"_id": 1687, "title": "Expanding the PyGithub authorization to support multiple tokens", "content": "Heya!\r\n\r\nI'm a PhD student that regularly uses PyGithub to gather data for research projects (for instance we used PyGithub to analyze the code review usage and CI usage of ~700 open-source projects, [see this paper for instance](https://cassee.dev/files/CI-silent.pdf)). When using PyGithub to make millions of GET requests over the period  of a few months we often pool the tokens of several researchers involved in the project, and use a scraper that dynamically switches tokens based on actual rate limits. \r\n\r\nHowever, writing this code is often a pain, as it requires messing with the internals of PyGithub. Recently, I started working on an update to PyGithub that allows you to pass in a list of tokens instead of a single token. Internally, PyGithub then does the switching of tokens, abstracting it away. \r\n\r\nHowever, I'm not sure if this feature is of interest to more users of PyGithub. If so, I'm open to discussing on how I could get these changes integrated into the mainline. \r\n\r\nP.S. Currently we're also running a study to help improve the sustainability of open-source communities, if you're open to performing in a single 60 minute interview on how you experience emotions when developing open-source software please let me know!"}}, {"doc": {"_id": 1686, "title": "Adding a team with permission to a repository is failing", "content": "Hi,\r\nI have developed below code to add a team with admin permission, which was working fine, till two to three weeks ago. Suddenly same code is failing with error.\r\n\r\n```\r\nfrom github import Github\r\n\r\ng = Github(personal_token)\r\norg = g.get_organization(organization_name)\r\nrepo_obj = org.get_repo('test-repo-add-team')\r\n\r\nteam = org.get_team(team_id)\r\nteam.set_repo_permission(repo_obj, 'Admin')\r\nprint(f'Added data team to test-repo-add-team')\r\n```\r\n\r\nBelow is the error message,\r\nTraceback (most recent call last):\r\n  File \"/Test/github/adding_team_to_repo.py\", line 7, in <module>\r\n    team.set_repo_permission(repo_obj, 'Admin')\r\n  File /Test/venv/lib/site-packages/github/Team.py\", line 249, in set_repo_permission\r\n    \"PUT\", self.url + \"/repos/\" + repo._identity, input=put_parameters\r\n  File \"/Test/venv/lib/site-packages/github/Requester.py\", line 319, in requestJsonAndCheck\r\n    verb, url, parameters, headers, input, self.__customConnection(url)\r\n  File \"/Test/venv/lib/site-packages/github/Requester.py\", line 342, in __check\r\n    raise self.__createException(status, responseHeaders, output)\r\ngithub.GithubException.GithubException: 422 {\"message\": \"Validation Failed\", \"documentation_url\": \"https://docs.github.com/rest/reference/teams#add-or-update-team-repository-permissions\"}\r\n"}}, {"doc": {"_id": 1685, "title": "unknownObjectException on Organization object: get a team by name", "content": "I've a github object which is properly authenticated.\r\nWith the github object, I'm able to access the pull-requests, the organization.\r\nHowever, I am unable to get the team name\r\n\r\nReproduce:\r\n```\r\n    github_obj = GithubObj(apply_secret=True) #uses personal access token\r\n    org=github_obj.github_object.get_organization('apache')\r\n    print(org)\r\n    print(github_obj.github_object.get_repo('apache/incubator-mxnet'))\r\n    print(github_obj.github_object.get_repo('apache/incubator-mxnet').get_pull(int(19004)))\r\n    print(org.get_team(<team-id>))\r\n```\r\n\r\nOutput\r\n```\r\nOrganization(login=\"apache\")\r\nRepository(full_name=\"apache/incubator-mxnet\")\r\nPullRequest(title=\"Numpy Random Ops Fix & Testcases\", number=19004)\r\nTraceback (most recent call last):\r\n  File \"test.py\", line 144, in <module>\r\n    check_ci_failure()\r\n  File \"test.py\", line 92, in check_ci_failure\r\n    load_and_test(data)\r\n  File \"test.py\", line 71, in load_and_test\r\n    print(org.get_team(<team-id>))\r\n  File \"/usr/local/lib/python3.7/site-packages/github/Organization.py\", line 971, in get_team\r\n    headers, data = self._requester.requestJsonAndCheck(\"GET\", \"/teams/\" + str(id))\r\n  File \"/usr/local/lib/python3.7/site-packages/github/Requester.py\", line 319, in requestJsonAndCheck\r\n    verb, url, parameters, headers, input, self.__customConnection(url)\r\n  File \"/usr/local/lib/python3.7/site-packages/github/Requester.py\", line 342, in __check\r\n    raise self.__createException(status, responseHeaders, output)\r\ngithub.GithubException.UnknownObjectException: 404 {\"message\": \"Not Found\", \"documentation_url\": \"https://docs.github.com/rest/reference/teams#get-a-team-by-name\"}\r\n```\r\n\r\nHowever, outside this project, on my shell I'm able to access the organization object properly. \r\n\r\nWhat's the difference? What's the issue?"}}, {"doc": {"_id": 1684, "title": "Added support for the Self-Hosted actions runners API", "content": ""}}, {"doc": {"_id": 1683, "title": "get followers of specific repository", "content": "getting contributors are implemented, but not followers.\r\nalso, [put] following user is not implemneted."}}, {"doc": {"_id": 1682, "title": "Added support for `Repository.get_workflow_runs` parameters", "content": "The `/repos/:owner/:repo/actions/runs`  endpoint has 4 optional parameters which can be used to narrow down the search results. \r\n\r\n> Name | Type | Description\r\n> -- | -- | --\r\n> actor | string | Returns someone's workflow runs. Use the login for the user who created the\u00a0push\u00a0associated with the check suite or workflow run.\r\n> branch | string | Returns workflow runs associated with a branch. Use the name of the branch of the\u00a0push.\r\n> event | string | Returns workflow run triggered by the event you specify. For example,\u00a0push,\u00a0pull_request\u00a0or\u00a0issue. For more information, see \"Events that trigger workflows\" in the GitHub Help documentation.\r\n> status | string | Returns workflow runs associated with the check run\u00a0status\u00a0or\u00a0conclusion\u00a0you specify. For example, a conclusion can be\u00a0success\u00a0or a status can be\u00a0completed. For more information, see the\u00a0status\u00a0and\u00a0conclusion\u00a0options available in \"Create a check run.\"\r\n\r\nThis PR adds support for those parameters"}}, {"doc": {"_id": 1681, "title": "Adding github actions secrets", "content": "This adds the ability to create repository secrets.\r\n\r\nIf merged this PR will add a dependency on pynacl."}}, {"doc": {"_id": 1680, "title": "Ignore new black formatting commit for git blame", "content": "To make git blame tagging easier to follow, ignore the commit that made\r\nsweeping changes with the new black version."}}, {"doc": {"_id": 1679, "title": "Format with new black", "content": "Black is very opinionated, but sometimes those opinions change. Run the\r\nnew black version across the codebase, and lock down the version used by\r\npre-commit so we don't get surprised like this again."}}, {"doc": {"_id": 1678, "title": "Unexpectedly more pull requests are returned.", "content": "For a repository in an organization, I'm trying to get pull requests using the branch name as a filter.\r\n\r\n```\r\norg = GITHUB.get_organization('Students-of-the-city-of-Kostroma')\r\nrepo = org.get_repo('Student-timetable')\r\nfor pr in repo.get_pulls(head='task-1340'):\r\n    print(pr)\r\n```\r\nI expect to get one pull request in the response.\r\n![image](https://user-images.githubusercontent.com/14871471/91720568-04708880-eba0-11ea-8f93-548710248a19.png)\r\nActual result: I get all open pull requests.\r\n![image](https://user-images.githubusercontent.com/14871471/91720687-341f9080-eba0-11ea-923c-c91164243332.png)\r\n![image](https://user-images.githubusercontent.com/14871471/91720725-47326080-eba0-11ea-8116-8444802adf75.png)\r\n"}}, {"doc": {"_id": 1677, "title": "Please list project", "content": "I just started using this library.  Perhaps, list the project\r\n\r\nhttps://github.com/hasii2011/gittodoistclone\r\n"}}, {"doc": {"_id": 1676, "title": "Issue 1655: Add authorize credentials list and removal on organization under SAML", "content": "The objective is to implement the two available methods to list and remove credential ids linked to an Organization that have been Authorize by the user to act as authentication on the Organization.\r\n\r\nAdded the two endpoints available under the Organization on the GitHub API\r\nhttps://developer.github.com/v3/orgs/#list-saml-sso-authorizations-for-an-organization\r\nhttps://developer.github.com/v3/orgs/#remove-a-saml-sso-authorization-for-an-organization\r\n\r\nAlso needed to create a new Object to handle the return payload of the API since the raw data differs from the Authorization Object..\r\n\r\nAdded one unit test to list the credentials under an Organization, but I do not have a Organization that is SAML protected that I can use to display in the unittest.. So I added on a personnal organization with no SAML, so an empty List is validated."}}, {"doc": {"_id": 1675, "title": "[BUG] No latest release can be retrieved", "content": "When calling the function https://pygithub.readthedocs.io/en/latest/github_objects/Repository.html?highlight=latest#github.Repository.Repository.get_latest_release\r\n\r\nThis exception is thrown \r\ngithub.GithubException.UnknownObjectException: 404 {\"message\": \"Not Found\", \"documentation_url\": \"https://docs.github.com/rest/reference/repos#get-the-latest-release\"}\r\n"}}, {"doc": {"_id": 1674, "title": "Add missing preview features of Deployment and Deployment Statuses API", "content": "  - Enable support for deployment status states in_progress and queued\r\n  - Add arguments production_environment and transient_environment to Repository.create_deployment()\r\n  - Add attributes production_environment and transient_environment to Deployment\r\n  - Use correct type for Deployment.payload() (string instead of dict)\r\n  - Fix incorrect assertion for description in Deployment.create_status()\r\n  - Add arguments environment, environment_url, auto_inactive to Deployment.create_status()\r\n  - Add attribute environment_url to DeploymentStatus\r\n\r\n\r\nReferences:\r\n  - https://docs.github.com/en/rest/reference/repos#deployments\r\n  - https://developer.github.com/changes/2016-04-06-deployment-and-deployment-status-enhancements/\r\n  - https://developer.github.com/changes/2018-10-16-deployments-environments-states-and-auto-inactive-updates/"}}, {"doc": {"_id": 1673, "title": "Include failed requests in debug log", "content": "It would be nice if Requester's debug logger logged requests that failed \"below\" HTTP level, eg. TCP connection failed.\r\n\r\nIf the request fails there is currently nothing logged (except a stack trace which does not tell what the attempted request was): https://github.com/PyGithub/PyGithub/blob/master/github/Requester.py#L508-L536\r\n\r\nSomething like this should do the job:\r\n\r\n\r\n```python\r\n        status = -1\r\n        responseHeaders = None\r\n        output = None\r\n\r\n        try:\r\n            response = cnx.getresponse()\r\n\r\n            status = response.status\r\n            responseHeaders = dict((k.lower(), v) for k, v in response.getheaders())\r\n            output = response.read()\r\n\r\n            cnx.close()\r\n            if input:\r\n                if isinstance(input, IOBase):\r\n                    input.close()\r\n        finally:\r\n            self.__log(verb, url, requestHeaders, input, status, responseHeaders, output)\r\n```"}}, {"doc": {"_id": 1672, "title": "How to close a pull request?", "content": "Hi, can someone tell me how an open pull request can be closed and associated branch be deleted? Thanks."}}, {"doc": {"_id": 1671, "title": "AuthenticatedUser.get_notifications() boolean query parameters always return true.", "content": "### Description\r\n\r\nSetting `all` and `participating` filters don't filters doesn't do anything.\r\n\r\n`all=True` and `participating=True` should filter notifications, but instead `get_notifications` always returns the full list of notifications.\r\n\r\n### Steps to reproduce\r\n\r\n```\r\nfrom github import Github\r\ng = Github(\"secret\")\r\nuser = g.get_user()\r\n\r\n# all=False is broken\r\nnotifications = user.get_notifications(all=False)\r\n\r\n# returns 371\r\nprint(notifications.totalCount)\r\n\r\nnotifications = user.get_notifications(all=True)\r\n\r\n# returns 371\r\nprint(notifications.totalCount)\r\n```"}}, {"doc": {"_id": 1670, "title": "This is a new issue", "content": "This is the issue body"}}, {"doc": {"_id": 1669, "title": "Add parent_team_id support", "content": "I noticed that `Organization.create_team()` and `Team.edit()` didn't have the ability to set the parent team ID.\r\n\r\nI haven't added any tests, but I can if wanted.\r\n\r\n"}}, {"doc": {"_id": 1668, "title": "Is it possible to connect using \"Github Apps\" instead of giving full uname/api token in source ", "content": "Is it possible to connect using \"Github Apps\" instead of giving full uname/api token in source \r\n\r\nNow we use uname/passwd OR token => both can access mostly all repos instead of only 1\r\n\r\nI saw \"Github Apps\" does support giving access to only 1 repo"}}, {"doc": {"_id": 1667, "title": "Add link to more examples", "content": "really helpful ;)"}}, {"doc": {"_id": 1666, "title": "Method to close an issue?", "content": "If I want to close an issue? is there a method like `issue_create` or do we use edit?\r\n\r\nI have not seen examples not sure"}}, {"doc": {"_id": 1665, "title": "NEW Project using PyGitHub: GSIL", "content": "GitHub HomePage: https://github.com/FeeiCN/GSIL\r\nGSIL is Monitor Github sensitive information leaks in near real time and send alert notifications."}}, {"doc": {"_id": 1664, "title": "ModuleNotFoundError error seen using github", "content": "When I run my python program that does the following import:\r\n\r\n`from github.MainClass import Github`\r\n\r\nI get the the below error:\r\n\r\nModuleNotFoundError: No module named 'github'\r\n\r\nIt does not matter if use `from github import Github`, I get the same error. I've the PyGithub module installed locally as well as globally, but this does not seem to alter the problem. My syspath is:\r\n\r\n`$ python3 -m site\r\nsys.path = [\r\n    '/Users/vasanth/repos',\r\n    '/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.7/lib/python37.zip',\r\n    '/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.7/lib/python3.7',\r\n    '/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.7/lib/python3.7/lib-dynload',\r\n    '/Users/vasanth/Library/Python/3.7/lib/python/site-packages',\r\n    '/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.7/lib/python3.7/site-packages',\r\n    '/Library/Python/3.7/site-packages',\r\n]\r\nUSER_BASE: '/Users/vasanth/Library/Python/3.7' (exists)\r\nUSER_SITE: '/Users/vasanth/Library/Python/3.7/lib/python/site-packages' (exists)\r\nENABLE_USER_SITE: True`\r\n\r\nThere are three reasons for a ModuleNotFoundError:\r\n\r\n1. The name of the module is incorrect.\r\n2. The path of the module is incorrect.\r\n3. The Library Module not installed\r\n\r\nWhen I go to the Python interpreter prompt and try this, I get the below:\r\n\r\n```\r\n>>> import github.MainClass\r\n>>> github.MainClass.__file__\r\n'/Users/vasanth/Library/Python/3.7/lib/python/site-packages/github/MainClass.py'\r\n```\r\n\r\nIt is very bizarre that it can't find from my program."}}, {"doc": {"_id": 1663, "title": "Add get_timeline() to Issue's type stubs", "content": "This function is not in the type stubs so mypy incorrectly complains when trying to use it."}}, {"doc": {"_id": 1662, "title": "create_git_ref raises github.GithubException.UnknownObjectException", "content": "Apologies if this has been answered somewhere. I've tried searching and tested all the examples, but it still doesn't work.\r\n\r\n**Task**\r\nI am trying to create a new branch.\r\n\r\n**Issue**\r\nI am getting `github.GithubException.UnknownObjectException: 404 {\"message\": \"Not Found\", \"documentation_url\": \"https://docs.github.com/rest/reference/git#create-a-reference\"}`.\r\n\r\n**What I have tried**\r\nI have set every possible permission for the access token.\r\n\r\n**Example code**\r\nHere is the code I am running:\r\n\r\n```\r\nimport os\r\nfrom github import Github\r\n\r\ng = Github(os.getenv(\"GH_AUTH\"))\r\nsource = repo.get_branch(\"master\")\r\nrepo.create_git_ref(ref=f\"refs/heads/new\", sha=source.commit.sha)\r\n```"}}, {"doc": {"_id": 1661, "title": "Can I create PullRequest between forked repository and original repository? ", "content": "Hi, Can I create PullRequest between forked repository and original repository?"}}, {"doc": {"_id": 1660, "title": "Test Organization.get_hook()", "content": "Add a testcase for Organization.get_hook()"}}, {"doc": {"_id": 1659, "title": "create_pull fails when trying to associate issue", "content": "I am trying to create a pull request with an associated issue such that closing the pull request will close the issue. \r\n\r\nI am using:\r\n\r\n```\r\nissue = (gh.create_issue(title=\"Merge branch \"+args.branch,body=output.decode(\"utf-8\")))\r\npr = gh.create_pull(\"Merge branch \"+args.branch,body=\"Closes \r\n\"+str(issue.number),issue=issue,base=\"main\",head=args.bran\r\n```\r\n\r\nwhen running the above i get:\r\n\r\n`TypeError: __create_pull_1() got an unexpected keyword argument 'issue'`\r\n\r\nI am working off the create_pull documentation in: https://pygithub.readthedocs.io/en/latest/github_objects/Repository.html"}}, {"doc": {"_id": 1658, "title": "Add method get_team_membership for user ", "content": "Implemented the get_team_membership with tests.\r\n\r\n"}}, {"doc": {"_id": 1657, "title": "Add support for team membership endpoint. ", "content": "As per the documentation one can get team membership for a user.\r\n \r\nhttps://docs.github.com/en/rest/reference/teams#get-team-membership-for-a-user\r\n\r\nI already have a PR for this and will galdly contribute."}}, {"doc": {"_id": 1656, "title": "Add typing files for OAuth classes", "content": "The additional classes added for OAuth predated the inclusion of typing\r\nfiles, add them for the new classes."}}, {"doc": {"_id": 1655, "title": "Adding authorize credentials listing and delete in a organisation", "content": "Adding two functions to handle to rest endpoint of GitHub:\r\nhttps://docs.github.com/en/rest/reference/orgs#list-saml-sso-authorizations-for-an-organization\r\nhttps://docs.github.com/en/rest/reference/orgs#remove-a-saml-sso-authorization-for-an-organization\r\n\r\nIn order to control the current authorize credentials permitted under the organisation and delete a credentia_ id if required."}}, {"doc": {"_id": 1654, "title": "pullrequest.get_review_requests() not returning people who joined as reviewer", "content": "Hi, \r\nsay we have a PR which owner request review from 'A', and then 'B' joined as reviewer.\r\nThen when i create an api request like:\r\n```\r\nuserlist,teamlist=pullrequest.get_review_requests()\r\n```\r\nonly `A` in `userlist`, `B` is not there\r\n\r\n`B` should also be exist in `userlist`"}}, {"doc": {"_id": 1653, "title": "Is there any user suggestions endpoint? ", "content": "To get a list of suggested mentionable users in a comment box (look at attached image) github web uses `https://github.com/suggestions` url. But is there any method available for this?\r\n\r\n![image](https://user-images.githubusercontent.com/30789322/90096954-6d5ba200-dd52-11ea-90fc-897b2830d5da.png)\r\n"}}, {"doc": {"_id": 1652, "title": "Fix issue1642", "content": "Fixes: #1642"}}, {"doc": {"_id": 1651, "title": "pullrequest missing `rebaseable` property", "content": "Hello, \r\nCurrently in pullrequest.py there's no `rebaseable` property, from github api spec https://docs.github.com/en/rest/reference/pulls#mergability you can see `rebaseable` exist, is there any plan to add this property in future?\r\n\r\nBTW one question related to this, if i want to check whether a pullrequest needs rebase, the only thing i can check is\r\n```\r\npullrequest.mergeable_state == 'dirty' && pullrequest.mergeable == False\r\n```\r\nam i right?\r\n\r\nThanks!"}}, {"doc": {"_id": 1650, "title": "Inconsistent response when querying branch protection settings", "content": "Tested against GitHub Enterprise v2.20. \r\n\r\nSet up: A repo and a branch with protection enabled. Do not enable `Require pull request reviews before merging` and do not enable `Require status checks to pass before merging`.\r\n\r\nUse PyGithub to access the branch, and then call `get_required_status_checks()` and `get_required_pull_request_reviews()` and observe the difference in the responses - the former throws a 404, but the latter does not. A consistent response would be nice so code that needs to manipulate these settings can be simpler.\r\n\r\n```\r\n>>> branch.get_required_status_checks()\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"C:\\Users\\user\\.virtualenvs\\gh-utils-o-EKXsYi\\lib\\site-packages\\github\\Branch.py\", line 263, in get_required_status_checks\r\n    headers, data = self._requester.requestJsonAndCheck(\r\n  File \"C:\\Users\\user\\.virtualenvs\\gh-utils-o-EKXsYi\\lib\\site-packages\\github\\Requester.py\", line 317, in requestJsonAndCheck\r\n    return self.__check(\r\n  File \"C:\\Users\\user\\.virtualenvs\\gh-utils-o-EKXsYi\\lib\\site-packages\\github\\Requester.py\", line 342, in __check\r\n    raise self.__createException(status, responseHeaders, output)\r\ngithub.GithubException.GithubException: 404 {\"message\": \"Required status checks not enabled\", \"documentation_url\": \"https://developer.github.com/enterprise/2.20/v3/repos/branches/#get-required-status-checks-of-protected-branch\"}\r\n\r\n>>> branch.get_required_pull_request_reviews()\r\nRequiredPullRequestReviews(url=\"https://git.autodesk.com/api/v3/repos/InfraWorks/test-jira/branches/master/protection/required_pull_request_reviews\", require_code_owner_reviews=False, dismiss_stale_reviews=False)\r\n```"}}, {"doc": {"_id": 1649, "title": "Get list of dismissed reviews for a particular PR", "content": "How to get a list of dismissed reviews on a PR?\r\n"}}, {"doc": {"_id": 1648, "title": "How to fetch pull request number by commit SHA", "content": "I've a commit object. How do i get the pull request number corresponding to that SHA?\r\ncommit object\r\n```\r\n>>> com2\r\nCommit(sha=\"27bd88869f1887bfac8efda2977187978b3af6ca\")\r\n```\r\nAvailable functions\r\n```\r\n>>> com2.\r\ncom2.CHECK_AFTER_INIT_FLAG   com2.commit                  com2.create_status(          com2.get__repr__(            com2.get_pulls(              com2.last_modified           com2.raw_headers             com2.stats\r\ncom2.author                  com2.committer               com2.etag                    com2.get_combined_status(    com2.get_statuses(           com2.parents                 com2.setCheckAfterInitFlag(  com2.update(\r\ncom2.comments_url            com2.create_comment(         com2.files                   com2.get_comments(           com2.html_url                com2.raw_data                com2.sha                     com2.url\r\n```\r\nNone of these give me pull request number corresponding this commit"}}, {"doc": {"_id": 1647, "title": "get_git_refs() vs get_git_ref('xxxxx')", "content": "While I am implementing #1628 there is a strange issue.\r\nTo get master branch GitRef, I used two different way:\r\n```python\r\n# function 1\r\nmaster_ref1 = repo.get_git_ref('/heads/master')\r\n```\r\nand \r\n```python\r\n# function 2\r\nmaster_refs = self.github_repo.get_git_refs().get_page(0)\r\nmaster_ref = None\r\nfor ref in master_refs:\r\n    if ref.ref == \"refs/heads/{}\".format(\"master\"):\r\n        master_ref = ref\r\n```\r\n\r\nThen I try to commit some files with the example of below script ( same as #1628 )\r\n```python\r\nimport github\r\ng = github.Github(base_url=\"https://git.mycompany.com/api/v3\",login_or_token=\"mytoken\")\r\nrepo = g.get_repo('myorg/myrepo')\r\nblob = repo.create_git_blob(\"file-content\", \"utf-8\")\r\nelement = github.InputGitTreeElement(path=\"path-in-repo.ext\", mode='100644', type='blob', sha=blob.sha)\r\nhead_sha = repo.get_branch('master').commit.sha\r\nbase_tree = repo.get_git_tree(sha=head_sha)\r\ntree = repo.create_git_tree([element], base_tree)\r\nparent = repo.get_git_commit(sha=head_sha)\r\ncommit = repo.create_git_commit(\"commit_message\", tree, [parent])\r\n# function 1 or function 2\r\nmaster_ref.edit(sha=commit.sha)\r\n```\r\nAnd it performs differently:\r\n```\r\nfunction 1 return:\r\n>>> master_ref.edit(sha=commit.sha)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/github/GitRef.py\", line 91, in edit\r\n    \"PATCH\", self.url, input=post_parameters\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/github/Requester.py\", line 319, in requestJsonAndCheck\r\n    verb, url, parameters, headers, input, self.__customConnection(url)\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/github/Requester.py\", line 342, in __check\r\n    raise self.__createException(status, responseHeaders, output)\r\ngithub.GithubException.GithubException: 500 null\r\n```\r\nWhile `function 2` works correctly.\r\n\r\nCould some one explain or know what is the root cause of this?\r\nThanks.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"}}, {"doc": {"_id": 1646, "title": "Add Support for Check Suites", "content": "~~NOTE: This PR includes changes from PR #1631~~ Cleaned up."}}, {"doc": {"_id": 1645, "title": "Incorrect typing of get_user() method.", "content": "This typing in MainClass.pyi is incorrect:\r\n\r\n```\r\n    @overload\r\n    def get_user(self, login: _NotSetType) -> AuthenticatedUser: ...\r\n    @overload\r\n    def get_user(self, login: str) -> NamedUser: ...\r\n    def get_users(\r\n        self, since: Union[int, _NotSetType] = ...\r\n    ) -> PaginatedList[NamedUser]: ...\r\n```\r\n\r\nWith code like:\r\n\r\n`github.get_user()`\r\n\r\nThe code behaves correctly but fails mypy:\r\n```\r\nmostrows@mostrows-MBP15 pyutils % mypy --config mypy.ini -p clumio_utils\r\ngitops.py:176:17: error: All overload variants of \"get_user\" of \"Github\" require at least one argument\r\ngitops.py:176:17: note: Possible overload variants:\r\ngitops.py:176:17: note:     def get_user(self, login: _NotSetType) -> AuthenticatedUser\r\ngitops.py:176:17: note:     def get_user(self, login: str) -> NamedUser\r\n```"}}, {"doc": {"_id": 1644, "title": "No exception while inti Github with invalid base url and given wrong output on its methods", "content": "I happened to use `https://git.mycompany.com/` to init github.Github other than `https://git.mycompany.com/api/v3/`.\r\nHowever, seems not validation is invoked and an object is well returned `<github.MainClass.Github object at 0x7fd61c9c0d68>`\r\nThen its method will perform strangely. for example any `get_repo('whateverrepo')` will return `Repository(full_name=None)` other than an exception `github.GithubException.UnknownObjectException: 404 {\"message\": \"Not Found\", \"documentation_url\": \"https://developer.github.com/enterprise/2.21/v3/repos/#get\"}`\r\n"}}, {"doc": {"_id": 1643, "title": "Fix Repository.create_repository_dispatch type signature", "content": "Not really sure why I initially thought this had to be `str -> str`. The endpoint accepts anything that can be encoded into JSON. Technically it accepts numbers, bools, and None as keys too, so perhaps the key type should be a Union... but 99% of people will only use strings so maybe this is ok. "}}, {"doc": {"_id": 1642, "title": "[Bug- Known issue still not fixed] wrong 'last-modified' #629", "content": "Creating a new issue since the old one was closed without solving the problem. The solution was proposed in Fixed File.last_modified attribute #1032 but never merged to master. "}}, {"doc": {"_id": 1641, "title": "PaginatedList's totalCount is 0 if no last page", "content": "When calculating totalCount for PaginatedList, if the links data does\r\nnot contain a last page, we can't know how many elements are contained\r\nin the list. Set it to 0 in that case.\r\n\r\nFixes #1614 "}}, {"doc": {"_id": 1640, "title": "1.52 started giving no overload invariant to Repository.create_pull", "content": "This issue is related to: #1634\r\n\r\nAfter this one was fixed, I started getting the same error on a code that didn't have it:\r\n\r\nhttps://github.com/staticdev/git-portfolio/pull/53/checks?check_run_id=943684564\r\n\r\nThe call is being made by passing: \r\n\r\n```\r\nrepo.create_pull(\r\n                title=\"title\", body=\"body\" head=pr.head, base=pr.base, draft=True,\r\n            )\r\n```\r\n\r\nI think the problem I given by the removal of `draft: bool` on line 186:\r\n\r\nhttps://github.com/PyGithub/PyGithub/commit/5ad091d0182a7abd0dd7da51fc6dc727fc4bb82d"}}, {"doc": {"_id": 1639, "title": "Add delete_branch_on_merge arg to Repository.edit type stub", "content": "#### example\r\n```python3\r\nfrom github import Github\r\n\r\nGithub().get_repo(\"\").edit(\r\n    has_issues=False,\r\n    has_projects=False,\r\n    has_wiki=False,\r\n    default_branch=\"master\",\r\n    allow_squash_merge=False,\r\n    allow_merge_commit=True,\r\n    allow_rebase_merge=False,\r\n    delete_branch_on_merge=False,\r\n)\r\n```\r\n\r\n#### before changes\r\n```console\r\n% mypy example.py\r\nexample.py:3: error: Unexpected keyword argument \"delete_branch_on_merge\" for \"edit\" of \"Repository\"\r\ngithub/Repository.pyi:219: note: \"edit\" of \"Repository\" defined here\r\nFound 1 error in 1 file (checked 1 source file)\r\n```\r\n\r\n#### after changes\r\n```console\r\n% mypy example.py\r\nSuccess: no issues found in 1 source file\r\n```"}}, {"doc": {"_id": 1638, "title": "Add type stub for Repository.create_fork", "content": "#### example\r\n```python3\r\nfrom github import Github\r\n\r\nGithub().get_repo(\"\").create_fork()\r\n```\r\n\r\n#### before changes\r\n```console\r\n% mypy example.py\r\nexample.py:3: error: \"Repository\" has no attribute \"create_fork\"; maybe \"create_hook\" or \"create_key\"?\r\nFound 1 error in 1 file (checked 1 source file)\r\n```\r\n\r\n#### after changes\r\n```console\r\n% mypy example.py\r\nSuccess: no issues found in 1 source file\r\n```"}}, {"doc": {"_id": 1637, "title": "Fix type stub for MainClass.get_user", "content": "-   Add `login` arg default value to stub to match source\r\n\r\n#### example\r\n```python3\r\nfrom github import Github\r\n\r\nGithub(\"\").get_user()\r\n```\r\n\r\n#### mypy before\r\n```console\r\n% mypy example.py\r\nexample.py:3: error: All overload variants of \"get_user\" of \"Github\" require at least one argument\r\nexample.py:3: note: Possible overload variants:\r\nexample.py:3: note:     def get_user(self, login: _NotSetType) -> AuthenticatedUser\r\nexample.py:3: note:     def get_user(self, login: str) -> NamedUser\r\nFound 1 error in 1 file (checked 1 source file)\r\n```\r\n\r\n#### mypy after\r\n```console\r\n% mypy example.py\r\nSuccess: no issues found in 1 source file\r\n```"}}, {"doc": {"_id": 1636, "title": "Correct **kwargs typing for search_*", "content": "It turns out typing for **kwargs is always Dict[str, Type], so only the\r\ntype is required.\r\n\r\nFixes #1633"}}, {"doc": {"_id": 1635, "title": "Correct Repository.create_pull typing harder", "content": "It turns out if an argument is optional for an overloaded method, the\r\ntype hints require the default argument specified to successfully match\r\nagainst the correct signature. Furthermore, the second kind of\r\ncreate_pull() does not support the draft argument at all, so remove it.\r\n\r\nFixes #1634"}}, {"doc": {"_id": 1634, "title": "Repository.create_pull typing regression", "content": "From PR #1581:\r\n\r\nerror: No overload variant of \"create_pull\" of\r\n\"Repository\" matches argument types \"str\", \"str\", \"str\", \"str\"  [call-overload]\r\n            pr = gh.get_repo(REPO).create_pull(\r\n                 ^\r\nnote: Possible overload variants:\r\nnote:     def create_pull(self, title: str, body: str, base: str, head: str, maintainer_can_modify: Union[bool, _NotSetType], draft: bool, issue: _NotSetType) -> PullRequest\r\nnote:     def create_pull(self, title: _NotSetType, body: _NotSetType, base: str, head: str, maintainer_can_modify: _NotSetType, draft: bool, issue: Issue) -> PullRequest\r\n\r\nIt was fine with PyGithub v1.51 but failed in PyGithub v1.52.\r\n\r\nMy code is the following...\r\n\r\npr = gh.get_repo(REPO).create_pull(\r\n    title,\r\n    \"This PR has been automatically created by insights-services.\",\r\n    \"master\",\r\n    branch_name,\r\n)"}}, {"doc": {"_id": 1633, "title": "Typing error on Github.search_issues", "content": "7b20b13d0b853e813b201edf1daf159ca8bc983f set the type of all kwargs to `Dict[str, Any]`. This is incorrect, as `repo` is `str`.\r\n\r\nMy assumption is that the author of #1517 didn't understand the the way typed **kwargs work, and meant to simply assign it to `Any`.\r\n\r\nMypy error message: `error: Argument \"repo\" to \"search_issues\" of \"Github\" has incompatible type \"str\"; expected \"Dict[str, Any]\"  [arg-type]`"}}, {"doc": {"_id": 1632, "title": "[Question] commit_id of a specific file inside the repo", "content": "Is it possible to obtain the latest commit_id of a specific file in my repo?  From the ContentFile object I am able to extract the sha which is different from the commit_id the given file has. "}}, {"doc": {"_id": 1631, "title": "Add initial support for Github Apps.", "content": "Needed for #1621"}}, {"doc": {"_id": 1630, "title": "GithubException type-checking problem", "content": "I am having a hard time to get a good solution for type-checking when I have GithubException given this interface:\r\n\r\nhttps://github.com/PyGithub/PyGithub/blob/6eba4506d4d44892c5e224054b809003fc3326f6/github/GithubException.pyi\r\n\r\nLet me use give a practical use example to reproduce:\r\n\r\n```\r\nimport github # PyGithub\r\ng = github.Github(\"access_token\")\r\ngithub_repo = \"staticdev/git-portfolio\"\r\nrepo = g.get_repo(github_repo)\r\ntry:\r\n    created_pr = repo.create_pull(\r\n        title=\"title\", body=\"body\", head=\"head\", base=\"base\", draft=False,\r\n    )\r\nexcept github.GithubException as github_exception:\r\n    extra = \"\"\r\n    for error in github_exception.data[\"errors\"]:\r\n        if \"message\" in error:\r\n            extra += f\"{error['message']} \"\r\n        else:\r\n            extra += f\"Invalid field {error['field']}. \"\r\n```\r\n\r\nWhen I check this code with mypy for example I get the errors:\r\n\r\n```\r\nsrc/git_portfolio/mypy.py:13:31: error: Invalid index type \"str\" for \"Union[str, Dict[str, str]]\"; expected type \"Union[int, slice]\"  [index]\r\n                extra += f\"{error['message']} \"\r\n                                  ^\r\nsrc/git_portfolio/mypy.py:15:45: error: Invalid index type \"str\" for \"Union[str, Dict[str, str]]\"; expected type \"Union[int, slice]\"  [index]\r\n                extra += f\"Invalid field {error['field']}. \"\r\n```\r\n\r\nProposed solution: after opening an [issue on Mypy](https://github.com/python/mypy/issues/9221), @Akuli suggested using [TypedDict](https://www.python.org/dev/peps/pep-0589/) which I found great. \r\n"}}, {"doc": {"_id": 1629, "title": "Make Issue.closed_by nullable", "content": "When the user that closed an issue has since deleted their account, the issue's `closed_by` attribute is null. For example: https://github.com/SciML/DiffEqOperators.jl/issues/239"}}, {"doc": {"_id": 1628, "title": "[Example] Full example of commit multiple file", "content": "I am moving from gitlab to github.\r\nWe use https://github.com/python-gitlab/python-gitlab as the library\r\nTo make a commit for multiple files we use exactly this example: https://python-gitlab.readthedocs.io/en/stable/gl_objects/commits.html\r\n\r\nI find create_git_commit would do the same thing in github but lack of docs.\r\nCould someone help to provide an example of creating those Tree etc.. staffs ?\r\n\r\nThanks very much."}}, {"doc": {"_id": 1627, "title": "Can't authenticate with versions newer than v1.39", "content": "For some reason, if I try any version which is newer than 1.39, I get `Bad credentials`. 1.39 and the versions before work fine with the same access token. (This is happening on Python 3.8.3.)\r\n\r\n"}}, {"doc": {"_id": 1626, "title": "Pagination for the get_contents function?", "content": "Hi, I'm trying to list the contents of a directory in a Github project, the only issue I'm running in to is that it is maxing out at 1000 entries. I know that the Github API has pagination support, but I tried adding `page=2` to the `get_contents()` function, but it just errors out. \r\n\r\nHow would I go about adding pagination or loading the next set of values from the get_contents function?\r\n```\r\n        repo = self.github.get_repo(\"<repo>\")\r\n        contents = repo.get_contents(\"<folder>\")\r\n        for file in contents:\r\n            print(file.path)\r\n```"}}, {"doc": {"_id": 1625, "title": "Add suport for workflow dispatch event", "content": "Fixes: #1624"}}, {"doc": {"_id": 1624, "title": "Add Support for manual workflow trigger using workflow_dispatch", "content": "Github Actions recently added support for triggering Workflows using the `workflow_dispatch` event [Blog Post](https://github.blog/changelog/2020-07-06-github-actions-manual-triggers-with-workflow_dispatch/)\r\n\r\nDocs: https://docs.github.com/en/rest/reference/actions#create-a-workflow-dispatch-event\r\n\r\nI have a PR that adds support for this API Endpoint."}}, {"doc": {"_id": 1623, "title": "Handle white-spaces in name in Organization and AuthenticatedUser ", "content": "Closes: #1622\r\n\r\n* Added stripping of leading and ending white spaces for in name in AuthenticatedUser and Organization\r\n* Added replacement of white space in between the text with \"-\""}}, {"doc": {"_id": 1622, "title": "create_repo() does not handle repo names with \" \" (White-spaces) ", "content": "create_repo() right now throws an expected \r\n```\r\ngithub.GithubException.UnknownObjectException: 404 {\"message\": \"Not Found\", \"documentation_url\": \"https://developer.github.com/v3/repos/#get%22%7D\r\n```\r\nwhen creating repositories using `create_repo` with names than have \" \" (Spaces) in them.\r\n\r\nThis should be handled either by: \r\n* Replacing the spaces with a hyphen \"-\" \r\n* By throwing a better exception which explains the problem.\r\n\r\nI would personally lean towards the \"-\" replacement as users would anyways replace the spaces with hyphens.\r\n"}}, {"doc": {"_id": 1621, "title": "Get status of checks on a Pull Request", "content": "Currently, PyGithub API doesn't allow to check for status of the checks run on a PR.\r\n\r\nFor e.g. in case of a PR https://github.com/apache/incubator-mxnet/pull/18785\r\nThere are 12 status checks.\r\nThere should be an API that exposes the status of each of those 12 checks or overall status of that PR."}}, {"doc": {"_id": 1620, "title": "This is a new issue", "content": ""}}, {"doc": {"_id": 1619, "title": "This is a new issue", "content": ""}}, {"doc": {"_id": 1618, "title": "get_assets not returning assets", "content": "I am trying to download assets from my private repo. I am able to get the latest relast but i am not getting list of assets. \r\n\r\ncode snippet is given below:\r\n\r\n    github = Github(token)\r\n    organization = github.get_organization(org)\r\n    repository = organization.get_repo(repo)\r\n    print(\"repo: {}\".format(repository))\r\n    releases = repository.get_releases()\r\n    print(\"releases: {}\".format(list(releases)))\r\n    latestrelease = repository.get_latest_release()\r\n    print(\"latest release: {}\".format(latestrelease))\r\n    assets = latestrelease.get_assets()\r\n    print(\"assets: {}\".format(list(assets)))\r\n   \r\nOutput\r\nrepo: Repository(full_name=\"skywalkerInc/SharpenTheAxe\")\r\nreleases: [GitRelease(title=\"FirstRelease\")]\r\nlatest release: GitRelease(title=\"FirstRelease\")\r\nassets: []\r\n\r\nPlease help.\r\n"}}, {"doc": {"_id": 1617, "title": "This is a new issue", "content": ""}}, {"doc": {"_id": 1616, "title": "more flexible header splitting", "content": "When using get_authorizations() from AuthenticatedUser headers[\"link\"] is:\r\n` '<https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/>; rel=\"deprecation\"; type=\"text/html\"' ` and thus it fails. With this approach, it will just discard `type=\"text/html\"` part and will not affect other calls."}}, {"doc": {"_id": 1615, "title": "get_user does not support retrieving user information by ID", "content": "I'm writing a script that interfaces with both ZenHub and GitHub (using PyGithub). ZenHub only identifies users by their user id (databaseId), so if I want to find the name of the user associated with an id, I have to query GitHub's API. There's an \r\n[undocumented endpoint](https://stackoverflow.com/questions/11976393/get-github-username-by-id) for this (`/user/:id`). \r\n\r\nA quick example. (My user id is 23219746.) I'm on `PyGithub==1.43.5` but I can see this is still the case on v1.51.\r\n\r\n```pycon\r\n>>> import github\r\n>>> g = github.Github(\"...\")\r\n>>> g.get_user(g.get_user().id)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/Users/natan/DataBiosphere/azul/.venv/lib/python3.8/site-packages/github/MainClass.py\", line 226, in get_user\r\n    assert login is github.GithubObject.NotSet or isinstance(login, str), login\r\nAssertionError: 23219746\r\n```\r\n\r\nDoes PyGithub support undocumented endpoints? If so, it seems trivial to add support for this:\r\n\r\n```diff\r\ndiff --git a/github/MainClass.py b/github/MainClass.py\r\nindex cadd1ff5..b450492a 100644\r\n--- a/github/MainClass.py\r\n+++ b/github/MainClass.py\r\n@@ -261,18 +261,25 @@ class Github(object):\r\n         :param login: string\r\n         :rtype: :class:`github.NamedUser.NamedUser` or :class:`github.AuthenticatedUser.AuthenticatedUser`\r\n         \"\"\"\r\n-        assert login is github.GithubObject.NotSet or isinstance(login, str), login\r\n+        assert login is github.GithubObject.NotSet or isinstance(login, str) or isinstance(login, int), login\r\n         if login is github.GithubObject.NotSet:\r\n             return AuthenticatedUser.AuthenticatedUser(\r\n                 self.__requester, {}, {\"url\": \"/user\"}, completed=False\r\n             )\r\n-        else:\r\n+        elif isinstance(login, str):\r\n             headers, data = self.__requester.requestJsonAndCheck(\r\n                 \"GET\", \"/users/\" + login\r\n             )\r\n             return github.NamedUser.NamedUser(\r\n                 self.__requester, headers, data, completed=True\r\n             )\r\n+        else:\r\n+            headers, data = self.__requester.requestJsonAndCheck(\r\n+                \"GET\", \"/user/\" + login\r\n+            )\r\n+            return github.NamedUser.NamedUser(\r\n+                self.__requester, headers, data, completed=True\r\n+            )\r\n \r\n     def get_users(self, since=github.GithubObject.NotSet):\r\n         \"\"\"\r\n```"}}, {"doc": {"_id": 1614, "title": "KeyError while trying to fetch an unbounded PaginatedList's count ", "content": "Accessing the `totalCount` attribute on a `PaginatedList` returned from the `get_repos` method throws a KeyError\r\n\r\nTrace\r\n```py\r\nrepos = github_client.get_repos()\r\n\r\nrepos.totalCount\r\n---------------------------------------------------------------------------\r\nKeyError                                  Traceback (most recent call last)\r\n<ipython-input-42-68d28c2d7948> in <module>\r\n----> 1 repos.totalCount\r\n\r\ne:\\software\\python36\\lib\\site-packages\\github\\PaginatedList.py in totalCount(self)\r\n    164                 links = self.__parseLinkHeader(headers)\r\n    165                 lastUrl = links.get(\"last\")\r\n--> 166                 self.__totalCount = int(parse_qs(lastUrl)[\"page\"][0])\r\n    167         return self.__totalCount\r\n    168 \r\n\r\nKeyError: 'page'\r\n```"}}, {"doc": {"_id": 1613, "title": "Is support modify media types that accepted?", "content": "I would like both `body_html` and `body_text` of the issue body.\r\n\r\nHere is the GitHub doc:\r\nhttps://developer.github.com/v3/media/#comment-body-properties\r\n\r\n"}}, {"doc": {"_id": 1612, "title": "CODE_OF_CONDUCT.md", "content": "Describes the code of conduct for this repo."}}, {"doc": {"_id": 1610, "title": "Github Action improvement", "content": "- [x] Better workflow naming and job names\r\n- [x] Upload codecov reports for all Python versions\r\n- [x] Only build for `pull_request` event for PR and `push` event for master\r\n"}}, {"doc": {"_id": 1609, "title": "Update sphinx requirement from <3 to <4", "content": "Updates the requirements on [sphinx](https://github.com/sphinx-doc/sphinx) to permit the latest version.\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/sphinx-doc/sphinx/blob/3.x/CHANGES\">sphinx's changelog</a>.</em></p>\n<blockquote>\n<h1>Release 3.1.2 (released Jul 05, 2020)</h1>\n<h2>Incompatible changes</h2>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/sphinx-doc/sphinx/issues/7650\">#7650</a>: autodoc: the signature of base function will be shown for decorated\nfunctions, not a signature of decorator</li>\n</ul>\n<h2>Bugs fixed</h2>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/sphinx-doc/sphinx/issues/7844\">#7844</a>: autodoc: Failed to detect module when relative module name given</li>\n<li><a href=\"https://github-redirect.dependabot.com/sphinx-doc/sphinx/issues/7856\">#7856</a>: autodoc: AttributeError is raised when non-class object is given to\nthe autoclass directive</li>\n<li><a href=\"https://github-redirect.dependabot.com/sphinx-doc/sphinx/issues/7850\">#7850</a>: autodoc: KeyError is raised for invalid mark up when autodoc_typehints\nis 'description'</li>\n<li><a href=\"https://github-redirect.dependabot.com/sphinx-doc/sphinx/issues/7812\">#7812</a>: autodoc: crashed if the target name matches to both an attribute and\nmodule that are same name</li>\n<li><a href=\"https://github-redirect.dependabot.com/sphinx-doc/sphinx/issues/7650\">#7650</a>: autodoc: function signature becomes <code>(*args, **kwargs)</code> if the\nfunction is decorated by generic decorator</li>\n<li><a href=\"https://github-redirect.dependabot.com/sphinx-doc/sphinx/issues/7812\">#7812</a>: autosummary: generates broken stub files if the target code contains\nan attribute and module that are same name</li>\n<li><a href=\"https://github-redirect.dependabot.com/sphinx-doc/sphinx/issues/7806\">#7806</a>: viewcode: Failed to resolve viewcode references on 3rd party builders</li>\n<li><a href=\"https://github-redirect.dependabot.com/sphinx-doc/sphinx/issues/7838\">#7838</a>: html theme: List items have extra vertical space</li>\n<li><a href=\"https://github-redirect.dependabot.com/sphinx-doc/sphinx/issues/7878\">#7878</a>: html theme: Undesired interaction between &quot;overflow&quot; and &quot;float&quot;</li>\n</ul>\n<h1>Release 3.1.1 (released Jun 14, 2020)</h1>\n<h2>Incompatible changes</h2>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/sphinx-doc/sphinx/issues/7808\">#7808</a>: napoleon: a type for attribute are represented as typed field</li>\n</ul>\n<h2>Features added</h2>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/sphinx-doc/sphinx/issues/7807\">#7807</a>: autodoc: Show detailed warning when type_comment is mismatched with its\nsignature</li>\n</ul>\n<h2>Bugs fixed</h2>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/sphinx-doc/sphinx/issues/7808\">#7808</a>: autodoc: Warnings raised on variable and attribute type annotations</li>\n<li><a href=\"https://github-redirect.dependabot.com/sphinx-doc/sphinx/issues/7802\">#7802</a>: autodoc: EOFError is raised on parallel build</li>\n<li><a href=\"https://github-redirect.dependabot.com/sphinx-doc/sphinx/issues/7821\">#7821</a>: autodoc: TypeError is raised for overloaded C-ext function</li>\n<li><a href=\"https://github-redirect.dependabot.com/sphinx-doc/sphinx/issues/7805\">#7805</a>: autodoc: an object which descriptors returns is unexpectedly documented</li>\n<li><a href=\"https://github-redirect.dependabot.com/sphinx-doc/sphinx/issues/7807\">#7807</a>: autodoc: wrong signature is shown for the function using contextmanager</li>\n<li><a href=\"https://github-redirect.dependabot.com/sphinx-doc/sphinx/issues/7812\">#7812</a>: autosummary: generates broken stub files if the target code contains</li>\n</ul>\n<!-- raw HTML omitted -->\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/sphinx-doc/sphinx/commit/1cb5fa2f6a02ac4425e3db40c8c40bba7d831a9e\"><code>1cb5fa2</code></a> Bump to 3.1.2 final</li>\n<li><a href=\"https://github.com/sphinx-doc/sphinx/commit/d83d5924eb66373e601bd24963ba46d1bfc50a45\"><code>d83d592</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/sphinx-doc/sphinx/issues/7878\">#7878</a> from mgeier/float-clearing</li>\n<li><a href=\"https://github.com/sphinx-doc/sphinx/commit/c40cb79461da8b7b1322fb8ed69c0c16f0191e9f\"><code>c40cb79</code></a> Update CHANGES for PR <a href=\"https://github-redirect.dependabot.com/sphinx-doc/sphinx/issues/7878\">#7878</a></li>\n<li><a href=\"https://github.com/sphinx-doc/sphinx/commit/3098aba3431eb8c40ea052d6b8fc90328802c389\"><code>3098aba</code></a> basic CSS: apply &quot;clearfix&quot; to admonitions etc.</li>\n<li><a href=\"https://github.com/sphinx-doc/sphinx/commit/045fc6807820ba1a1976799a237cc01cfc8403c8\"><code>045fc68</code></a> basic CSS: remove overflow-x from admonition/topic, allow more &quot;floating&quot;</li>\n<li><a href=\"https://github.com/sphinx-doc/sphinx/commit/3e643735143be400462438fadfde494b8caf014d\"><code>3e64373</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/sphinx-doc/sphinx/issues/7916\">#7916</a> from tk0miya/7650_signatures_for_decorator</li>\n<li><a href=\"https://github.com/sphinx-doc/sphinx/commit/9b74e6cd675937dc53745513167a8c93531374fe\"><code>9b74e6c</code></a> autodoc: the signature of base function will be shown for decorated functions</li>\n<li><a href=\"https://github.com/sphinx-doc/sphinx/commit/cc4534d12fb875bc11d7b26f9a0553d42af4ad53\"><code>cc4534d</code></a> Update CHANGES for PR <a href=\"https://github-redirect.dependabot.com/sphinx-doc/sphinx/issues/7852\">#7852</a></li>\n<li><a href=\"https://github.com/sphinx-doc/sphinx/commit/2cc6264f2db6ba6c2e498a661ebcf88e820bc525\"><code>2cc6264</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/sphinx-doc/sphinx/issues/7852\">#7852</a> from mgeier/basic-css-simple-lists</li>\n<li><a href=\"https://github.com/sphinx-doc/sphinx/commit/f743df6c20eb7895ff299fc8d8b43353f20d9116\"><code>f743df6</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/sphinx-doc/sphinx/issues/7914\">#7914</a> from tk0miya/7812_autodoc_name_conflicts</li>\n<li>Additional commits viewable in <a href=\"https://github.com/sphinx-doc/sphinx/compare/v0.1.61611...v3.1.2\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>"}}, {"doc": {"_id": 1608, "title": "Bump codecov/codecov-action from v1 to v1.0.10", "content": "Bumps [codecov/codecov-action](https://github.com/codecov/codecov-action) from v1 to v1.0.10.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/codecov/codecov-action/releases\">codecov/codecov-action's releases</a>.</em></p>\n<blockquote>\n<h2>Migrate to requestretry</h2>\n<h2>Version <code>1.0.10</code> introduces the following changes:</h2>\n<ul>\n<li><code>1.0.9</code> had a built-in dependency that was not easily packaged causing failures. We have switched out this dependency.</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/codecov/codecov-action/commit/f3570723ef743f6942b6a480461ed0cd6c0f9baa\"><code>f357072</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/89\">#89</a> from codecov/fix-ependency</li>\n<li><a href=\"https://github.com/codecov/codecov-action/commit/f40f110376fbb164c804f925b583445164e1e667\"><code>f40f110</code></a> Try requestretry</li>\n<li><a href=\"https://github.com/codecov/codecov-action/commit/4f81def87b0e16c92af2922826e57003370ca284\"><code>4f81def</code></a> Upgrade ncc</li>\n<li><a href=\"https://github.com/codecov/codecov-action/commit/ddc46b31076017733ed86861490474962acca269\"><code>ddc46b3</code></a> Fix dependencies</li>\n<li><a href=\"https://github.com/codecov/codecov-action/commit/1b088680d537fe1539d2f20f2650b58683107ca5\"><code>1b08868</code></a> Fix dependencies</li>\n<li><a href=\"https://github.com/codecov/codecov-action/commit/22f6ff10ac45bbfee7a35d295d2b916763f79407\"><code>22f6ff1</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/88\">#88</a> from codecov/update-dist</li>\n<li><a href=\"https://github.com/codecov/codecov-action/commit/0ceca4b5d317c165971f8be1a2617d2e2de4459e\"><code>0ceca4b</code></a> Install dependencies</li>\n<li><a href=\"https://github.com/codecov/codecov-action/commit/3658bafacb3801ba198aa672d48d8aa996920881\"><code>3658baf</code></a> Bump version</li>\n<li><a href=\"https://github.com/codecov/codecov-action/commit/ef3b48314f196e578bb35442351852030e75eec8\"><code>ef3b483</code></a> Update dist</li>\n<li><a href=\"https://github.com/codecov/codecov-action/commit/dbf1ddee080f2a33f5f4e1cc37d00ea600b5b366\"><code>dbf1dde</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/87\">#87</a> from codecov/retry-bash</li>\n<li>Additional commits viewable in <a href=\"https://github.com/codecov/codecov-action/compare/v1...f3570723ef743f6942b6a480461ed0cd6c0f9baa\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>"}}, {"doc": {"_id": 1607, "title": "Create Dependabot config file", "content": ":wave: Dependabot is moving natively into GitHub! This pull request migrates your configuration from Dependabot.com to a config file, using the [new syntax](https://help.github.com/en/github/administering-a-repository/configuration-options-for-dependency-updates). When you merge this pull request, we'll swap out `dependabot-preview` (me) for a new `dependabot` app, and you'll be all set!\n\nWith this change, you'll now use the [Dependabot page in GitHub](https://github.com/PyGithub/PyGithub/network/updates), rather than the [Dependabot dashboard](https://app.dependabot.com/), to monitor your version updates. Dependabot is now configured exclusively using config files.\n\n\n\nThe new version does not yet support private git dependencies. If you use these we recommend recommend leaving Dependabot Preview active.\n\n\n\n\n\n\n\n\nIf you've got any questions or feedback for us, please let us know by creating an issue in the [dependabot/dependabot-core](https://github.com/dependabot/dependabot-core/issues) repository.\n\n[Learn more about the relaunch of Dependabot](https://github.blog/2020-06-01-keep-all-your-packages-up-to-date-with-dependabot/)\n\nPlease note that regular `@dependabot` commands do not work on this pull request.\n\n:robot::yellow_heart:\n"}}, {"doc": {"_id": 1606, "title": "Check for updates to GitHub Actions every weekday", "content": "Now that dependabot is native to GitHub and the fact that this project makes use of GitHub actions, I think it would be nice if dependabot were to send automatic PR's of version bumps to outdated GitHub actions."}}, {"doc": {"_id": 1605, "title": "Add support for requested_reviewers on PullRequest", "content": "This is helpful for detecting when someone has asked for a rereview on a\r\npull request review."}}, {"doc": {"_id": 1604, "title": "Help accessing issue event body", "content": "Hi there, I am a bit stuck and would love some help if possible.\r\n\r\nI am trying to access the date that an issue was opened/closed. I believe I should do this through the issue events, but so far I have only been able to see a list of issue events with ids (like `IssueEvent(id=2633664990)`). I saw that in some cases calling `.body` works to access the content itself, but that doesn't seem to be the solution here. \r\n\r\nAny ideas? Here is basically what I am doing:\r\n\r\n```\r\nrepo = Github.get_repo(\"some_repo\")\r\nissues = repo.get_issues()\r\n\r\nfor issue in issues:\r\n    for event in issue.get_events():\r\n        print(event)\r\n```\r\n\r\nThank you :)"}}, {"doc": {"_id": 1603, "title": "Is it possible to get the hyperlinks of issues' body?", "content": "For example, this issue has some hyperlinks on it:\r\n\r\nhttps://github.com/PyGithub/PyGithub/issues/874\r\n\r\nI'd like to get those links, is there a way to do it?"}}, {"doc": {"_id": 1602, "title": "Work around GitHub Organization URL bug", "content": "GitHub is returning incorrect URL values for organizations. Work around\r\nthis by correcting them.\r\n\r\nFixes: #1598"}}, {"doc": {"_id": 1601, "title": "upload_asset with data in memory", "content": "My solution to #1140.\r\nI made a few new methods to handle this case instead of wrapping functionality into the existing `upload_asset`, since there's a couple bits of additional information that you can get out of the file path that aren't available with a generic file-like object (specifically -  a default asset label/name, the MIME type, and the file size). \r\n\r\nI'll be honest - I'm kind of confused at how/what the `--record` option does in testing, so I'm not sure if I did it correctly.\r\n\r\nOrganization wise, it'd probably be nice to merge the tests/GitRelease1140.py file into tests/GitRelease.py, but it seems like that has issues with tests/ReplayData. From what I can tell I'd have to reset it to use my testing Github account instead of the existing one, which I'm open to looking into.\r\n\r\nWhile I'm here I should mention that since Github will be phasing out password authentications in a few months, so should the default authentication for testing be set to using a token?"}}, {"doc": {"_id": 1600, "title": "github.__version__ is missing", "content": "This is very standard, see https://www.python.org/dev/peps/pep-0396/"}}, {"doc": {"_id": 1599, "title": "get_stats_contributors gets stuck on specific repo", "content": "The following call (for that repo specifically) gets stuck in an infinite loop:\r\n```\r\ng = Github(TOKEN)\r\nrepo = g.get_repo(\"basnijholt/cf-graph-countyfair\").get_stats_contributors()\r\n```\r\n\r\nI am using Python 3.8.2 and PyGithub 1.51.\r\n\r\n\r\nThis is probably related to the \"Contributors\" tab not showing up at https://github.com/basnijholt/cf-graph-countyfair.\r\n<img width=\"1255\" alt=\"Screenshot 2020-07-12 at 13 05 47 1\" src=\"https://user-images.githubusercontent.com/6897215/87244818-7817d400-c440-11ea-8665-a48ef19d4814.png\">\r\n\r\nI am not sure how to check this, but `get_stats_contributors` should raise an error whenever this is not possible."}}, {"doc": {"_id": 1598, "title": "[BUG] PyGithub uses incorrect API endpoint when fetching organization projects", "content": "I'm using PyGithub to write some automation around org-level Github projects.\r\n\r\nHowever, I'm running into a problem when I try and fetch a project associated with an organization. See below as an example:\r\n\r\n```python\r\ngithub = Github(token)\r\nrepo = github.get_repo(repo_name)\r\norg_projects = repo.organization.get_projects()\r\nproject = org_projects[0]\r\n```\r\n\r\nWhen running this code, I encounter a `GithubException` with `422` as the error:\r\n\r\n```python\r\nTraceback (most recent call last):\r\n  File \"scripts/exec\", line 4, in <module>\r\n    sprint_project = org_projects[0]\r\n  File \"/home/runner/.local/lib/python3.6/site-packages/github/PaginatedList.py\", line 50, in __getitem__\r\n    self.__fetchToIndex(index)\r\n  File \"/home/runner/.local/lib/python3.6/site-packages/github/PaginatedList.py\", line 68, in __fetchToIndex\r\n    self._grow()\r\n  File \"/home/runner/.local/lib/python3.6/site-packages/github/PaginatedList.py\", line 71, in _grow\r\n    newElements = self._fetchNextPage()\r\n  File \"/home/runner/.local/lib/python3.6/site-packages/github/PaginatedList.py\", line 201, in _fetchNextPage\r\n    \"GET\", self.__nextUrl, parameters=self.__nextParams, headers=self.__headers\r\n  File \"/home/runner/.local/lib/python3.6/site-packages/github/Requester.py\", line 319, in requestJsonAndCheck\r\n    verb, url, parameters, headers, input, self.__customConnection(url)\r\n  File \"/home/runner/.local/lib/python3.6/site-packages/github/Requester.py\", line 342, in __check\r\n    raise self.__createException(status, responseHeaders, output)\r\ngithub.GithubException.GithubException: 422 {\"message\": \"ID 67755615 is an Organization, not a User. Change your request to use Organization endpoints.\", \"documentation_url\": \"https://developer.github.com/v3/projects/\"}\r\n```\r\n\r\nI'm reading this as PyGithub using the incorrect endpoint for fetching organization projects internally. Or am I mistaken?\r\n\r\nHappy to help further if needed."}}, {"doc": {"_id": 1597, "title": "Support for GH secrets", "content": "Dear developers,\r\n\r\nI need support for Github secrets using PyGithub.\r\nhttps://developer.github.com/v3/actions/secrets/\r\n\r\nHence, I would like to request support for Github secrets."}}, {"doc": {"_id": 1596, "title": "Add app_push_restrictions support for branch-protections", "content": "It is also possible to add app_push_restrictions for branch protections,\nthis adds support for it.\n\nSigned-off-by: Paul Belanger <pabelanger@redhat.com>"}}, {"doc": {"_id": 1595, "title": "module 'jwt' has no attribute 'encode'", "content": "Hi, \r\n\r\nwhen running on python 3.8.2 with PyGithub 1.51 when I try this: \r\n`token = GithubIntegration(71447,'/Users/jorge/Downloads/bot.2020-07-04.private-key.pem').create_jwt() `\r\nI get: \r\n`  File \"/Users/jorge/.venv/dmesh-bot/lib/python3.8/site-packages/github/MainClass.py\", line 802, in create_jwt\r\n    encrypted = jwt.encode(payload, key=self.private_key, algorithm=\"RS256\")\r\nAttributeError: module 'jwt' has no attribute 'encode'`\r\n\r\nDoes someone have the same issue ?"}}, {"doc": {"_id": 1594, "title": "[Feature Request] Display progress bar when uploading large assets", "content": "When using PyGithub to upload release assets, the script just waits for the upload to complete, and there is nothing in console that tells the progress. This could baffle some users. It would be much better to display a progress bar to indicate that something is going on.\r\n\r\nSome existing library like [tqdm](https://github.com/tqdm/tqdm) and [progressbar2](https://github.com/WoLpH/python-progressbar) are good tools to utilize."}}, {"doc": {"_id": 1593, "title": "Does The PyGithub APIs are thread safe?", "content": ""}}, {"doc": {"_id": 1592, "title": "Do not check reaction_type before sending", "content": "There is a bunch of repeated code checking reactions which has the issue\r\nthat it can easily get out of date with what GitHub accepts. Drop the\r\ncheck, and rely on GitHub returning an error.\r\n\r\nFixes #1554"}}, {"doc": {"_id": 1591, "title": "Github deprecating `access_token` query parameter", "content": "\r\n\r\n<img width=\"1099\" alt=\"Screenshot 2020-06-30 at 22 01 57\" src=\"https://user-images.githubusercontent.com/65710507/86221824-4e77c680-bb7d-11ea-867b-41d28ab57aea.png\">\r\n"}}, {"doc": {"_id": 1590, "title": "Since parameter not working in get_users?", "content": "I'm trying to fetch users with pagination, and am facing issues. GitHub returns 0 results.\r\n\r\nHere's my snippet:\r\n`users = g.search_users('', location=\"Israel\", since=44345425)`\r\n\r\nWhen searching from the UI I see there are many results after user with id 44345425, but through PyGithub I'm just unable to fetch these.\r\n\r\nHelp please?"}}, {"doc": {"_id": 1589, "title": "More than 1000 results search_repositories()", "content": "Is there a way to get more than 1000 results when searching for repositories? How could I iterate over all the existing results and not only through the first 1000?"}}, {"doc": {"_id": 1588, "title": "Add support for deployment statuses", "content": "Fixes issue #1586 "}}, {"doc": {"_id": 1587, "title": "Create WorkflowRun.timing namedtuple from the dict", "content": "To stop non-deterministic dictionary ordering ruining our day on Python\r\n3.5, create the namedtuple using the keys of the dictionary."}}, {"doc": {"_id": 1586, "title": "More support for Deployments", "content": "I am trying to create a server that uses [GitHub Deployments](https://developer.github.com/v3/repos/deployments/) for a continuous deployment (similar to [Heroku's automatic GitHub deploys](https://devcenter.heroku.com/articles/github-integration)). PyGithub allows me to get and create deployments, but doesn't seem to support deletion or deployment statuses. Without these functions, it will be more difficult to display feedback about deployments within a repository.\r\n\r\nAre there any existing plans to add this functionality? If not, I am willing to work on this."}}, {"doc": {"_id": 1585, "title": "Adds the 'twitter_username' attribute to NamedUser.", "content": "Closes #1584 (It looked pretty easy, so I implemented my own fix).\r\n\r\nI ran the `add_attribute.py` script to generate the updates, but noticed that the script doesn't update the `.pyi` files.\r\n\r\nAfter my changes:\r\n<img width=\"496\" alt=\"Screen Shot 2020-06-26 at 1 18 09 PM\" src=\"https://user-images.githubusercontent.com/390825/85890061-40f3c280-b7b2-11ea-9732-5128754c1b8a.png\">\r\n "}}, {"doc": {"_id": 1584, "title": "NamedUser object is missing the twitter_username property", "content": "The `twitter_username` property is available via the Github v3 REST API, as documented here: https://developer.github.com/v3/users/#get-a-user. However, it isn't parsed from the response to `get_user()`, so (e.g.) `Github().get_user(\"jacquev6\").twitter_username` raises an Attribute error.\r\n\r\nIt looks pretty straightforward to submit a fix, and I'd be happy to do so if there's interest. "}}, {"doc": {"_id": 1583, "title": "Add support for Workflow Runs", "content": "To build on the previous work supporting querying Workflows for GitHub\r\nActions, add a class and relevant methods to support querying runs of a\r\nworkflow."}}, {"doc": {"_id": 1582, "title": "More precise typing", "content": "This is  test PR for workflow runs that I will nail shut shortly."}}, {"doc": {"_id": 1581, "title": "More precise typing for Repository.create_pull", "content": "The typing information for Repository.create_pull did no type checking\r\nof the arguments at all. Using the overload functionality, specify both\r\nstyles of create_pull(). Drive-by a nearby function from using a generic\r\ndict to Dict[str, str]."}}, {"doc": {"_id": 1580, "title": "Add storing to PaginatedList", "content": "I add storing parameter in functions search_code and search_commits. It is work - I tried it in my server. In future I can add in other methods which used PaginatedList as return object"}}, {"doc": {"_id": 1579, "title": "Many elements stored in PaginatedList", "content": "Hello, I use your library and meet problem with memory. I do five threads with search and my program need more than 1GB RAM, I found problem in PaginatedList object - it use more than 50 MB of every instance. I think it is happened because PaginatedList stored all results. What do you think about additional parameter which disable storing elements in `__elements`? "}}, {"doc": {"_id": 1578, "title": "mypy stub files not always kept up to date", "content": "The [PullRequest.pyi](https://github.com/PyGithub/PyGithub/blob/master/github/PullRequest.pyi) file is missing a few attributes that are present in the source. I noticed that `draft` and `maintainer_can_modify` are both missing, but there are likely more in PullRequest or other classes.\r\n\r\nI created #1577 to fix the above problem, but wanted to file this issue to bring up the issue that there may be more, and that some sort of CI solution is likely needed to fix existing omissions and prevent future regression."}}, {"doc": {"_id": 1577, "title": "Add missing properties to PullRequest.pyi", "content": "The `draft` and `maintainer_can_modify` attributes are missing from the PullRequest pyi file."}}, {"doc": {"_id": 1576, "title": "Update sphinx requirement from <3 to <4", "content": "Updates the requirements on [sphinx](https://github.com/sphinx-doc/sphinx) to permit the latest version.\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/sphinx-doc/sphinx/blob/3.x/CHANGES\">sphinx's changelog</a>.</em></p>\n<blockquote>\n<h1>Release 3.1.1 (released Jun 14, 2020)</h1>\n<h2>Incompatible changes</h2>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/sphinx-doc/sphinx/issues/7808\">#7808</a>: napoleon: a type for attribute are represented as typed field</li>\n</ul>\n<h2>Features added</h2>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/sphinx-doc/sphinx/issues/7807\">#7807</a>: autodoc: Show detailed warning when type_comment is mismatched with its\nsignature</li>\n</ul>\n<h2>Bugs fixed</h2>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/sphinx-doc/sphinx/issues/7808\">#7808</a>: autodoc: Warnings raised on variable and attribute type annotations</li>\n<li><a href=\"https://github-redirect.dependabot.com/sphinx-doc/sphinx/issues/7802\">#7802</a>: autodoc: EOFError is raised on parallel build</li>\n<li><a href=\"https://github-redirect.dependabot.com/sphinx-doc/sphinx/issues/7821\">#7821</a>: autodoc: TypeError is raised for overloaded C-ext function</li>\n<li><a href=\"https://github-redirect.dependabot.com/sphinx-doc/sphinx/issues/7805\">#7805</a>: autodoc: an object which descriptors returns is unexpectedly documented</li>\n<li><a href=\"https://github-redirect.dependabot.com/sphinx-doc/sphinx/issues/7807\">#7807</a>: autodoc: wrong signature is shown for the function using contextmanager</li>\n<li><a href=\"https://github-redirect.dependabot.com/sphinx-doc/sphinx/issues/7812\">#7812</a>: autosummary: generates broken stub files if the target code contains\nan attribute and module that are same name</li>\n<li><a href=\"https://github-redirect.dependabot.com/sphinx-doc/sphinx/issues/7808\">#7808</a>: napoleon: Warnings raised on variable and attribute type annotations</li>\n<li><a href=\"https://github-redirect.dependabot.com/sphinx-doc/sphinx/issues/7811\">#7811</a>: sphinx.util.inspect causes circular import problem</li>\n</ul>\n<h1>Release 3.1.0 (released Jun 08, 2020)</h1>\n<h2>Dependencies</h2>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/sphinx-doc/sphinx/issues/7746\">#7746</a>: mathjax: Update to 2.7.5</li>\n</ul>\n<h2>Incompatible changes</h2>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/sphinx-doc/sphinx/issues/7477\">#7477</a>: imgconverter: Invoke &quot;magick convert&quot; command by default on Windows</li>\n</ul>\n<h2>Deprecated</h2>\n<ul>\n<li>The first argument for sphinx.ext.autosummary.generate.AutosummaryRenderer has\nbeen changed to Sphinx object</li>\n<li><code>sphinx.ext.autosummary.generate.AutosummaryRenderer</code> takes an object type\nas an argument</li>\n<li>The <code>ignore</code> argument of <code>sphinx.ext.autodoc.Documenter.get_doc()</code></li>\n<li>The <code>template_dir</code> argument of <code>sphinx.ext.autosummary.generate. AutosummaryRenderer</code></li>\n</ul>\n<!-- raw HTML omitted -->\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/sphinx-doc/sphinx/commit/e7c2949a872c0654428c6bd1bea29659a65c684e\"><code>e7c2949</code></a> Bump to 3.1.1 final</li>\n<li><a href=\"https://github.com/sphinx-doc/sphinx/commit/d2cec67670e9af139ce189f01e0a32f691ac7c30\"><code>d2cec67</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/sphinx-doc/sphinx/issues/7831\">#7831</a> from tk0miya/7807_contextmanager</li>\n<li><a href=\"https://github.com/sphinx-doc/sphinx/commit/941e34051000d4d9b6623ba536b0987ad1b4dd49\"><code>941e340</code></a> Merge branch '3.1.x' into 7807_contextmanager</li>\n<li><a href=\"https://github.com/sphinx-doc/sphinx/commit/b56772102e138b0a5d83f02e0031eb075c854921\"><code>b567721</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/sphinx-doc/sphinx/issues/7829\">#7829</a> from tk0miya/7805_retval_of_descriptors</li>\n<li><a href=\"https://github.com/sphinx-doc/sphinx/commit/6c3db6d65a3912fd9b21497fdcc63c9630132912\"><code>6c3db6d</code></a> Fix <a href=\"https://github-redirect.dependabot.com/sphinx-doc/sphinx/issues/7805\">#7805</a>: autodoc: an object which descriptors returns is documented</li>\n<li><a href=\"https://github.com/sphinx-doc/sphinx/commit/02acad66f09b5d14078ee17c2568d4d976d59a18\"><code>02acad6</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/sphinx-doc/sphinx/issues/7827\">#7827</a> from tk0miya/7808_napoleon_nitpicky_warning</li>\n<li><a href=\"https://github.com/sphinx-doc/sphinx/commit/6eb43ba13873019aa656a6b2d5efeb5deb32d6fb\"><code>6eb43ba</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/sphinx-doc/sphinx/issues/7823\">#7823</a> from tk0miya/7821_overload_builtin_function</li>\n<li><a href=\"https://github.com/sphinx-doc/sphinx/commit/d77622ba79a0ce8381b484ea4756d1f52b5f7803\"><code>d77622b</code></a> Fix <a href=\"https://github-redirect.dependabot.com/sphinx-doc/sphinx/issues/7807\">#7807</a>: autodoc: wrong signature is shown for the function using contextma...</li>\n<li><a href=\"https://github.com/sphinx-doc/sphinx/commit/b3affa6949d3858312a28ff75a8161bfaf5db8ee\"><code>b3affa6</code></a> Fix autodoc: Show detailed warning when type_comment is mismatched (refs: <a href=\"https://github-redirect.dependabot.com/sphinx-doc/sphinx/issues/7807\">#7807</a>)</li>\n<li><a href=\"https://github.com/sphinx-doc/sphinx/commit/e983189c942848033a52f0b92737f7f07ed6adbc\"><code>e983189</code></a> Update CHANGES</li>\n<li>Additional commits viewable in <a href=\"https://github.com/sphinx-doc/sphinx/compare/v0.1.61611...v3.1.1\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n- `@dependabot badge me` will comment on this PR with code to add a \"Dependabot enabled\" badge to your readme\n\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\n- Update frequency (including time of day and day of week)\n- Pull request limits (per update run and/or open at any time)\n- Out-of-range updates (receive only lockfile updates, if desired)\n- Security updates (receive only security updates, if desired)\n\n\n\n</details>"}}, {"doc": {"_id": 1575, "title": "More precise typing for MainClass.get_user()", "content": "Use typing.overload for MainClass.get_user() since it can return two\r\ndisparate types. Correct the docstring for it, as well as locking down\r\nSphinx to <3 due to built docs issue and drive-by link correction.\r\n\r\nFixes #1550"}}, {"doc": {"_id": 1574, "title": "User format to enable Hex user name", "content": "This allows user names that correspond to Hex values like 0000"}}, {"doc": {"_id": 1573, "title": "Hexadecimal usernames fail", "content": "Use  Formatted String Literals when parsing the username"}}, {"doc": {"_id": 1572, "title": "How to set required_status_checks", "content": "Hey,\r\nI want to update/initialize my branch-protection of one of my projects through PyGithub.\r\nI can edit my branch protection successfully like this:\r\n`my_branch.edit_protection(dismiss_stale_reviews=True)`\r\n\r\nHowever, I want to also set the `required_status_checks`. \r\nWhen trying  `my_branch.edit_required_status_checks(strict=True, contexts=['myCI'])` \r\nI get the following error message: \r\n```\r\nGithubException: 404 {\"message\": \"Required status checks not enabled\", \"documentation_url\": \r\n\"https://developer.github.com/v3/repos/branches/#update-required-status-checks-of-protected-branch\"}\r\n```\r\n\r\nI can see from the GitHub API v3 documentation, that this parameter exists and could be set.\r\n\r\nBut how is this done via PyGitHub? So how can I successfully set my `required_status_checks`?\r\n\r\nEdit: solved by providing `strict` and `contexts`\r\n\r\nThanks in advance\r\n`"}}, {"doc": {"_id": 1571, "title": "pygithub api\uff1aHow to get all comments about a problem\uff1f", "content": ""}}, {"doc": {"_id": 1570, "title": "How to delete branch?", "content": "Is it possible to delete a branch by it's name? I did not see that on the docs: https://pygithub.readthedocs.io/en/latest/github_objects/Branch.html\r\n\r\nI also did not find a way to delete it while merging a PR and there is an [open issue from 2017](https://github.com/PyGithub/PyGithub/issues/580)."}}, {"doc": {"_id": 1569, "title": "This is a new issue", "content": ""}}, {"doc": {"_id": 1568, "title": "Inconsistent data type for time related attributes of `<class 'github.Issue.Issue'>`", "content": "When I constructed an `Issue` object, I was expecting time-related fields (eg: `created_at` and `closed_at`) would return the same data type: `datetime.datetime`. However, `last_modified` did not. It returned in a string format representing date and time, like the following:\r\n```\r\nipdb> issue.last_modified\r\n'Sat, 20 Jun 2020 00:43:01 GMT'\r\n```\r\n\r\nIt is not a blocker as there are workarounds. But it would be a better experience if the data type is consistent for those fields."}}, {"doc": {"_id": 1567, "title": "No Issue/PR template", "content": ""}}, {"doc": {"_id": 1566, "title": "Bug on Repository.get_pulls", "content": "I tried making a find pull requests on with the parameters:\r\n\r\n`pulls = repo.get_pulls(state=\"open\", base=\"master\", head=\"nox-mypy\")`\r\n\r\nrepo: https://github.com/staticdev/toml-validator\r\n\r\nIt is returning 2 PRs, but there is only one!\r\n\r\nSame happens with same parameters on repo https://github.com/staticdev/pdf-split-tool."}}, {"doc": {"_id": 1565, "title": "Small documentation correction in Repository.py", "content": "Class `github.Clone.Clone` doesn't exist and should reference `github.Clones.Clones` instead.\r\n\r\nShort and simple PR, fixing this makes the documentation more accurate, and makes navigation in readthedocs easier."}}, {"doc": {"_id": 1564, "title": "Add deployments documentation", "content": "Add the documentation related to https://github.com/PyGithub/PyGithub/issues/1117 to https://github.com/PyGithub/PyGithub/tree/master/doc/examples"}}, {"doc": {"_id": 1563, "title": "Update sphinx-rtd-theme requirement from <0.5 to <0.6", "content": "Updates the requirements on [sphinx-rtd-theme](https://github.com/rtfd/sphinx_rtd_theme) to permit the latest version.\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/readthedocs/sphinx_rtd_theme/blob/master/docs/changelog.rst\">sphinx-rtd-theme's changelog</a>.</em></p>\n<blockquote>\n<h1>v0.5.0</h1>\n<p>Date</p>\n<p>:   Jun 17, 2020</p>\n<h2>Fixes</h2>\n<ul>\n<li>Fix bullet list spacing to respect simple/complex list styles</li>\n</ul>\n<h1>v0.5.0rc2</h1>\n<p>Date</p>\n<p>:   June 5, 2020</p>\n<h2>Fixes</h2>\n<ul>\n<li>Fix issue with simple definition lists that was missed</li>\n<li>Change FOUT back to FOIT</li>\n<li>Fix several margin issues with lists, nested lists, and nested content</li>\n<li>Add colon back to field lists</li>\n</ul>\n<h1>v0.5.0rc1</h1>\n<p>Date</p>\n<p>:   May 6, 2020</p>\n<h2>Fixes</h2>\n<ul>\n<li>Fix many styling issues that look different when using the Sphinx HTML5 writer</li>\n</ul>\n<h2>Other Changes</h2>\n<ul>\n<li>Add the <code>navigation</code> template block around the navigation area.</li>\n<li>Added i18n support using Babel</li>\n<li>Added translations for 10 new languages</li>\n<li>Moved build system from Grunt and friends to Webpack</li>\n<li>Remove Modernizr, but keep html5shiv (<a href=\"https://github-redirect.dependabot.com/rtfd/sphinx_rtd_theme/issues/724\">#724</a>, <a href=\"https://github-redirect.dependabot.com/rtfd/sphinx_rtd_theme/issues/525\">#525</a>)</li>\n</ul>\n<h1>v0.4.3</h1>\n</tr></table> ... (truncated)\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/readthedocs/sphinx_rtd_theme/commit/38c30bf8ac99f648aef15907c623648739f373de\"><code>38c30bf</code></a> Merge branch 'release/0.5.0'</li>\n<li><a href=\"https://github.com/readthedocs/sphinx_rtd_theme/commit/a452102fff87fa468512fa1d075c538f5b897783\"><code>a452102</code></a> Bump version</li>\n<li><a href=\"https://github.com/readthedocs/sphinx_rtd_theme/commit/b9e83286958c4f3194e1e1605d8b3cf087ebbb61\"><code>b9e8328</code></a> Update changelog for 0.5.0</li>\n<li><a href=\"https://github.com/readthedocs/sphinx_rtd_theme/commit/1a32899ba39a8740f272a214753a6f9b2a6dc64e\"><code>1a32899</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/rtfd/sphinx_rtd_theme/issues/945\">#945</a> from readthedocs/agj/nested-list-item-bottom-margin</li>\n<li><a href=\"https://github.com/readthedocs/sphinx_rtd_theme/commit/ac20ce75d426efeb40fe2af1f89ea9bad285a45b\"><code>ac20ce7</code></a> Use only-child to limit margins on single paragraph list items</li>\n<li><a href=\"https://github.com/readthedocs/sphinx_rtd_theme/commit/aa0a108543ddbfa5f1ba95f3459d5de09ec74518\"><code>aa0a108</code></a> Add complex list margins, use margin-less items for ul.simple margins</li>\n<li><a href=\"https://github.com/readthedocs/sphinx_rtd_theme/commit/d85f8f89279fe8cb1ce8781a1c6553017abe1832\"><code>d85f8f8</code></a> Add a bottom margin for anything that does not match p, ul, ol</li>\n<li><a href=\"https://github.com/readthedocs/sphinx_rtd_theme/commit/73fe2fba498bee59e98dd9230bb740c9a4ed9ea9\"><code>73fe2fb</code></a> Add changelog dates</li>\n<li><a href=\"https://github.com/readthedocs/sphinx_rtd_theme/commit/4de3f217a9db1e62c4c4cb13c69ee53f50fb1161\"><code>4de3f21</code></a> No, update changelog</li>\n<li><a href=\"https://github.com/readthedocs/sphinx_rtd_theme/commit/a7e656a8cf05f34eab155e43fea69e27fa3102bb\"><code>a7e656a</code></a> Update changelog</li>\n<li>Additional commits viewable in <a href=\"https://github.com/rtfd/sphinx_rtd_theme/compare/0.1.8...0.5.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n**Note:** This repo was added to Dependabot recently, so you'll receive a maximum of 5 PRs for your first few update runs. Once an update run creates fewer than 5 PRs we'll remove that limit.\n\nYou can always request more updates by clicking `Bump now` in your [Dependabot dashboard](https://app.dependabot.com).\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n- `@dependabot badge me` will comment on this PR with code to add a \"Dependabot enabled\" badge to your readme\n\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\n- Update frequency (including time of day and day of week)\n- Pull request limits (per update run and/or open at any time)\n- Out-of-range updates (receive only lockfile updates, if desired)\n- Security updates (receive only security updates, if desired)\n\n\n\n</details>"}}, {"doc": {"_id": 1562, "title": "Changes to repo attribute `delete_branch_on_merge` take no effect", "content": "I'm using `PyGithub==1.51` with Github Enterprise 2.19 \r\n\r\n**Example:**\r\n```python\r\ng = Github(base_url=\"https://github.company.com/api/v3\", login_or_token=os.getenv(\"GHE_TOKEN\"))\r\nghr = g.get_repo(org + \"/\" + repo)\r\nghr.edit(delete_branch_on_merge=True)\r\n```\r\n\r\n**Expected:**\r\n```\r\nghr.delete_branch_on_merge == True\r\n```\r\n\r\n**Actual:**\r\n```\r\nghr.delete_branch_on_merge == None\r\n```\r\n\r\n**Logs:**\r\n```\r\nPATCH https://github.company.com/api/v3/repos/org/repo {'Authorization': 'token (oauth token removed)', 'User-Agent': 'PyGithub/Python', 'Content-Type': 'application/json'} {\"name\": \"repo\", \"delete_branch_on_merge\": true} ==> 200 {'server': 'openresty', 'date': 'Wed, 17 Jun 2020 15:27:11 GMT', 'content-type': 'application/json; charset=utf-8', 'transfer-encoding': 'chunked', 'connection': 'keep-alive', 'x-ratelimit-limit': '5000', 'x-ratelimit-reset': '1592407968', 'x-ratelimit-remaining': '4930', 'status': '200 OK', 'cache-control': 'private, max-age=60, s-maxage=60', 'vary': 'Accept, Authorization, Cookie, X-GitHub-OTP',[...]'}\r\n```"}}, {"doc": {"_id": 1561, "title": "Feature: Merge pull request", "content": "Is this on the roadmap? Since I fetched a pull request using the query function, I would like to merge it."}}, {"doc": {"_id": 1560, "title": "from github import Github make mistake ", "content": "raceback (most recent call last):\r\n  File \"D:/github api/github/src/mainClass.py\", line 1, in <module>\r\n    from github import Github\r\nImportError: cannot import name 'Github' from 'github' (unknown location)\r\n"}}, {"doc": {"_id": 1559, "title": "Remove \"api_preview\" parameter from type stubs and docstrings", "content": "mypy complains about the `api_preview` parameter but it does not exist anymore."}}, {"doc": {"_id": 1558, "title": "ImportError: cannot import name 'Github' from 'github'", "content": "Using Python 3.7.4 on Windows 10, pip 20.1.1 (Not using environments)\r\nRan pip install PyGithub successfully, subsequent attempts report Requirement already satisfied.\r\n\r\nfrom github import Github\r\n\r\ngives\r\nImportError: cannot import name 'Github' from 'github'"}}, {"doc": {"_id": 1557, "title": "Doesnt find repo.", "content": "When query is something like this `filename:poetry.lock user:ZechCodes` the module fails to find repo. The file poetry.lock is from Bevy Repo of ZechCodes. I used this particular line of code\r\n```\r\ndef search_all(git_repo: str, git_wordlist: str):\r\n    #lines_list = [line.rstrip('\\n') for line in open(git_wordlist)]\r\n    lines_list = git_wordlist\r\n    git_query = \"filename:\"+lines_list + \" user:\"+git_repo\r\n    print(f\"Query: {git_query}\")\r\n    git_repo_results = git_conn.search_repositories(git_query)\r\n    git_code_results = git_conn.search_code(git_query)\r\n    git_commits_results = git_conn.search_commits(git_query)\r\n    git_users_results = git_conn.search_users(git_query)\r\n    git_issues_results = git_conn.search_issues(git_query)\r\n    print(f'Found {git_repo_results.totalCount} {git_code_results.totalCount} {git_commits_results.totalCount} {git_users_results.totalCount} {git_issues_results.totalCount}')\r\n    return\r\nsearch_all(\"ZechCodes\", \"poetry.lock\")\r\n``` \r\nOutput is something like this:\r\n```\r\nQuery: filename:poetry.lock user:ZechCodes\r\nFound 0 2 0 0 0\r\n```\r\nIt successfully find the code but not the repo. "}}, {"doc": {"_id": 1556, "title": "Possibility of boilerplate reduction", "content": "I wonder if it was possible to reduce boilerplate... something like this:\r\n\r\n```\r\nclass Artifact(\r\n    github.GithubObject.CompletableGithubObject,\r\n    metaclass=github.GithubObject.CompletableGithubObjectMeta\r\n):\r\n    \"\"\"\r\n    This class represents Artifacts.\r\n    The reference can be found here https://developer.github.com/v3/actions/artifacts/\r\n    \"\"\"\r\n    _ATTRIBUTES = {\r\n        \"id\": \"Int\",\r\n        \"node_id\": \"String\",\r\n        \"name\": \"String\",\r\n        \"size_in_bytes\": \"Int\",\r\n        \"url\": \"String\",\r\n        \"archive_download_url\": \"String\",\r\n        \"expired\": \"Bool\",\r\n        \"created_at\": \"Datetime\",\r\n        \"expires_at\": \"Datetime\"\r\n    }\r\n```\r\nThen\r\n```\r\nclass CompletableGithubObjectMeta(type):\r\n    def __new__(cls, name, bases, dct):\r\n        instance = super().__new__(cls, name, bases, dct)\r\n        for attr in dct.get('_ATTRIBUTES') or []:\r\n            def fget(self, attr_=attr):\r\n                _attr = getattr(self, '_' + attr_)\r\n                self._completeIfNotSet(_attr)\r\n                return _attr.value\r\n            setattr(instance, attr, property(fget))\r\n        return instance\r\n```\r\nand\r\n```\r\nclass GithubObject(object):\r\n    def _initAttributes(self):\r\n        for attribute in self._ATTRIBUTES:\r\n            setattr(self, '_' + attribute, NotSet)\r\n\r\n    def _useAttributes(self, attributes):\r\n        for attribute, type_ in self._ATTRIBUTES.items():\r\n            if attribute in attributes: # pragma no branch\r\n                make_method = getattr(self, f'_make{type_}Attribute')\r\n                setattr(self, '_' + attribute, make_method(attributes[attribute]))\r\n```\r\n\r\nAnd some form of .pyi autogeneration.\r\n\r\nWhat do you think?"}}, {"doc": {"_id": 1555, "title": "Upgrade actions/setup-python to v2", "content": "https://github.com/actions/setup-python/releases"}}, {"doc": {"_id": 1554, "title": "Not all issue reactions are supported by PyGitHub", "content": "Please see https://github.com/PyGithub/PyGithub/blob/master/github/Issue.py#L577-L584. It lists the supported reactions, but some are missing, if you follow your own error message leading to https://developer.github.com/v3/reactions/#reaction-types, e.g. `eyes`."}}, {"doc": {"_id": 1553, "title": "Moving towards the v4 API", "content": "I've been using this library to help us automate some processes flawlessly. But lately, I faced the issue described in #1461 which seems to require the v4 API.\r\n\r\nSo, what is your view on migrating to the v4 API? Do you think...\r\n1. It should be somewhere else? Because you think this library should be limited to REST?\r\n1. It should be a new major version and new branch rewriting everything in GraphQL \r\n1. It should be done progressively by starting to implement the features that are only in the v4 API (like #1461) and progressively switch everything else to v4 (or not)?\r\n\r\nI prefer this third approach but I'm opened to anything and will be happy to contribute to it."}}, {"doc": {"_id": 1552, "title": "Attempting to stop the clock on the weekends", "content": "I have been using **issues.updated_at** to keep track of the github issues since they have gotten last updated. I want to somehow stop the clock on the weekends. Any suggestions appreciated!"}}, {"doc": {"_id": 1551, "title": "required_linear_history not supported in branch protection", "content": "I don't see `required_linear_history` as an available option in `edit_protection` or elsewhere. Is there a specific reason for its absence or any timeline on when it might make it in?\r\n\r\n[The update protection GH docs for reference](https://developer.github.com/enterprise/2.20/v3/repos/branches/#update-branch-protection)"}}, {"doc": {"_id": 1550, "title": "More precise typing on `Github.get_user()`", "content": "In `MainClass.pyi` the `get_user` method is typed as such:\r\n```py\r\n    def get_user(\r\n        self, login: Union[str, _NotSetType] = ...\r\n    ) -> Union[AuthenticatedUser, NamedUser]: ...\r\n```\r\n\r\nBut I took a look at the implementation and I think the returned type can be better by using [function overloading](https://mypy.readthedocs.io/en/stable/more_types.html#function-overloading):\r\n```py\r\nfrom typing import overload\r\n...\r\n\r\n    @overload\r\n    def get_user(self, login: str\r\n    ) -> NamedUser: ...\r\n    @overload\r\n    def get_user(\r\n        self, login: _NotSetType = ...\r\n    ) -> AuthenticatedUser: ...\r\n    def get_user(\r\n        self, login: Union[str, _NotSetType] = ...\r\n    ) -> Union[AuthenticatedUser, NamedUser]: ...\r\n```\r\n\r\nThat way if you call it with a `login` mypy knows it returns a `NamedUser`, and if you call without the `login` argument it returns an `AuthenticatedUser`.\r\n\r\nNote: this is my current use case but I didn't check to see if other methods could be improved like this.\r\nShould I create a PR with this already and see about the rest later on?"}}, {"doc": {"_id": 1548, "title": "Stack trace in `get_required_status_checks` when not enabled.", "content": "Calling `get_required_status_checks ` (https://pygithub.readthedocs.io/en/latest/github_objects/Branch.html#github.Branch.Branch.get_required_status_checks) with required status checks disabled produces a stack trace:\r\n```\r\n>>> master.get_required_status_checks()\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/mnel/.pyenv/versions/3.6.8/lib/python3.6/site-packages/github/Branch.py\", line 264, in get_required_status_checks\r\n    \"GET\", self.protection_url + \"/required_status_checks\"\r\n  File \"/home/mnel/.pyenv/versions/3.6.8/lib/python3.6/site-packages/github/Requester.py\", line 319, in requestJsonAndCheck\r\n    verb, url, parameters, headers, input, self.__customConnection(url)\r\n  File \"/home/mnel/.pyenv/versions/3.6.8/lib/python3.6/site-packages/github/Requester.py\", line 342, in __check\r\n    raise self.__createException(status, responseHeaders, output)\r\ngithub.GithubException.GithubException: 404 {\"message\": \"Required status checks not enabled\", \"documentation_url\": \"https://developer.github.com/v3/repos/branches/#get-required-status-checks-of-protected-branch\"}\r\n>>> \r\n```\r\nI would have expected a simple `false`.\r\n\r\nCalling `get_required_status_checks ` with required status checks enabled produces good output.\r\n```\r\n>>> master.get_required_status_checks()\r\nRequiredStatusChecks(url=\"https://api.github.com/repos/some_repo/branches/master/protection/required_status_checks\", strict=True)\r\n```"}}, {"doc": {"_id": 1547, "title": "Search code get only 900 results", "content": "I tried to search files by `github.search_code(query=\"any_query\")` and get only 900 results, but in web version I get more than 497k results. It is issue or limit by GitHub API?"}}, {"doc": {"_id": 1546, "title": "Clean up tests for GitReleaseAsset", "content": "The test class for GitReleaseAsset did not match the filename, was also\r\nthe only class to include docstrings, and furthermore, repeated a lot of\r\nfetches in the replay data."}}, {"doc": {"_id": 1545, "title": "get_repo will not return topics for a repository", "content": "So we are using topics for our GH Enterprise repositories and would like to access from this api.\r\nWhen retrieving a repository: expecting the topics property, but it is returned as None.\r\n\r\nTopics is a 3+ year old \"preview\" v3 feature, well documented that when getting a repository, need to add this to request header:\r\n   Accept: **application/vnd.github.mercy-preview+json**\r\n\r\n**DIRECT REST CALL WORKS**\r\nWhen I retrieve via direct REST request via IntelliJ REST testing, it works:\r\n\r\n**Request:**\r\n```shell\r\n    GET https://github.gaig.com/api/v3/repos/some_org/some_repo\r\n    Authorization: token ***************************************\r\n    User-Agent: PyGithub/Python\r\n    Accept: **application/vnd.github.mercy-preview+json**\r\n```\r\n\r\n**Response:**\r\n```json\r\n   ...\r\n  \"license\": null,\r\n  **\"topics\": [\r\n    \"documentation\"\r\n  ],**\r\n  \"forks\": 27,\r\n ...\r\n```\r\n\r\n**Python github call does not work**\r\nBut when I get a repository using the **github/MainClass.py**, topics is returned as **None**:\r\n\r\n```python\r\ndef get_repo(self, full_name_or_id, lazy=False):\r\n```\r\n\r\nAfter going deeper and forcing the header to contain the Accept, __requestRaw does not return topics at all in the output.  I'm puzzled as to why even with the forced add it isn't working.  See:\r\n\r\n```python\r\n   def __requestEncode(\r\n        self, cnx, verb, url, parameters, requestHeaders, input, encode\r\n    ):\r\n        assert verb in [\"HEAD\", \"GET\", \"POST\", \"PATCH\", \"PUT\", \"DELETE\"]\r\n        if parameters is None:\r\n            parameters = dict()\r\n        if requestHeaders is None:\r\n            requestHeaders = dict()\r\n\r\n        self.__authenticate(url, requestHeaders, parameters)\r\n        requestHeaders[\"User-Agent\"] = self.__userAgent\r\n        requestHeaders[\"Accept\"] = 'application/vnd.github.mercy-preview+json'\r\n\r\n        url = self.__makeAbsoluteUrl(url)\r\n        url = self.__addParametersToUrl(url, parameters)\r\n\r\n        encoded_input = None\r\n        if input is not None:\r\n            requestHeaders[\"Content-Type\"], encoded_input = encode(input)\r\n\r\n        self.NEW_DEBUG_FRAME(requestHeaders)\r\n\r\n        status, responseHeaders, output = self.__requestRaw(\r\n            cnx, verb, url, requestHeaders, encoded_input\r\n        )\r\n```\r\n\r\n**Musings**\r\nIs this functionality supported in the api?  Is there some configuration step I missed?\r\n\r\nI noticed that the get_topics call adds the preview to the header, seems like the intent was there to support this at least partially.  I starting thinking that maybe our GitHub eprise version is lagging, but this preview is 3 years old AND I already demonstrated that a simple REST call to retrieve repo works.  Also wonder if any of the characters in the header I added needed to be encoded, but tried that, no difference.\r\n\r\nWilling to help modify/test getting Topics working what am I missing?"}}, {"doc": {"_id": 1544, "title": "add change_git_ref method in Repository", "content": "The method is defined in the github REST API but missing here"}}, {"doc": {"_id": 1543, "title": "Repository.update_file() content also accepts bytes", "content": "The typing information for the update_file() method's content parameter\r\nstates it will only accept str, whereas it will accept both str and\r\nbytes.\r\n\r\nFixes #1542"}}, {"doc": {"_id": 1542, "title": "Type information for Repository.update_file content parameter does not include bytes", "content": "Hello,\r\n\r\nI've noticed that the content parameter here is required to be string:\r\nhttps://github.com/PyGithub/PyGithub/blob/master/github/Repository.pyi#L507\r\n\r\nHowever the actual implementation does does with bytes as well. It asserts the type to be string OR bytes, and a few lines below encodes strings to bytes if it isn't bytes already:\r\nhttps://github.com/PyGithub/PyGithub/blob/master/github/Repository.py#L2069\r\n\r\nCould you change the typing information such that the content parameter is `Union[str, bytes]`?"}}, {"doc": {"_id": 1541, "title": "Add ability to download binary content of release asset", "content": "I know #525 introduced release asset capabilities, but unless I've missed the right doc page I don't think it's possible to download the binary content of a release asset - just the information about an asset.  See https://developer.github.com/v3/repos/releases/#get-a-single-release-asset and the note about downloading the asset's binary content."}}, {"doc": {"_id": 1540, "title": "Fix Repository.get_issues stub", "content": "Fixes #1539"}}, {"doc": {"_id": 1539, "title": "Incorrect stub for Repository.get_issues", "content": "As part of #1379, I added support to get_issues to specify labels as a list of strings or Label.\r\nThe stubs for Repository do not reflect this.\r\nhttps://github.com/PyGithub/PyGithub/blob/69bfc3251148ef4ac119f0ab2a11a734ddf63ee0/github/Repository.pyi#L301\r\n\r\n(Discovered when I was running mypy with my code that uses that functionality!)"}}, {"doc": {"_id": 1538, "title": "Async support", "content": "What do you think about PyGithub async support? If I do async support for PyGithub - do you accept it?"}}, {"doc": {"_id": 1537, "title": "Connect with ssh", "content": "Is it possible to connect using a local ssh instead of username/pass?"}}, {"doc": {"_id": 1536, "title": "This is a new issue", "content": ""}}, {"doc": {"_id": 1535, "title": "This is a new issue", "content": ""}}, {"doc": {"_id": 1534, "title": "HWO TO CREATE NEW REPO", "content": "IS IT IS POSSIBLE TO CREATE A NEW REPOSITORY WITH THIS PYTHON MODULE OR NOT"}}, {"doc": {"_id": 1533, "title": "Correct Workflow typing", "content": "When Workflow support was added, the method calls were not added to\r\nthe typing file for Repository, and somehow the class name for the\r\nWorkflow typing file was incorrect."}}, {"doc": {"_id": 1532, "title": "Check all arguments of NamedUser.get_repos()", "content": "The two unit tests for NamedUser.get_repos() did not check all\r\narguments, and this was the only method in the file that wasn't\r\ncompletly covered. Re-record the replay data while passing all arguments\r\nto the method."}}, {"doc": {"_id": 1531, "title": "Attempting to get the reaction of the latest comment", "content": "Hi folks, I am trying to get the reaction for the latest comment made and the user who made the reaction/emoji, in the issue if there is any. I have followed the docs and couldn't follow it clearly. If someone could guide me, it would be really helpful. TIA!"}}, {"doc": {"_id": 1530, "title": "Added visibility flag to Organization create_repo", "content": "Update for issue #1446"}}, {"doc": {"_id": 1529, "title": "Remove RateLimit.rate", "content": "RateLimit.rate was first deprecated in v1.43.2, which was released 20\r\nmonths ago. As that's a fairly generous deprecation period, remove it."}}, {"doc": {"_id": 1528, "title": "PullRequestReview is not a completable object", "content": "While chasing coverage failures, I discovered PullRequestReview's do not\r\nsend back a URL at all, which means firstly, the url property is not\r\nrequired because it will always be None, and secondly, the object can\r\nnever be completed. I'm not certain why this change broke the test, but\r\nit looked brittle, refactor it to be clearer."}}, {"doc": {"_id": 1527, "title": "Remove pointless setters in GitReleaseAsset", "content": "This is the only class that includes property setters for two of the\r\nattributes, which are untested, and even if they were used, would have\r\nno impact since there is no method to submit the changes back to GitHub.\r\nDrop them."}}, {"doc": {"_id": 1526, "title": "Test more attributes", "content": "To increase coverage, sprinkle in some asserts for attributes that were\r\nnot checked -- this uncovered a bug in Issue that two attributes were\r\nnot properly initialized to NotSet."}}, {"doc": {"_id": 1525, "title": "Drop some unimplemented methods in GitRef", "content": "There are two unimplemented methods in GitRef, which are mostly covered\r\nby Commit.get_statuses(), remove them."}}, {"doc": {"_id": 1524, "title": "Remove unneeded duplicate string checks in Branch", "content": "There were multiple calls checking if an element of a list was a string\r\nor a string -- I suspect this pre-dates use of six in the code base, but\r\nlet's clean it up."}}, {"doc": {"_id": 1523, "title": "'latin-1' codec can't encode characters in position 6-7: ordinal not in range(256)", "content": "Version  1.51 has conflicts when fetching individual repositories by name:\r\n\r\n```python\r\n>>> from github import Github\r\n>>> import os\r\n>>> token = os.environ[\"GITHUB_TOKEN\"]\r\n>>> g = Github(token)\r\n>>> repo = g.get_repo(\"PyGithub/PyGithub\")\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/usr/local/lib/python3.6/dist-packages/github/MainClass.py\", line 325, in get_repo\r\n    \"GET\", \"%s%s\" % (url_base, full_name_or_id)\r\n  File \"/usr/local/lib/python3.6/dist-packages/github/Requester.py\", line 319, in requestJsonAndCheck\r\n    verb, url, parameters, headers, input, self.__customConnection(url)\r\n  File \"/usr/local/lib/python3.6/dist-packages/github/Requester.py\", line 410, in requestJson\r\n    return self.__requestEncode(cnx, verb, url, parameters, headers, input, encode)\r\n  File \"/usr/local/lib/python3.6/dist-packages/github/Requester.py\", line 472, in __requestEncode\r\n    cnx, verb, url, requestHeaders, encoded_input\r\n  File \"/usr/local/lib/python3.6/dist-packages/github/Requester.py\", line 498, in __requestRaw\r\n    response = cnx.getresponse()\r\n  File \"/usr/local/lib/python3.6/dist-packages/github/Requester.py\", line 116, in getresponse\r\n    allow_redirects=False,\r\n  File \"/usr/local/lib/python3.6/dist-packages/requests/sessions.py\", line 546, in get\r\n    return self.request('GET', url, **kwargs)\r\n  File \"/usr/local/lib/python3.6/dist-packages/requests/sessions.py\", line 533, in request\r\n    resp = self.send(prep, **send_kwargs)\r\n  File \"/usr/local/lib/python3.6/dist-packages/requests/sessions.py\", line 646, in send\r\n    r = adapter.send(request, **kwargs)\r\n  File \"/usr/local/lib/python3.6/dist-packages/requests/adapters.py\", line 449, in send\r\n    timeout=timeout\r\n  File \"/usr/local/lib/python3.6/dist-packages/urllib3/connectionpool.py\", line 677, in urlopen\r\n    chunked=chunked,\r\n  File \"/usr/local/lib/python3.6/dist-packages/urllib3/connectionpool.py\", line 392, in _make_request\r\n    conn.request(method, url, **httplib_request_kw)\r\n  File \"/usr/lib/python3.6/http/client.py\", line 1264, in request\r\n    self._send_request(method, url, body, headers, encode_chunked)\r\n  File \"/usr/lib/python3.6/http/client.py\", line 1305, in _send_request\r\n    self.putheader(hdr, value)\r\n  File \"/usr/lib/python3.6/http/client.py\", line 1237, in putheader\r\n    values[i] = one_value.encode('latin-1')\r\nUnicodeEncodeError: 'latin-1' codec can't encode characters in position 6-7: ordinal not in range(256)\r\n```\r\n\r\n```bash\r\npip3 show pygithub\r\nName: PyGithub\r\nVersion: 1.51\r\nSummary: Use the full Github API v3\r\nHome-page: http://pygithub.readthedocs.io/en/latest/\r\nAuthor: Vincent Jacques\r\nAuthor-email: vincent@vincent-jacques.net\r\nLicense: UNKNOWN\r\nLocation: /usr/local/lib/python3.6/dist-packages\r\nRequires: requests, pyjwt, deprecated\r\n```"}}, {"doc": {"_id": 1522, "title": "Turn on coverage reporting for codecov", "content": "Since we migrated from Travis to GitHub Actions, our coverage on codecov\r\nhas been reporting as 0%, since uploading the .coverage file is a\r\nterrible idea. Turn on XML-based reporting, ignore the file and use that\r\nwhen we upload to codecov."}}, {"doc": {"_id": 1521, "title": "Drastically increase coverage by checking repr()", "content": "A lot of our missing coverage is caused by not checking repr(), which is\r\ntrivial enough to test against -- do so, and also clean up existing repr\r\ntests to look the same by calling repr(). Where it was trivial, add a\r\nfew assertions about missing attributes."}}, {"doc": {"_id": 1520, "title": "Fixed formatting of two docstrings", "content": "The docstrings for `Repository.create_git_tag_and_release()` and `StatsPunchCard` were missing blank lines between the explanatory text at the top and the `:param:` entries below. That resulted in incorrect formatting by Sphinx.\r\n\r\nSee, for example, [https://pygithub.readthedocs.io/en/latest/github_objects/StatsPunchCard.html](https://pygithub.readthedocs.io/en/latest/github_objects/StatsPunchCard.html)\r\n\r\nThis PR should fix that."}}, {"doc": {"_id": 1519, "title": "Add the ability to get the list of emails for NamedUser", "content": "A GitHub user can have several email addresses tied to their account. There seems to be no current way to retrieve this list. It appears the the NamedUser object only has the ability to retrieve the primary email which the user has chosen, but not the others.\r\n\r\nhttps://pygithub.readthedocs.io/en/stable/github_objects/NamedUser.html#\r\n\r\nThis does seem possible though via the [/users/emails endpoint](https://developer.github.com/v3/users/emails/). Something like the following should be added.\r\n\r\n```python\r\nemails = Github(login_creds).get_user().get_emails\r\nprint(emails) # ['email1@mydomain.com', 'email2@anotherdomain.org', ..., 'last@email.net']\r\n```"}}, {"doc": {"_id": 1518, "title": "Correct Repository.get_workflows()", "content": "The API endpoint Repository.get_workflows() calls returns data in a list\r\nitem, not directly, leading to some head scratching when calling it\r\nagainst GitHub. Re-record the replay data."}}, {"doc": {"_id": 1517, "title": "Small improvements to typing", "content": "Work through some of the errors when running mypy with --strict."}}, {"doc": {"_id": 1516, "title": "Can I upload a folder with one command", "content": "now I upload a folder, need one by one , is there any way?"}}, {"doc": {"_id": 1515, "title": "Check of outdated PR comments", "content": "Hello,\r\n\r\nThe current API for PR comments contains a lot of fields that can be checked. But sometimes I need to check whether the comment is outdated or not. How can it be done using `PyGithub`?\r\n\r\nIf there is any way to do that, then this is a question. If not, this is a feature request :smile:\r\n\r\nThanks in advance!"}}, {"doc": {"_id": 1514, "title": "docs(repository): correct releases link", "content": ""}}, {"doc": {"_id": 1513, "title": "type annotation: correct stargazers_count return type to int", "content": "It appears this was a type annotation typo, as the type of the stargazers_count property has been int for a long time, and the docstring indicates integer.\r\n\r\nThanks very much for putting type annotation in PyGithub \ud83d\udc4d "}}, {"doc": {"_id": 1512, "title": "Fix two RST warnings in Webhook.rst", "content": "The final code block in the example is not Python code, and the\r\nunderlines were incorrect, correct both."}}, {"doc": {"_id": 1511, "title": "Drop spaces in gh-actions tox config", "content": "The tox configuration for python 3.6 only runs lint. Drop the spaces in\r\nthe envlist to see if that helps run all environments."}}, {"doc": {"_id": 1510, "title": "Filter FutureWarning for 2 test cases", "content": "There are two test cases that explicitly test with client_id and\r\nclient_secret, which means pytest helpfully tells us about them after\r\nthe test run concludes. We don't need to see them every run until we\r\ndrop the arguments, so filter them out for now."}}, {"doc": {"_id": 1509, "title": "Fix #1507: Add new Teams: Add or update team repository endpoint", "content": "See https://github.com/PyGithub/PyGithub/issues/1507\r\n\r\nSide Note:\r\nThis PR is untested for now because I don't know how to use a local python library (yet). However, I want to get feedback on this PR if this is the way if this is acceptable."}}, {"doc": {"_id": 1508, "title": "Cannot fetch the list of merged PRs with date range", "content": "Hello :wave: \r\n\r\nI'm unable to fetch the list of merged PRs using the issues endpoint with PyGithub : \r\n```\r\nfrom github import Github\r\n\r\ng = Github()\r\n\r\nprint(g.search_issues(query=\"repo:apache/beam+is:pr+is:merged+merged:2020-04-22..2020-05-06+sort:updated\").totalCount)\r\n```\r\n\r\nReturns :\r\n```\r\nTraceback (most recent call last):\r\n  File \"test.py\", line 5, in <module>\r\n    print(g.search_issues(query=\"repo:apache/beam+is:pr+is:merged+merged:2020-04-22..2020-05-06+sort:updated\").totalCount)\r\n  File \"/home/abbass/.virtualenvs/github-stats/lib/python3.6/site-packages/github/PaginatedList.py\", line 154, in totalCount\r\n    \"GET\", self.__firstUrl, parameters=params, headers=self.__headers\r\n  File \"/home/abbass/.virtualenvs/github-stats/lib/python3.6/site-packages/github/Requester.py\", line 319, in requestJsonAndCheck\r\n    verb, url, parameters, headers, input, self.__customConnection(url)\r\n  File \"/home/abbass/.virtualenvs/github-stats/lib/python3.6/site-packages/github/Requester.py\", line 342, in __check\r\n    raise self.__createException(status, responseHeaders, output)\r\ngithub.GithubException.GithubException: 422 {\"message\": \"Validation Failed\", \"errors\": [{\"message\": \"The listed users and repositories cannot be searched either because the resources do not exist or you do not have permission to view them.\", \"resource\": \"Search\", \"field\": \"q\", \"code\": \"invalid\"}], \"documentation_url\": \"https://developer.github.com/v3/search/\"}\r\n```\r\n\r\nThe same query works in a browser : \r\nhttps://api.github.com/search/issues?q=repo:apache/beam+is:pr+is:merged+merged:2020-04-22..2020-05-06+sort:updated&sort=created&order=asc\r\n"}}, {"doc": {"_id": 1507, "title": "github.Team.Team.set_repo_permission calls a legacy API endpoint", "content": "The method [github.Team.Team.set_repo_permission](https://pygithub.readthedocs.io/en/stable/github_objects/Team.html#github.Team.Team.set_repo_permission) calls an old API-Endpoint:\r\nhttps://github.com/PyGithub/PyGithub/blob/219bde53d31845ae147e14382ceeed07153dcbda/github/Team.py#L237\r\n\r\nIt calls\r\n```python\r\nheaders, data = self._requester.requestJsonAndCheck(\r\n   \"PUT\", self.url + \"/repos/\" + repo._identity, input=put_parameters\r\n)\r\n```\r\n\r\nThis endpoint is linked to [Teams: Add or update team repository (Legacy)](https://developer.github.com/v3/teams/#add-or-update-team-repository-legacy).\r\nThe new API endpoint for this is [Teams: Add or update team repository](https://developer.github.com/v3/teams/#add-or-update-team-repository): `PUT /orgs/:org/teams/:team_slug/repos/:owner/:repo`"}}, {"doc": {"_id": 1506, "title": "Raise a FutureWarning on use of client_{id,secret}", "content": "client_id and client_secret are sent to GitHub encoded on the query\r\nstring, which GitHub has firmly deprecated, so much so as to email\r\npeople who are doing so. To discourage its use, raise a FutureWarning if\r\nthey are specified.\r\n\r\nFixes #1500"}}, {"doc": {"_id": 1505, "title": "Remove Repository.topics", "content": "The topics attribute has been replaced by Repository.get_topics(). To\r\nreduce user confusion, delete the attribute.\r\n\r\nFixes #1504"}}, {"doc": {"_id": 1504, "title": "Repository.topics does not match Repository.get_topics()", "content": "For a repository with topics, `Repository.topics` is returning `None` whereas `Repository.get_topics()` properly returns a list of string (my topics). The latter is correct.\r\n\r\nThis occurred for a private org repo.\r\n\r\n```\r\nPython Version: 3.7.4\r\n      PyGithub: 1.51\r\n```"}}, {"doc": {"_id": 1503, "title": "Improve type signature for create_from_raw_data", "content": "Previously you could call it only on Repository or NamedUser. Now you can call it with any GithubObject subclass -- and the type is carried through to the return value.\r\n\r\nFWIW, this is preventing me from upgrading to 1.51."}}, {"doc": {"_id": 1502, "title": "Add create_repository_dispatch to typing files", "content": "Forgot to do this in my earlier PR.\r\n\r\nI would really love to have the type annotations in the original `.py` files, it would be a lot easier to remember that way \ud83d\ude42  "}}, {"doc": {"_id": 1501, "title": "Create a Pull Request template", "content": "We need a minimum checklist:\r\n\r\n- unit test\r\n- formatting (`tox -e lint`)\r\n- type stubs (.pyi files)"}}, {"doc": {"_id": 1500, "title": "Deprecating API authentication through query parameters", "content": "I'm using `g = Github(\"access_token\")` on PyGithub-1.50 (latest) and got the below message from github. I am I doing something wrong?\r\n\r\n```\r\nOn May 1st, 2020 at 16:31 (UTC) your personal access token using python-requests/2.22.0 was used as part of a query parameter to access an endpoint through the GitHub API:\r\n\r\n[removed]\r\n\r\nPlease use the Authorization HTTP header instead, as using the `access_token` query parameter is deprecated. If this token is being used by an app you don't have control over, be aware that it may stop working as a result of this deprecation.\r\n\r\nDepending on your API usage, we'll be sending you this email reminder on a monthly basis for each token and User-Agent used in API calls made on your behalf.\r\nJust one URL that was accessed with a token and User-Agent combination will be listed in the email reminder, not all.\r\n\r\nVisit https://developer.github.com/changes/2020-02-10-deprecating-auth-through-query-param for more information about suggested workarounds and removal dates.\r\n```"}}, {"doc": {"_id": 1499, "title": "Use of team_reviewers results in: \"Could not resolve to a node with the global id of...\" error ", "content": "When creating a review request for a PR and a team is added as such:\r\n\r\n`pr.create_review_request(team_reviewers=[\"team_name\"])`\r\n\r\nit results in an exception:\r\n```\r\nself.__createException(status, responseHeaders, output)\r\ngithub.GithubException.GithubException: 422 {\"message\": \"Validation Failed\", \"errors\": [\"Could not resolve to a node with the global id of 'MDQ6VGVhbTQxMDAz'.\"], \"documentation_url\": \"https://developer.github.com/v3/pulls/review_requests/#create-a-review-request\"}\r\n```\r\nI can add individual reviewers without issue, the exception only occurs when using a valid team name."}}, {"doc": {"_id": 1498, "title": "Added function to create Repo from a template repository", "content": ""}}, {"doc": {"_id": 1497, "title": "Move, edit and delete project columns", "content": "This PR adds missing methods for the project columns"}}, {"doc": {"_id": 1496, "title": "Add support for Workflows", "content": "To start supporting GitHub Actions, add the first part of that,\r\nWorkflow, which encapsulates a workflow over the API, along with\r\ntwo methods on Repository to query them."}}, {"doc": {"_id": 1495, "title": "`github.ProjectCard.ProjectCard.move` doesn't seem to be working", "content": "The [`move`](https://github.com/PyGithub/PyGithub/blob/v1.50/github/ProjectCard.py#L140) function appears to function (the response is a 201), but the `ProjectCard` doesn't actually change columns on the Project board.\r\n\r\nI created a simple project and repo, as well as an issue under the repo. I can move the issue around in the Github UI, but PyGithub seems unwilling to do so."}}, {"doc": {"_id": 1494, "title": "Fix typo in PullRequest.rst", "content": "Simple typo in string constant"}}, {"doc": {"_id": 1493, "title": "Add get all users from organization", "content": "Hi all, \r\n\r\nI'm working on a tool using this library and it's awesome, but I'm missing a functionality too much.\r\nIt would be great if the endpoint GET /orgs/:org/members is implemented.\r\n\r\nI'm not an expert with your code, just been using since yesterday, but looking at the API documentation I think It might be easy: https://developer.github.com/v3/orgs/members/#members-list \r\n\r\nWhat do you think ? Is there any approach I could take meanwhile ? \r\n\r\nBest regards !"}}, {"doc": {"_id": 1492, "title": "Type heirarchy missing from docs", "content": "The base classes of each type are not listed in the docs. As such sometimes there are functions belonging to an object that it's hard to determine the function of.\r\n\r\n`PullRequest.update()` is an example"}}, {"doc": {"_id": 1491, "title": "Feature: allow to add teams to repository collaborators", "content": "there seems to be no way to add a team to a to a repository right now.\r\n\r\ni guess the add_to_collaborators method would need to be extended for this"}}, {"doc": {"_id": 1490, "title": "Type stubs are not packaged", "content": "I just installed 1.50 hoping to have mypy pick up the new type information, but it still doesn't find anything. I looked at the `github` installation in my virtualenv, and no `.pyi` files were in there with the `.py` ones.\r\nIt looks like we need to create a `github/py.typed` file and include it in your package data? [source](https://www.python.org/dev/peps/pep-0561/#packaging-type-information)"}}, {"doc": {"_id": 1489, "title": "Improve type stubs", "content": "Some changes to help PyGithub work properly with mypy:\r\n\r\n* Install the `.pyi` files and a `py.typed` marker file to allow type checkers to find the type stubs when checking other code that uses PyGithub, per [the mypy documentation/PEP 561](https://mypy.readthedocs.io/en/latest/installed_packages.html#making-pep-561-compatible-packages).\r\n* Fill out some missing type stubs and superclasses.\r\n* Make `PaginatedList` generic on the element type.\r\n\r\nI was able to successfully type-check [a script using PyGithub](https://github.com/NixOS/nixpkgs/pull/86074) with these changes."}}, {"doc": {"_id": 1488, "title": "Drop Travis in favor of Github workflow", "content": "- [x] Drop Travis\r\n- [x] Update `DEPLOY.md`"}}, {"doc": {"_id": 1487, "title": "Use Github action to upload to PyPI on new release", "content": "- Added `secrets.PYPI_PASSWORD` to project settings\r\n- Use twine to build artifact and upload to PyPI on new release\r\n\r\nTODO\r\n\r\n- [x] Test twine with new release (1.50) "}}, {"doc": {"_id": 1486, "title": "Github workflow improvement", "content": "- [x] Use tox with `tox-gh-actions` \r\n- [x] Add description to build steps\r\n"}}, {"doc": {"_id": 1485, "title": "Actually use the Python version in GA workflow", "content": "It appears that the Python versions in our strategy matrix are not used\r\nunless we drag them down into the steps. Do so now."}}, {"doc": {"_id": 1484, "title": "Fix all type issues flagged by mypy", "content": "- [x] Fix `__all__` should be str\r\n- [x] Add mypy configuration to `tox.ini`"}}, {"doc": {"_id": 1483, "title": "Remove assert statements in favor of static type checking", "content": "The `assert` statements are duplicates, especially for types, since we have static type checking now. \r\n\r\nRemoving them to gain some speed \ud83d\ude04 "}}, {"doc": {"_id": 1482, "title": "Switch to CalVer for release?", "content": "https://calver.org/\r\n\r\nFor some historical reasons, the current SemVer has conflicting version number with a stale (v2) branch. \r\n\r\nThe Github API is calendar sensative (aware), should we switch to Calver for new releases? \r\n\r\ne.g. `YY.MM.MICRO` or `YY.MINOR.MICRO`"}}, {"doc": {"_id": 1481, "title": "Ability to retrieve public events", "content": "Resolves #913."}}, {"doc": {"_id": 1480, "title": "g.get_hook is looking for name. It should be ID", "content": "According to the Github documentation the `get_hook` method should be using ID not name.\r\n\r\nhttps://developer.github.com/v3/repos/hooks/#get-single-hook\r\n\r\nThis is the affected code. \r\n\r\nhttps://github.com/PyGithub/PyGithub/blob/master/github/MainClass.py#L648-L660"}}, {"doc": {"_id": 1479, "title": "PaginatedList totalCount is wrong when iterating the issues", "content": "This code works fine:\r\n\r\n```\r\ng = Github(username, password)\r\nrepo = g.get_repo(repo)\r\nissues = repo.get_issues(state='closed', sort='updated', direction='asc')\r\nprint(issues.totalCount)\r\nfor idx, issue in enumerate(issues):\r\n    print(issues.totalCount)\r\n    break\r\n```\r\n\r\nThe output will be: \r\n```\r\n195\r\n195\r\n```\r\n\r\n195 is indeed the number of closed issues.\r\n\r\nIf I comment one of the lines:\r\n\r\n```\r\ng = Github(username, password)\r\nrepo = g.get_repo(repo)\r\nissues = repo.get_issues(state='closed', sort='updated', direction='asc')\r\n# print(issues.totalCount)\r\nfor idx, issue in enumerate(issues):\r\n    print(issues.totalCount)\r\n    break\r\n```\r\n\r\nThe output becomes:\r\n```\r\n42\r\n```\r\n\r\n42 is the number of **opened** issues I have on that repo. This is obviously wrong.\r\n\r\n\r\nThe for-loop iterates on 195 in both cases, so no problem there."}}, {"doc": {"_id": 1478, "title": "repo.create_file() is slow", "content": "I'm experimenting with PyGithub to perform a mass import of files into a repo for archival purposes.  I've had a lot of success so far, but one thing I've noticed is that the performance of `repo.create_file()` is quite slow.  It takes multiple seconds to create and commit a new file to the repo, whereas doing a single commit using the git CLI only takes a few seconds for the entire set of files.\r\n\r\nIs there a way to batch a number of files together into a single commit?"}}, {"doc": {"_id": 1477, "title": "unable to read or set the owners for an organization", "content": "I am trying to make a script that is both capable of determining the current owners of an org and setting them. I started by trying to just read who the current owners are but am having issues with that.\r\n\r\nI've tried to do\r\n\r\n```\r\ngit = Github(access_token)\r\nself.org = self.git.get_organization('ORG')\r\nfor user in self.org.get_members(role=\"admin\"):\r\n   print(f\"user = {user}, user.permissions = {user.permissions}, user.role = {user.role}, user.site_admin = {user.site_admin}, user.type = {user.type}\")\r\n```\r\n\r\nBut when it comes across a member that is an admin, it prints out \r\n```\r\n2020-04-20 21:14:43 = INFO - user = NamedUser(login=\"userX\"), user.permissions = None, user.role = None, user.site_admin = False, user.type = User\r\n```\r\n\r\nWhat am I doing wrong?"}}, {"doc": {"_id": 1476, "title": "PaginatedList should support __len__()", "content": "PaginatedList has a totalCount attribute that is useful, but it should support __len__() as a more Pythonic way. Currently this breaks the test suite in interesting ways."}}, {"doc": {"_id": 1475, "title": "Calling `Repository.get_teams()` returns incorrect team permissions", "content": "When calling `get_teams()` on an object of type `github.Repository.Repository`, it returns only those teams that have access to the repo (correct), but the permissions shown for those teams do not reflect the permission granted to those teams for that particular repository (incorrect).\r\n\r\nSteps to replicate:\r\n\r\n1. Create a team with a default permission of \"pull\"\r\n2. Add that team to a repository's access with a permission of \"admin\"\r\n3. Call that repository object's `get_teams()` method and inspect the results.\r\n\r\nThe returned teams are regular `github.Team.Team` objects, and the `permission` attribute for that object indicates that team's default permission setting. However, when retrieving the teams that have access to a repository, the permission those teams have for that specific repository is implied to match the context (hence, why only teams with access are returned)."}}, {"doc": {"_id": 1474, "title": "Provide a less wasteful way to retrieve some resources", "content": "Let's say you wanted to retrieve the reactions for this issue. You'd code something like this:\r\n\r\n```python\r\ngithub = Github()\r\n\r\nfor reaction in github.get_repo(\"PyGithub/PyGithub\").get_issue(1474).get_reactions():\r\n    print(reaction)\r\n```\r\n\r\nThe problem is that this makes at least 3 requests:\r\n\r\n* http://developer.github.com/v3/repos \u2014 `GitHub.get_repo()`\r\n* http://developer.github.com/v3/issues \u2014 `Repository.get_issue()`\r\n* https://developer.github.com/v3/reactions/#list-reactions-for-an-issue \u2014 `Issue.get_reactions()`\r\n\r\nWhere only the last one will be sufficient to get the job done:\r\n\r\n```\r\nGET /repos/:owner/:repo/issues/:issue_number/reactions\r\n```\r\n\r\nIt would be nice if one could do this instead:\r\n\r\n```python\r\ngithub = Github()\r\n\r\nfor reaction in github.get_reactions(\"PyGithub/PyGithub\", 1474):\r\n    print(reaction)\r\n```\r\n\r\nSee Octokit example: https://octokit.github.io/octokit.rb/Octokit/Client/Reactions.html#issue_reactions-instance_method"}}, {"doc": {"_id": 1473, "title": "AuthenticatedUser.get_organization_membership() should be str", "content": "Currently, AuthenticatedUser.get_organization_membership() expected the\r\nID of the organization, whereas the API expects the organization name.\r\nCorrect the assertion, and the test case. Since we no longer are\r\nrequired to look up the ID, we can drop the setUp of the test case too.\r\n\r\nFixes #1472"}}, {"doc": {"_id": 1472, "title": "get_organization_membership is passed org, which should str but asserts if not int", "content": "The function get_organization_membership in file AuthenticatedUser.py expects (self, org) then asserts if org is not an int\r\n\r\nline 1310 - assert isinstance(org, int)\r\n\r\nhowever API expects a string - organisation login value\r\n\r\n\"GET\", \"/user/memberships/orgs/\" + str(org)\r\n\r\nchanging assert to the following works as expected\r\n\r\nline 1310 - assert isinstance(org, str)\r\n\r\n(sorry, i'm not following all the rules this is my first ever GitHub issue) "}}, {"doc": {"_id": 1471, "title": "List matching references", "content": "Closes #1279 "}}, {"doc": {"_id": 1470, "title": "Drop documentation for len() of PaginatedList", "content": "PaginatedList does not support len(), so stop mentioning it in the\r\ndocstring.\r\n\r\nFixes #1462"}}, {"doc": {"_id": 1469, "title": "Drop use of shadow-cat for draft PRs", "content": "The draft attribute for PRs has graduated, so we can drop the constant\r\nand its use.\r\n\r\nFixes #1460"}}, {"doc": {"_id": 1468, "title": "Add some attributes.", "content": "- Organization\r\n  - default_repository_permission\r\n  - has_organization_projects\r\n  - has_repository_projects\r\n  - hooks_url\r\n  - issues_url\r\n  - members_can_create_repositories\r\n- Repository\r\n  - deployments_url\r\n  - has_pages\r\n  - releases_url"}}, {"doc": {"_id": 1467, "title": "Correct typos found with codespell", "content": "Correct misspellings and typos located using the codespell tool.\r\n\r\nFixes #1459"}}, {"doc": {"_id": 1466, "title": "Get a project column by id", "content": "This PR resolves the https://github.com/PyGithub/PyGithub/issues/1057\r\nI also added some tests for the ProjectColumn class"}}, {"doc": {"_id": 1465, "title": "Add and handle the maintainer_can_modify attribute in PullRequest", "content": "This PR adds the missing maintainer_can_modify attribute in the PullRequest class. Also, it handles it in the edit methods. Now, the edit methods seems to contain all the possible parameters according to the documentation : https://developer.github.com/v3/pulls/#update-a-pull-request\r\n\r\nThis is my first PR in this repo (and also in Python) so if there's anything wrong or missing, don't hesitate to tell me."}}, {"doc": {"_id": 1464, "title": "Add GitHub Action workflow for checks", "content": "To integrate better with the GitHub workflow, add a workflow for\r\nchecking pushes and PRs. This doesn't remove the Travis configuration,\r\nwhich is still required for releases.\r\n\r\nCo-Authored-By: Christian Clauss <cclauss@me.com>"}}, {"doc": {"_id": 1463, "title": "SSL: SSLV3_ALERT_HANDSHAKE_FAILURE", "content": "When running the sample code for Github Enterprise with custom hostname, I get this error:\r\n\r\n```\r\n---------------------------------------------------------------------------\r\nSSLError                                  Traceback (most recent call last)\r\n/usr/local/lib/python3.7/site-packages/urllib3/connectionpool.py in urlopen(self, method, url, body, headers, retries, redirect, assert_same_host, timeout, pool_timeout, release_conn, chunked, body_pos, **response_kw)\r\n    671                 headers=headers,\r\n--> 672                 chunked=chunked,\r\n    673             )\r\n\r\n/usr/local/lib/python3.7/site-packages/urllib3/connectionpool.py in _make_request(self, conn, method, url, timeout, chunked, **httplib_request_kw)\r\n    375         try:\r\n--> 376             self._validate_conn(conn)\r\n    377         except (SocketTimeout, BaseSSLError) as e:\r\n\r\n/usr/local/lib/python3.7/site-packages/urllib3/connectionpool.py in _validate_conn(self, conn)\r\n    993         if not getattr(conn, \"sock\", None):  # AppEngine might not have  `.sock`\r\n--> 994             conn.connect()\r\n    995 \r\n\r\n/usr/local/lib/python3.7/site-packages/urllib3/connection.py in connect(self)\r\n    393             server_hostname=server_hostname,\r\n--> 394             ssl_context=context,\r\n    395         )\r\n\r\n/usr/local/lib/python3.7/site-packages/urllib3/util/ssl_.py in ssl_wrap_socket(sock, keyfile, certfile, cert_reqs, ca_certs, server_hostname, ssl_version, ciphers, ssl_context, ca_cert_dir, key_password)\r\n    369         if HAS_SNI and server_hostname is not None:\r\n--> 370             return context.wrap_socket(sock, server_hostname=server_hostname)\r\n    371 \r\n\r\n/usr/local/Cellar/python/3.7.6_1/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ssl.py in wrap_socket(self, sock, server_side, do_handshake_on_connect, suppress_ragged_eofs, server_hostname, session)\r\n    422             context=self,\r\n--> 423             session=session\r\n    424         )\r\n\r\n/usr/local/Cellar/python/3.7.6_1/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ssl.py in _create(cls, sock, server_side, do_handshake_on_connect, suppress_ragged_eofs, server_hostname, context, session)\r\n    869                         raise ValueError(\"do_handshake_on_connect should not be specified for non-blocking sockets\")\r\n--> 870                     self.do_handshake()\r\n    871             except (OSError, ValueError):\r\n\r\n/usr/local/Cellar/python/3.7.6_1/Frameworks/Python.framework/Versions/3.7/lib/python3.7/ssl.py in do_handshake(self, block)\r\n   1138                 self.settimeout(None)\r\n-> 1139             self._sslobj.do_handshake()\r\n   1140         finally:\r\n\r\nSSLError: [SSL: SSLV3_ALERT_HANDSHAKE_FAILURE] sslv3 alert handshake failure (_ssl.c:1076)\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nMaxRetryError                             Traceback (most recent call last)\r\n/usr/local/lib/python3.7/site-packages/requests/adapters.py in send(self, request, stream, timeout, verify, cert, proxies)\r\n    448                     retries=self.max_retries,\r\n--> 449                     timeout=timeout\r\n    450                 )\r\n\r\n/usr/local/lib/python3.7/site-packages/urllib3/connectionpool.py in urlopen(self, method, url, body, headers, retries, redirect, assert_same_host, timeout, pool_timeout, release_conn, chunked, body_pos, **response_kw)\r\n    719             retries = retries.increment(\r\n--> 720                 method, url, error=e, _pool=self, _stacktrace=sys.exc_info()[2]\r\n    721             )\r\n\r\n/usr/local/lib/python3.7/site-packages/urllib3/util/retry.py in increment(self, method, url, response, error, _pool, _stacktrace)\r\n    435         if new_retry.is_exhausted():\r\n--> 436             raise MaxRetryError(_pool, url, error or ResponseError(cause))\r\n    437 \r\n\r\nMaxRetryError: HTTPSConnectionPool(host='git.corp.XXX.com', port=443): Max retries exceeded with url: /api/v3/user/repos (Caused by SSLError(SSLError(1, '[SSL: SSLV3_ALERT_HANDSHAKE_FAILURE] sslv3 alert handshake failure (_ssl.c:1076)')))\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nSSLError                                  Traceback (most recent call last)\r\n in \r\n     12 \r\n     13 # Then play with your Github objects:\r\n---> 14 for repo in g.get_user().get_repos():\r\n     15     print(repo.name)\r\n\r\n/usr/local/lib/python3.7/site-packages/github/PaginatedList.py in __iter__(self)\r\n     57             yield element\r\n     58         while self._couldGrow():\r\n---> 59             newElements = self._grow()\r\n     60             for element in newElements:\r\n     61                 yield element\r\n\r\n/usr/local/lib/python3.7/site-packages/github/PaginatedList.py in _grow(self)\r\n     69 \r\n     70     def _grow(self):\r\n---> 71         newElements = self._fetchNextPage()\r\n     72         self.__elements += newElements\r\n     73         return newElements\r\n\r\n/usr/local/lib/python3.7/site-packages/github/PaginatedList.py in _fetchNextPage(self)\r\n    200     def _fetchNextPage(self):\r\n    201         headers, data = self.__requester.requestJsonAndCheck(\r\n--> 202             \"GET\", self.__nextUrl, parameters=self.__nextParams, headers=self.__headers\r\n    203         )\r\n    204         data = data if data else []\r\n\r\n/usr/local/lib/python3.7/site-packages/github/Requester.py in requestJsonAndCheck(self, verb, url, parameters, headers, input)\r\n    317         return self.__check(\r\n    318             *self.requestJson(\r\n--> 319                 verb, url, parameters, headers, input, self.__customConnection(url)\r\n    320             )\r\n    321         )\r\n\r\n/usr/local/lib/python3.7/site-packages/github/Requester.py in requestJson(self, verb, url, parameters, headers, input, cnx)\r\n    408             return \"application/json\", json.dumps(input)\r\n    409 \r\n--> 410         return self.__requestEncode(cnx, verb, url, parameters, headers, input, encode)\r\n    411 \r\n    412     def requestMultipart(\r\n\r\n/usr/local/lib/python3.7/site-packages/github/Requester.py in __requestEncode(self, cnx, verb, url, parameters, requestHeaders, input, encode)\r\n    470 \r\n    471         status, responseHeaders, output = self.__requestRaw(\r\n--> 472             cnx, verb, url, requestHeaders, encoded_input\r\n    473         )\r\n    474 \r\n\r\n/usr/local/lib/python3.7/site-packages/github/Requester.py in __requestRaw(self, cnx, verb, url, requestHeaders, input)\r\n    496             cnx = self.__createConnection()\r\n    497         cnx.request(verb, url, input, requestHeaders)\r\n--> 498         response = cnx.getresponse()\r\n    499 \r\n    500         status = response.status\r\n\r\n/usr/local/lib/python3.7/site-packages/github/Requester.py in getresponse(self)\r\n    114             timeout=self.timeout,\r\n    115             verify=self.verify,\r\n--> 116             allow_redirects=False,\r\n    117         )\r\n    118         return RequestsResponse(r)\r\n\r\n/usr/local/lib/python3.7/site-packages/requests/sessions.py in get(self, url, **kwargs)\r\n    544 \r\n    545         kwargs.setdefault('allow_redirects', True)\r\n--> 546         return self.request('GET', url, **kwargs)\r\n    547 \r\n    548     def options(self, url, **kwargs):\r\n\r\n/usr/local/lib/python3.7/site-packages/requests/sessions.py in request(self, method, url, params, data, headers, cookies, files, auth, timeout, allow_redirects, proxies, hooks, stream, verify, cert, json)\r\n    531         }\r\n    532         send_kwargs.update(settings)\r\n--> 533         resp = self.send(prep, **send_kwargs)\r\n    534 \r\n    535         return resp\r\n\r\n/usr/local/lib/python3.7/site-packages/requests/sessions.py in send(self, request, **kwargs)\r\n    644 \r\n    645         # Send the request\r\n--> 646         r = adapter.send(request, **kwargs)\r\n    647 \r\n    648         # Total elapsed time of the request (approximately)\r\n\r\n/usr/local/lib/python3.7/site-packages/requests/adapters.py in send(self, request, stream, timeout, verify, cert, proxies)\r\n    512             if isinstance(e.reason, _SSLError):\r\n    513                 # This branch is for urllib3 v1.22 and later.\r\n--> 514                 raise SSLError(e, request=request)\r\n    515 \r\n    516             raise ConnectionError(e, request=request)\r\n\r\nSSLError: HTTPSConnectionPool(host='git.corp.XXX.com', port=443): Max retries exceeded with url: /api/v3/user/repos (Caused by SSLError(SSLError(1, '[SSL: SSLV3_ALERT_HANDSHAKE_FAILURE] sslv3 alert handshake failure (_ssl.c:1076)')))\r\n[-]\r\n\r\n```\r\n"}}, {"doc": {"_id": 1462, "title": "The documentation implies that PaginatedList has __len__, but it doesn't.", "content": "https://github.com/PyGithub/PyGithub/blob/393bd21bd168769d8ecf4b23f4b32e9a4de5f17a/github/PaginatedList.py#L107\r\n\r\nIn REPL:\r\n\r\n```python\r\n>>> print(len(g.search_code(query=\"filename:vimrc\")))\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nTypeError: object of type 'PaginatedList' has no len()\r\n```\r\n\r\n8ae2bcb implemented `__len__` and mentioned it in the `__doc__`. 8a589c9 removed `__len__` implementation but left `__doc__` as is. Related #579."}}, {"doc": {"_id": 1461, "title": "Add support for modifying PR draft status", "content": "`PullRequest.edit` does not allow a `draft` attribute:\r\n\r\n```python\r\ndef edit(\r\n        self,\r\n        title=github.GithubObject.NotSet,\r\n        body=github.GithubObject.NotSet,\r\n        state=github.GithubObject.NotSet,\r\n        base=github.GithubObject.NotSet,\r\n    ):\r\n```"}}, {"doc": {"_id": 1460, "title": "Remove Shadow-cat and Gambit previews header", "content": "https://developer.github.com/changes/2020-04-07-graduated-previews/"}}, {"doc": {"_id": 1459, "title": "Typos discovered by codespell", "content": "`%` [codespell](https://github.com/codespell-project/codespell) `--ignore-words-list=\"bloaded,nto,pullrequest,pullrequests,thi,tim,wan\" --quiet-level=2 --skip=\"./tests/*\"`\r\n```\r\n./doc/introduction.rst:71: automaticaly  ==> automatically\r\n./doc/changes.rst:558: compatability  ==> compatibility\r\n./doc/changes.rst:652: corrensponding  ==> corresponding\r\n./doc/changes.rst:762: automaticaly  ==> automatically\r\n./github/GitRelease.py:218: ommited  ==> omitted\r\n./github/GitRelease.py:219: alltogether  ==> altogether, all together\r\n./github/__init__.py:33: instanciate  ==> instantiate\r\n./github/ProjectCard.py:115: Unforunately  ==> Unfortunately\r\n./github/MainClass.py:709: optionaly  ==> optionally\r\n./github/MainClass.py:721: informations  ==> information\r\n./github/StatsContributor.py:40: contibutor  ==> contributor\r\n```"}}, {"doc": {"_id": 1458, "title": "How to check whether a specific file exists avoiding any exceptions?", "content": "I'm working on some kind of a crawler that needs to fetch the file `a` or, if doesn't exist, the file `b` and so on. This is performed on large number of repos. My current code utilizes `repo.get_contents(\"a\")` but the exceptions that occur when `a` doesn't exist are very costly.\r\n\r\nI believe this a common problem, but I haven't found anything on it neither in this repo nor in the docs.\r\n\r\nAny help is appreciated.\r\n"}}, {"doc": {"_id": 1457, "title": "GitHub Action to run pre-commit", "content": "https://github.com/cclauss/PyGithub/actions to replace Travis CI which appears to be disabled.\r\n\r\nAn alternative to #1456"}}, {"doc": {"_id": 1456, "title": "GitHub Action to lint Python", "content": "https://github.com/cclauss/PyGithub/actions to replace Travis CI which appears to be disabled.\r\n\r\nCodespell issues at #1459\r\n\r\nPytest issues...\r\n=========================== short test summary info ==========================\r\nFAILED tests/GithubIntegration.py::GithubIntegration::testCreateJWT - NotImpl...\r\nFAILED tests/GithubIntegration.py::GithubIntegration::testGetAccessToken - No...\r\nFAILED tests/GithubIntegration.py::GithubIntegration::test_get_installation\r\nFAILED tests/GithubIntegration.py::GithubIntegration::test_get_installation_custom_base_url\r\n======================== 4 failed, 620 passed in 24.69s ========================"}}, {"doc": {"_id": 1455, "title": "Requesting non-existent branch raises `GithubException` instead of `UnknownObjectException`", "content": "Looks like you're checking the error message string for \"Not Found\", but the API is returning \"Branch not found\":\r\n\r\nhttps://github.com/PyGithub/PyGithub/blob/393bd21bd168769d8ecf4b23f4b32e9a4de5f17a/github/Requester.py#L387\r\n\r\nAre there other reasons that the API would return a 404? Seems like just using the status code would be sufficient here. If not, then perhaps something like `\"not found\" in output.get(\"message\").lower()`. Happy to submit a PR."}}, {"doc": {"_id": 1454, "title": "Drop unneeded ignore rule for flake8", "content": "We no longer have code or comments that triggers E203 (no space before\r\n:), so we can drop it."}}, {"doc": {"_id": 1453, "title": "Add get_dependency_graph feature for repository", "content": "By doing so a user could access both projects that the repository is dependant on and projects that are dependant on repository.\r\n\r\nThoughts?"}}, {"doc": {"_id": 1452, "title": "Listing all private repos through PyGithub", "content": "Hey, I'm trying to list all the private repos from another user. I'm kind of new to this, but would like some help. I have python installed along with sublime. I'm stuck with how to run the script and what the script should contain. Here's what I have so far in my sublime text. \r\n\r\n> \r\n> def get_repos(type=private, sort=full_name):\r\n>         \"\"\"\r\n>         :calls: `GET /orgs/:org/repos <https://developer.github.com/v3/repos/#list-organization-repositories>`_\r\n>         :param login: string\r\n>         :rtype: :class:`github.Organization.Organization`\r\n>         \"\"\"\r\n>         assert isinstance(login, str), login\r\n>         headers, data = self.__requester.requestJsonAndCheck(\r\n>             \"GET\",\r\n>             \"/orgs/\" + name_of_org + \"/repos\"\r\n>         )\r\n>         return data\r\n> \r\n\r\nI'm lost after this. Do I need a header? How do I run it in SSH? Any help please? Sorry, fairly new to API and python >_>. "}}, {"doc": {"_id": 1451, "title": "fix param name of projectcard's move function", "content": "- parameter's name is `column_id` not `column`\r\nhttps://developer.github.com/v3/projects/cards/\r\n![image](https://user-images.githubusercontent.com/43295963/78271293-f06c2080-7546-11ea-9409-2475feea0b98.png)\r\n"}}, {"doc": {"_id": 1450, "title": "Export IncompletableObject in the github namespace", "content": "When IncompletableObject was added, it was only added to\r\nGithubException, and not imported directly into the github namespace\r\nlike other exceptions. Correct that, and clean up the resultant now\r\nunrequired import."}}, {"doc": {"_id": 1449, "title": "Add create_repository_dispatch", "content": "Closes #1299 \r\n\r\nThe code is working fine but I'm not quite sure what kind of tests I should be adding or where. Some guidance there would be very much appreciated!"}}, {"doc": {"_id": 1448, "title": "SCIM API for SAML linked accounts", "content": "We would like to be able to make use of the SCIM API (https://developer.github.com/v3/scim/) within the pyGithub package. This would enable us to search users in our organisation by their SCIM attributes, such as the idp provided email address, nameID. These attributes cannot be changed by the organisation members, unlike their personal github account details, so would provide an immutable set of search criteria for us. "}}, {"doc": {"_id": 1447, "title": "Unable to get update the changes form a perticular branch", "content": "Do we have any way to get into a branch and make changes using pygithub\r\nI'm running this code I want to make changes in baseline branch of uditgaurav/litmuschaos repo suppose:\r\n```\r\ngithub_token = Github(token)\r\nrepo = github_token.get_repo(\"uditgaurav/litmuschaos\").get_branch(\"baseline\")\r\ncontents = repo.get_contents(\"README.md\", ref=\"baseline\")\r\nfile = repo.get_contents(contents.path)\r\nfile_path = contents.path\r\nfile_content=str(file.decoded_content)\r\ncontent_list = file_content.split('\\n')\r\n```\r\nBut this is throwing an error:\r\n```\r\nTraceback (most recent call last):\r\n  File \"result_update.py\", line 38, in <module>\r\n    contents = repo.get_contents(\"README.md\", ref=\"baseline\")\r\nAttributeError: 'Branch' object has no attribute 'get_contents'\r\n```\r\nCan anyone help me in this?\r\nHow to get the content of a branch?"}}, {"doc": {"_id": 1446, "title": "Support new 'visibility' field of Repository", "content": "Unable to create internal type of repo"}}, {"doc": {"_id": 1445, "title": "unable to set global username and email on git", "content": "unable to set global username and email\r\n```\r\ng = Github(repoToken)\r\n    repo = g.get_repo(repoName)\r\n    repo.config_writer().set_value(\"user\", \"name\", userName).release()\r\n    repo.config_writer().set_value(\"user\", \"email\", emailStr).release()\r\n```\r\n\r\nerror\r\n```\r\nAttributeError: 'Repository' object has no attribute 'config_writer'\r\n\r\n```"}}, {"doc": {"_id": 1444, "title": "Slightly clean up tox.ini", "content": "Move the 3 from env list, since we can save a whole 4 characters! Also\r\ndrop a flake8 ignore that we no longer need."}}, {"doc": {"_id": 1443, "title": "Add missing mypy stubs", "content": "Deployment, TimelineEvent{,Source} were missing mypy stubs, since they\r\nwere added after the mypy branch was started. Add them, and clean up two\r\nspurious __future__ imports that are no longer required. Add mypy's\r\ncache directory to .gitignore"}}, {"doc": {"_id": 1442, "title": "Reuse pre-commit checks in CI", "content": "Continuation of #1231 \r\n\r\n- [x] Merge black/isort/flake8/mypy into one testenv `lint`\r\n- [x] Re-use pre-commit checks in tox (if any fails locally it should as well fail in CI) (ideas from [here](https://github.com/sloria/environs/blob/master/tox.ini) and [here](https://github.com/asottile/pyupgrade/blob/master/tox.ini))\r\n\r\nTested locally\r\n```\r\n$ tox\r\n  lint: commands succeeded\r\n  py35: commands succeeded\r\n  py36: commands succeeded\r\n  py37: commands succeeded\r\n  py38: commands succeeded\r\n  docs: commands succeeded\r\n  congratulations :)\r\n```"}}, {"doc": {"_id": 1441, "title": "Fix all issues flagged by mypy", "content": "\r\n```bash\r\n$ mypy .\r\nSuccess: no issues found in 195 source files\r\n```"}}, {"doc": {"_id": 1440, "title": "Split up Repository.testStatistics", "content": "The testStatistics testcase takes over ten seconds to run on my laptop,\r\nand it does an awful lot of work. Split up the disparate parts into\r\nseperate testcases."}}, {"doc": {"_id": 1439, "title": "Auth problem \ud83e\udd14", "content": "Hi guys. \r\n\r\nI wanted to use your amazing library to fetch some GitHub stats. and everything works great if I run my local python scripts. If I deploy the exact same script and try to invoke it on a Google Cloud Function I get the following error.  Has someone experienced similar problems?\r\n\r\n> ConnectionError: HTTPSConnectionPool(host='api.github.com', port=443): Max retries exceeded with url: /repos/XXX/XXX-app (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x7edc316c9a50>: Failed to establish a new connection: [Errno -3] Temporary failure in name resolution'))"}}, {"doc": {"_id": 1438, "title": "Use pytest to parametrize tests", "content": "Use built-in pytest test case parametrization support over external\r\n'parameterize' package.  The latter is not well maintained, and has\r\nknown Python 3.8 failures unsolved since November 2019.\r\n\r\nSince pytest fixtures are incompatible with unittest-style tests,\r\nrewrite the relevant test case to use pytest-style asserts.  This also\r\nmakes the resulting code simpler, as we no longer have to pass TestCase\r\nto the helper classes."}}, {"doc": {"_id": 1437, "title": "Add support to create an organization project", "content": "Implements method to create an organization project.\r\nThis is the last remaining part of the the issue/comment: https://github.com/PyGithub/PyGithub/issues/606#issuecomment-595864374 \ud83c\udf89\r\n\r\n<details>\r\n<summary>\r\nManual testing\r\n</summary>\r\n\r\nCreating an organization project\r\n\r\n![Screenshot 2020-03-15 at 10 07 46 PM](https://user-images.githubusercontent.com/7795956/76705878-77c53180-6709-11ea-9f61-3dced6e6a117.png)\r\n\r\n</details>"}}, {"doc": {"_id": 1436, "title": "Can't publish new versions using manage.sh", "content": "Due to branch protection being enabled for master, this happens when a new release is attempted to be made:\r\n\r\n```\r\n[master afb1259a] Publish version 1.47\r\n 2 files changed, 30 insertions(+), 1 deletion(-)\r\nCounting objects: 6, done.\r\nDelta compression using up to 4 threads.\r\nCompressing objects: 100% (6/6), done.\r\nWriting objects: 100% (6/6), 1.35 KiB | 460.00 KiB/s, done.\r\nTotal 6 (delta 4), reused 0 (delta 0)\r\nremote: Resolving deltas: 100% (4/4), completed with 4 local objects.\r\nremote: error: GH006: Protected branch update failed for refs/heads/master.\r\nremote: error: Required status check \"continuous-integration/travis-ci\" is expected. At least 1 approving review is required by reviewers with write access.\r\nTo github.com:PyGithub/PyGithub.git\r\n * [new tag]           v1.47 -> v1.47\r\n ! [remote rejected]   master -> master (protected branch hook declined)\r\nerror: failed to push some refs to 'git@github.com:PyGithub/PyGithub.git'\r\n```\r\n\r\n@sfdye What do you think we should do? 1.47 is up on PyPi, it looks like the tag is up on Github, we're just missing the commit with the release notes, but that means the tag will have to move as well."}}, {"doc": {"_id": 1435, "title": "Add myself to funding and maintainers", "content": "I think the time is right is add myself to these two files!"}}, {"doc": {"_id": 1434, "title": "Add support to edit and delete a project", "content": "Implements edit and delete project part of https://github.com/PyGithub/PyGithub/issues/606#issuecomment-595864374\r\n\r\n<details>\r\n<summary>\r\nManual testing\r\n</summary>\r\n\r\nBefore editing the project\r\n![Screenshot 2020-03-12 at 9 49 53 PM](https://user-images.githubusercontent.com/7795956/76543328-5f0c1000-64ac-11ea-8405-82cb48cf36f9.png)\r\n\r\nAfter editing the project\r\n![Screenshot 2020-03-12 at 9 55 52 PM](https://user-images.githubusercontent.com/7795956/76543322-5ca9b600-64ac-11ea-818e-18172a251e45.png)\r\n\r\nAfter deleting the project\r\n![Screenshot 2020-03-12 at 9 56 23 PM](https://user-images.githubusercontent.com/7795956/76543385-74813a00-64ac-11ea-9ded-cd67b56d5248.png)\r\n</details>"}}, {"doc": {"_id": 1433, "title": "Add method for fetching pull requests associated with a commit", "content": "## Closes Feature Request\r\n- Closes #1414\r\n\r\n## Explanation\r\nGitHub implements a direct link between a commit and all pull requests associated with that commit through a preview API, as explained here https://developer.github.com/v3/repos/commits/#list-pull-requests-associated-with-commit\r\n\r\n## Notes\r\nThe test actually gets a new commit (instead of using the one set on the test class instance). That's because that commit has no corresponding PRs. If preferred, I can reimplement the other tests pointing to another commit that might cover - or I can just fake it on the test replay data."}}, {"doc": {"_id": 1432, "title": "Org.invite_user(\"email\") returns github.GithubException.UnknownObjectException: 404 ", "content": "I am trying to invite via email to an organization. \r\n\r\nG = github.Github(base_url=GIT_URL, login_or_token=GIT_ACCESS_TOKEN)\r\norg = G.get_organization(\"org\")\r\norg.invite_user(email='foo@company.com')\r\n\r\nHowever I am getting this error\r\n\r\n`github.GithubException.UnknownObjectException: 404 {\"message\": \"Not Found\", \"documentation_url\": \"https://developer.github.com/enterprise/2.18/v3/orgs/members/#create-organization-invitation\"}`\r\n\r\n Anyone know why this is failing?"}}, {"doc": {"_id": 1431, "title": "Add support for list user projects", "content": "Implements list user project part of https://github.com/PyGithub/PyGithub/issues/606#issuecomment-595864374\r\n\r\n### Manual testing:\r\n![Screenshot 2020-03-10 at 1 52 53 AM](https://user-images.githubusercontent.com/7795956/76254103-e1f55680-6271-11ea-9f08-6bb1964c4fa3.png)\r\n"}}, {"doc": {"_id": 1430, "title": "Organization.get_teams does not call the right github API URL ", "content": "When calling get_teams() from an organization object, it results in an error.\r\nThis is due to the organization's url attribute being in the format \r\nhttps://api.github.com/users/:org\r\nThis results in a call to GitHub at https://api.github.com/users/:org/teams when calling get_teams() \r\n \r\nThe GitHub API specifies that call should be made to https://api.github.com/orgs/:org/teams for this operation.  https://developer.github.com/v3/teams/#list-teams\r\n\r\n\r\nIf it makes any difference the program will first fetch a repository from it's full name then the organization object is found from repo's attribute and from there we are trying to fetch the teams via get_teams() resulting in this error\r\n\r\nUnfortunately as I am using this functionality in a job related capacity I cannot provide any code or logs but I hope that this information helps."}}, {"doc": {"_id": 1429, "title": "Add support for creating a user project", "content": "Implements create a user project part of https://github.com/PyGithub/PyGithub/issues/606#issuecomment-595864374\r\n\r\nhttps://developer.github.com/v3/projects/#create-a-user-project\r\n\r\n### Manual testing\r\n\r\n![Screenshot 2020-03-10 at 12 30 51 AM](https://user-images.githubusercontent.com/7795956/76247978-7063db00-6266-11ea-9465-d98ff90dadc1.png)\r\n"}}, {"doc": {"_id": 1428, "title": "Don't transform completely in PullRequest.*assignees", "content": "The two methods PullRequest.add_to_assignees() and\r\nPullRequest.remove_from_assignees() are special, in that they call\r\nPOST/DELETE on the issue_url of the pull request, and then transform all\r\ntheir attributes based on what was returned. This has a number of\r\neffects, none of them any good for calling new methods on the same pull\r\nrequest object. Instead, only pull out the changed attribute and use\r\nthat. Also change the returned URL for the POST call in the replay data\r\nto match what GitHub returns.\r\n\r\nFixes #1406"}}, {"doc": {"_id": 1427, "title": "Add draft attribute to PullRequest", "content": "This pull request adds `draft` attribute to `PullRequest`.\r\n\r\nContinued from #1100 \r\n\r\n### Manual Testing\r\n\r\n![Screenshot 2020-03-08 at 9 54 20 PM](https://user-images.githubusercontent.com/7795956/76166824-94042400-6187-11ea-9bd5-358801dfa71e.png)\r\n"}}, {"doc": {"_id": 1426, "title": "Create a tox docs environment", "content": "To make it easier to build documentation locally, add a new tox\r\nenvironment that installs our requirements and runs Sphinx."}}, {"doc": {"_id": 1425, "title": "Docstring for Repository.create_git_tag_and_release", "content": "The function create_git_tag_and_release had no docstring, so it didn't\r\nappear anywhere in our docs. Add a short one linking to the two methods\r\nit calls.\r\n\r\nFixes #1402"}}, {"doc": {"_id": 1424, "title": "Add Deployments API", "content": "Add a new class, Deployment to describe a deployment performed utilising\r\nGitHub. Add three methods onto Repository to list them and create them.\r\n\r\nFixes #1117"}}, {"doc": {"_id": 1423, "title": "Switch to using pytest", "content": "Due to the recent deprecation of setup.py test, we should move with the\r\ntimes, and switch to a non-deprecated test runner.\r\n\r\nAdd configuration for pytest, and switch tox to using it. Remove\r\nAllTests, since it is no longer required to locate test classes, and\r\nrewrite tests/__main__.py as a pytest conftest plugin.\r\n\r\nAlso drop the test function from manage.sh, tox does a much better job."}}, {"doc": {"_id": 1422, "title": "Add support for draft pull request", "content": "Implements #1213 \r\n\r\n* Added `draft` parameter to `create_pull` method. \r\n* Updated tests\r\n* Updated docstring\r\n\r\n### Testing\r\n\r\n<details>\r\n<summary>Automated testing</summary>\r\n\r\n![Screenshot 2020-03-07 at 2 47 47 AM](https://user-images.githubusercontent.com/7795956/76123405-8bdca500-601e-11ea-9838-4ae194a13aea.png)\r\n\r\n</details>\r\n\r\n<details>\r\n<summary>Manual testing</summary>\r\n\r\n### With `draft = True`\r\n\r\n1. Running the `create_pull` command:\r\n![Screenshot 2020-03-07 at 2 48 04 AM](https://user-images.githubusercontent.com/7795956/76123466-af075480-601e-11ea-9d8c-aeb22265dbd4.png)\r\n\r\n2. Checking Github:\r\n![Screenshot 2020-03-07 at 2 48 20 AM](https://user-images.githubusercontent.com/7795956/76123482-b595cc00-601e-11ea-89d8-bc45c8d95fc1.png)\r\n\r\n3. Checking the pull request\r\n![Screenshot 2020-03-07 at 2 48 33 AM](https://user-images.githubusercontent.com/7795956/76123488-b890bc80-601e-11ea-8b7d-5cb9906fe2af.png)\r\n\r\n### With `draft` not set\r\n\r\n1. Running the `create_pull` command:\r\n![Screenshot 2020-03-07 at 2 48 51 AM](https://user-images.githubusercontent.com/7795956/76123644-1ae9bd00-601f-11ea-9e9c-5f9a94502729.png)\r\n\r\n2. Checking Github:\r\n![Screenshot 2020-03-07 at 2 49 03 AM](https://user-images.githubusercontent.com/7795956/76123660-22a96180-601f-11ea-9fb9-8d8b592da01f.png)\r\n\r\n3. Checking the pull request:\r\n![Screenshot 2020-03-07 at 2 49 16 AM](https://user-images.githubusercontent.com/7795956/76123678-2937d900-601f-11ea-854f-5f31d5683abd.png)\r\n\r\n\r\n</details>"}}, {"doc": {"_id": 1421, "title": "Support new \"Delete Reactions\" endpoints", "content": "GitHub Developer API announcement:\r\nhttps://developer.github.com/changes/2020-02-26-new-delete-reactions-endpoints/\r\n\r\nThese new endpoints need to be supported:\r\n\r\n- [ ] Delete a commit comment reaction\r\n  - `DELETE /repos/:owner/:repo/comments/:comment_id/reactions/:reaction_id`\r\n  - Docs: https://developer.github.com/v3/reactions/#delete-a-commit-comment-reaction\r\n\r\n- [ ] Delete an issue reaction\r\n   - `DELETE /repos/:owner/:repo/issues/:issue_number/reactions/:reaction_id`\r\n   - Docs: https://developer.github.com/v3/reactions/#delete-an-issue-reaction\r\n\r\n- [ ] Delete a reaction to a commit comment\r\n  - `DELETE /repos/:owner/:repo/issues/comments/:comment_id/reactions/:reaction_id`\r\n  - Docs: https://developer.github.com/v3/reactions/#delete-an-issue-comment-reaction\r\n\r\n- [ ] Delete a pull request comment reaction\r\n  - `DELETE /repos/:owner/:repo/pulls/comments/:comment_id/reactions/:reaction_id`\r\n  - Docs: https://developer.github.com/v3/reactions/#delete-a-pull-request-comment-reaction\r\n\r\n- [ ] Delete team discussion reaction\r\n  - `DELETE /orgs/:org/teams/:team_slug/discussions/:discussion_number/reactions/:reaction_id`\r\n  - Docs: https://developer.github.com/v3/reactions/#delete-team-discussion-reaction\r\n\r\n- [ ] Delete team discussion comment reaction\r\n  - `DELETE /orgs/:org/teams/:team_slug/discussions/:discussion_number/comments/:comment_number/reactions/:reaction_id`\r\n  - Docs: https://developer.github.com/v3/reactions/#delete-team-discussion-comment-reaction\r\n"}}, {"doc": {"_id": 1420, "title": "Fix GitMembership with a hammer", "content": "While investigating pytest, I discovered this test class was not\r\nimported in AllTests, so it never ran, and worse, it would always fail\r\nbecause it would get a NamedUser, and not an AuthenticatedUser. Add it\r\nin it, and hit it with a hammer until it passes."}}, {"doc": {"_id": 1419, "title": "API Rate Limit example", "content": "Hello, \r\n\r\nI seem to be hitting Github search rate limits. I have written a utility to keep track of API calls but still seem to be hitting the search_code rate limit with basic authentication (30 per minute). \r\n\r\nCurrently what I am doing is searching my entire Github organization's projects for a particular set of keywords. There are about 40-50 repos within the organization so I would expect I could make all necessary searches within 2 minutes. Is my logic correct? \r\n\r\nHere is some example code where I am using pypi package 'ratelimit' to limit my API requests to 29 per minute: \r\n\r\n\r\n```\r\n@sleep_and_retry\r\n@limits(calls=29, period=60)\r\ndef search_code(githubClient, query_string):\r\n    search_results = []\r\n    search = githubClient.search_code(query=query_string)\r\n    for item in search:\r\n        search_results.append(item)\r\n    return search_results\r\n```\r\n\r\nAre there any examples that anyone has written where you are successfully able to avoid rate limits for searching? \r\n\r\nThanks in advance. "}}, {"doc": {"_id": 1418, "title": " Add support for editing project cards", "content": "One more step towards full project support (https://github.com/PyGithub/PyGithub/issues/606)\r\n\r\nhttps://developer.github.com/v3/projects/cards/#update-a-project-card\r\n\r\nRevised version of https://github.com/PyGithub/PyGithub/pull/1409"}}, {"doc": {"_id": 1417, "title": "Implement ProjectCard.delete()", "content": "To work towards implementing more of the API surrounding Project Cards,\r\nadd a delete method. With thanks to Christopher Mitchell, Ph.D.\r\n\r\nFixes #1409"}}, {"doc": {"_id": 1416, "title": "Add \"get_repo_permission\" to Team class (for #1415)", "content": "This adds support in a way that matches GitHub API:\r\nhttps://developer.github.com/v3/teams/#check-if-a-team-manages-a-repository\r\n\r\nI've tried to stick to the coding standards but I'm not _too_ convinced.\r\n\r\nBTW this account is going to disappear on Friday (change of job) and/or I may well stop being able to respond :-("}}, {"doc": {"_id": 1415, "title": "Team missing \"get_repo_permissions\"", "content": "There is a \"set_repo_permissions\" call (great!) however there's no way to read the permissions.  GitHub does support this:\r\n\r\nhttps://developer.github.com/v3/teams/#check-if-a-team-manages-a-repository\r\n\r\nI'm especially interested in the full permissions that it describes just after that link (so that you can see admin/push/pull).\r\n\r\nI had a quick look to see if I could send a PR (the call is easy, but lost my way figuring out how to convert that into a Repository!)"}}, {"doc": {"_id": 1414, "title": "List pull requests based on commit", "content": "There's a functionality on the Github API that is apparently not supported on PyGithub -- https://developer.github.com/v3/repos/commits/#list-pull-requests-associated-with-commit\r\n\r\n## Motivation\r\n\r\nI'm doing an auto-versioning type of thing on my repo, and I need to walk through all the pull requests searching for labels. I can get all the commits since the last release using `<repo>.get_commits(since=date_from_last_release)`. It would be incredibly useful if those commits came with their associated pull requests - that way I could simply check for each label on those.\r\n\r\nI couldn't find this functionality on the documentation or reading the code, and I couldn't find another decent way to do this on the current PyGithub implementation.\r\n\r\n## Caveats\r\n\r\nThis feature seems to be in preview period and the API might change, so it's probably not worth doing this right now (if ever)."}}, {"doc": {"_id": 1413, "title": "Add `delete()` Method to `ProjectCard`", "content": "Basically what it says on the tin. The Github API [allows you to delete a card from a project](https://developer.github.com/v3/projects/cards/#delete-a-project-card) by card ID, but this functionality isn't exposed in PyGithub. Based on looking briefly at the documentation, the implementation might be something like:\r\n\r\n```\r\n    def delete(self):\r\n        \"\"\"\r\n        :calls: `DELETE /projects/columns/cards/:card_id <https://developer.github.com/v3/projects/cards>`_\r\n        :rtype: bool\r\n        \"\"\"\r\n        status, _, _ = self._requester.requestJson(\r\n            \"DELETE\",\r\n            self.url,\r\n            headers={\"Accept\": Consts.mediaTypeProjectsPreview},\r\n        )\r\n        return status == 204\r\n```"}}, {"doc": {"_id": 1412, "title": "PullRequest.update_branch(): allow expected_head_sha to be empty", "content": "See issue [https://github.com/PyGithub/PyGithub/issues/1411](1411)\r\n\r\nThe function `PullRequest.update_branch()` currently requires parameter `expected_head_sha`.\r\nBut this parameter is not mandatory according to\r\nhttps://developer.github.com/v3/pulls/#update-a-pull-request-branch\r\n> Default: SHA of the pull request's current HEAD ref.\r\n\r\nThis pull request makes the parameter optional"}}, {"doc": {"_id": 1411, "title": "PullRequest.update_branch(): allow expected_head_sha to be empty and use head ref", "content": "The function `PullRequest.update_branch()` currently requires parameter `expected_head_sha`.\r\nBut this parameter is not mandatory according to\r\nhttps://developer.github.com/v3/pulls/#update-a-pull-request-branch\r\n> Default: SHA of the pull request's current HEAD ref.\r\n\r\nCurrently I'm unable to use this default, because the function does not allow the parameter to be empty."}}, {"doc": {"_id": 1410, "title": "Importing some modules in package causes AttributeError", "content": "On importing a module say `PullRequest` Pygithub throws an error saying github has no attribute `githubObject`\r\n\r\n```\r\n    from github.PullRequest import PullRequest\r\n  File \"/opt/python/lib/python3.6/site-packages/github/PullRequest.py\", line 48, in <module>\r\n    import github.GithubObject\r\n  File \"/opt/python/lib/python3.6/site-packages/github/GithubObject.py\", line 40, in <module>\r\n    from . import Consts\r\n  File \"/opt/python/lib/python3.6/site-packages/github/__init__.py\", line 43, in <module>\r\n    from github.MainClass import Github, GithubIntegration\r\n  File \"/opt/python/lib/python3.6/site-packages/github/MainClass.py\", line 61, in <module>\r\n    from . import AuthenticatedUser\r\n  File \"/opt/python/lib/python3.6/site-packages/github/AuthenticatedUser.py\", line 48, in <module>\r\n    import github.Invitation\r\n  File \"/opt/python/lib/python3.6/site-packages/github/Invitation.py\", line 31, in <module>\r\n    class Invitation(github.GithubObject.CompletableGithubObject):\r\nAttributeError: module 'github' has no attribute 'GithubObject'\r\n```"}}, {"doc": {"_id": 1409, "title": "Add support for editing project cards", "content": "One more step towards full project support (https://github.com/PyGithub/PyGithub/issues/606)\r\n\r\nhttps://developer.github.com/v3/projects/cards/#update-a-project-card"}}, {"doc": {"_id": 1408, "title": "Adding media preview headers", "content": "Adding mandatory media preview header to get_label() get_labels() methods within Repository and Issue classes"}}, {"doc": {"_id": 1407, "title": "AssertionError when passing valid(?) parameter", "content": "When using PullRequest.set_labels() or PullRequest.add_to_assignees(), and passing a list of strings as a parameter to either of them, I get \r\n```\r\nTraceback (most recent call last):  File \".\\standardize.py\", line 133, in <module>    st = Standardize('fae925c6fa18ed6f026931019c644712ac2af0fa', 'config.example.json')  File \".\\standardize.py\", line 25, in __init__\r\n    self.standardize()  File \".\\standardize.py\", line 44, in standardize\r\n    PRCONFIG=self.config.config['PR']  File \"C:\\src\\gh-standardize\\gh-standardize\\repository.py\", line 80, in createChangesPR    self.assignChangesPR(PR, PRCONFIG)\r\n  File \"C:\\src\\gh-standardize\\gh-standardize\\repository.py\", line 98, in assignChangesPR\r\n    PR.add_to_assignees(PRCONFIG['AUTOASSIGN'])  File \"C:\\Users\\Ari\\.virtualenvs\\gh-standardize-TV0O1TPc\\lib\\site-packages\\github\\PullRequest.py\", line 836, in add_to_assignees        \r\n    ), assigneesAssertionError: (['akmadian'],)\r\n```\r\nwhere ['akmadian'] is the list of assignees, or for labels, it could be ['bug', 'help wanted'], etc. AFAIK, this is valid syntax because the documentation for both [add_to_assignees()](https://pygithub.readthedocs.io/en/latest/github_object/PullRequest.html#github.PullRequest.PullRequest.add_to_assignees), and [set_labels()](https://pygithub.readthedocs.io/en/latest/github_objects/PullRequest.html#github.PullRequest.PullRequest.set_labels) both say that a list of strings is a valid parameter. I am loading the lists of strings from a JSON file via json.loads(), but I don't think that should make a difference since the JSON array is converted to a python list anyways. When I take the first index of the list and pass a single string, it works alright. This may also happen with other similar methods, but these are the only two I've tested.\r\n\r\nIs this a bug, or am I missing something syntax-wise here? Thanks :)"}}, {"doc": {"_id": 1406, "title": "add_to_assignees() breaks create_review_request()", "content": "Given a PullRequest object `pull`, the following sequence of operations leads to a 404 error:\r\n\r\n1. `pull.add_to_assignees(\"fpoli\")`\r\n2. `pull.create_review_request(reviewers=[\"some-user\"])`\r\n\r\nHowever, the following works fine:\r\n\r\n1. `deepclone(pull).add_to_assignees(\"fpoli\")`\r\n2. `pull.create_review_request(reviewers=[\"some-user\"])`\r\n\r\nPossible reason: internally, `add_to_assignees` calls the `_useAttributes` defined in the `Issue` class, which replaces the `self._url` of the pull request with the url of an _issue_. Then, the `create_review_request` call fails because it sends a POST request to a non-existing endpoint like <https://api.github.com/repos/viperproject/viperserver/issues/10/requested_reviewers>, which should be <https://api.github.com/repos/viperproject/viperserver/pulls/10/requested_reviewers>."}}, {"doc": {"_id": 1405, "title": "Fetch status of most recent commit of all PRs of a certain repo", "content": "Currently, I use `get_commits()` to get all commits on the repo & check `commit.get_combined_status()`to get the latest status of those commits\r\n\r\n```\r\nfor commit in repo.get_commits():\r\n    combined_status = commit.get_combined_status()\r\n    ...\r\n\r\n```\r\n\r\nHowever, if a particular commit in a PR has been force-pushed (overwritten) then I don't want to check for the \"stale\" commit anymore. How to filter that out?\r\n\r\nBasically, I just want to get the \"latest\" status of the most recent commit of all PRs of a certain repo.\r\n\r\nIs there any way to do that?"}}, {"doc": {"_id": 1404, "title": "[Errno 11001] getaddrinfo failed", "content": "from github import Github\r\n# using username and password\r\ng = Github(\"user\", \"password\")\r\n# or using an access token\r\ng = Github(\"access_token\")\r\n# Github Enterprise with custom hostname\r\ng = Github(base_url=\"https://{hostname}/api/v3\", login_or_token=\"access_token\")\r\nfor repo in g.get_user().get_repos():\r\n    print(repo.name)\r\n    repo.edit(has_wiki=False)\r\n    # to see all the available attributes and methods\r\n    print(dir(repo))\r\n\r\n**********************************************************************************************************\r\nError->\r\n\r\ngaierror                                  Traceback (most recent call last)\r\n~\\Anaconda3\\lib\\site-packages\\urllib3\\connection.py in _new_conn(self)\r\n    158             conn = connection.create_connection(\r\n--> 159                 (self._dns_host, self.port), self.timeout, **extra_kw)\r\n    160 \r\n\r\n~\\Anaconda3\\lib\\site-packages\\urllib3\\util\\connection.py in create_connection(address, timeout, source_address, socket_options)\r\n     56 \r\n---> 57     for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\r\n     58         af, socktype, proto, canonname, sa = res\r\n\r\n~\\Anaconda3\\lib\\socket.py in getaddrinfo(host, port, family, type, proto, flags)\r\n    747     addrlist = []\r\n--> 748     for res in _socket.getaddrinfo(host, port, family, type, proto, flags):\r\n    749         af, socktype, proto, canonname, sa = res\r\n\r\ngaierror: [Errno 11001] getaddrinfo failed\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nNewConnectionError                        Traceback (most recent call last)\r\n~\\Anaconda3\\lib\\site-packages\\urllib3\\connectionpool.py in urlopen(self, method, url, body, headers, retries, redirect, assert_same_host, timeout, pool_timeout, release_conn, chunked, body_pos, **response_kw)\r\n    599                                                   body=body, headers=headers,\r\n--> 600                                                   chunked=chunked)\r\n    601 \r\n\r\n~\\Anaconda3\\lib\\site-packages\\urllib3\\connectionpool.py in _make_request(self, conn, method, url, timeout, chunked, **httplib_request_kw)\r\n    342         try:\r\n--> 343             self._validate_conn(conn)\r\n    344         except (SocketTimeout, BaseSSLError) as e:\r\n\r\n~\\Anaconda3\\lib\\site-packages\\urllib3\\connectionpool.py in _validate_conn(self, conn)\r\n    838         if not getattr(conn, 'sock', None):  # AppEngine might not have  `.sock`\r\n--> 839             conn.connect()\r\n    840 \r\n\r\n~\\Anaconda3\\lib\\site-packages\\urllib3\\connection.py in connect(self)\r\n    300         # Add certificate verification\r\n--> 301         conn = self._new_conn()\r\n    302         hostname = self.host\r\n\r\n~\\Anaconda3\\lib\\site-packages\\urllib3\\connection.py in _new_conn(self)\r\n    167             raise NewConnectionError(\r\n--> 168                 self, \"Failed to establish a new connection: %s\" % e)\r\n    169 \r\n\r\nNewConnectionError: <urllib3.connection.VerifiedHTTPSConnection object at 0x000001C42D189488>: Failed to establish a new connection: [Errno 11001] getaddrinfo failed\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nMaxRetryError                             Traceback (most recent call last)\r\n~\\Anaconda3\\lib\\site-packages\\requests\\adapters.py in send(self, request, stream, timeout, verify, cert, proxies)\r\n    448                     retries=self.max_retries,\r\n--> 449                     timeout=timeout\r\n    450                 )\r\n\r\n~\\Anaconda3\\lib\\site-packages\\urllib3\\connectionpool.py in urlopen(self, method, url, body, headers, retries, redirect, assert_same_host, timeout, pool_timeout, release_conn, chunked, body_pos, **response_kw)\r\n    637             retries = retries.increment(method, url, error=e, _pool=self,\r\n--> 638                                         _stacktrace=sys.exc_info()[2])\r\n    639             retries.sleep()\r\n\r\n~\\Anaconda3\\lib\\site-packages\\urllib3\\util\\retry.py in increment(self, method, url, response, error, _pool, _stacktrace)\r\n    398         if new_retry.is_exhausted():\r\n--> 399             raise MaxRetryError(_pool, url, error or ResponseError(cause))\r\n    400 \r\n\r\nMaxRetryError: HTTPSConnectionPool(host='%7bhostname%7d', port=443): Max retries exceeded with url: /api/v3/user/repos (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000001C42D189488>: Failed to establish a new connection: [Errno 11001] getaddrinfo failed'))\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nConnectionError                           Traceback (most recent call last)\r\n<ipython-input-62-89973ad029a2> in <module>\r\n----> 1 for repo in g.get_user().get_repos():\r\n      2     print(repo.name)\r\n      3     repo.edit(has_wiki=False)\r\n      4     # to see all the available attributes and methods\r\n      5     print(dir(repo))\r\n\r\n~\\Anaconda3\\lib\\site-packages\\github\\PaginatedList.py in __iter__(self)\r\n     57             yield element\r\n     58         while self._couldGrow():\r\n---> 59             newElements = self._grow()\r\n     60             for element in newElements:\r\n     61                 yield element\r\n\r\n~\\Anaconda3\\lib\\site-packages\\github\\PaginatedList.py in _grow(self)\r\n     69 \r\n     70     def _grow(self):\r\n---> 71         newElements = self._fetchNextPage()\r\n     72         self.__elements += newElements\r\n     73         return newElements\r\n\r\n~\\Anaconda3\\lib\\site-packages\\github\\PaginatedList.py in _fetchNextPage(self)\r\n    200     def _fetchNextPage(self):\r\n    201         headers, data = self.__requester.requestJsonAndCheck(\r\n--> 202             \"GET\", self.__nextUrl, parameters=self.__nextParams, headers=self.__headers\r\n    203         )\r\n    204         data = data if data else []\r\n\r\n~\\Anaconda3\\lib\\site-packages\\github\\Requester.py in requestJsonAndCheck(self, verb, url, parameters, headers, input)\r\n    317         return self.__check(\r\n    318             *self.requestJson(\r\n--> 319                 verb, url, parameters, headers, input, self.__customConnection(url)\r\n    320             )\r\n    321         )\r\n\r\n~\\Anaconda3\\lib\\site-packages\\github\\Requester.py in requestJson(self, verb, url, parameters, headers, input, cnx)\r\n    408             return \"application/json\", json.dumps(input)\r\n    409 \r\n--> 410         return self.__requestEncode(cnx, verb, url, parameters, headers, input, encode)\r\n    411 \r\n    412     def requestMultipart(\r\n\r\n~\\Anaconda3\\lib\\site-packages\\github\\Requester.py in __requestEncode(self, cnx, verb, url, parameters, requestHeaders, input, encode)\r\n    470 \r\n    471         status, responseHeaders, output = self.__requestRaw(\r\n--> 472             cnx, verb, url, requestHeaders, encoded_input\r\n    473         )\r\n    474 \r\n\r\n~\\Anaconda3\\lib\\site-packages\\github\\Requester.py in __requestRaw(self, cnx, verb, url, requestHeaders, input)\r\n    496             cnx = self.__createConnection()\r\n    497         cnx.request(verb, url, input, requestHeaders)\r\n--> 498         response = cnx.getresponse()\r\n    499 \r\n    500         status = response.status\r\n\r\n~\\Anaconda3\\lib\\site-packages\\github\\Requester.py in getresponse(self)\r\n    114             timeout=self.timeout,\r\n    115             verify=self.verify,\r\n--> 116             allow_redirects=False,\r\n    117         )\r\n    118         return RequestsResponse(r)\r\n\r\n~\\Anaconda3\\lib\\site-packages\\requests\\sessions.py in get(self, url, **kwargs)\r\n    544 \r\n    545         kwargs.setdefault('allow_redirects', True)\r\n--> 546         return self.request('GET', url, **kwargs)\r\n    547 \r\n    548     def options(self, url, **kwargs):\r\n\r\n~\\Anaconda3\\lib\\site-packages\\requests\\sessions.py in request(self, method, url, params, data, headers, cookies, files, auth, timeout, allow_redirects, proxies, hooks, stream, verify, cert, json)\r\n    531         }\r\n    532         send_kwargs.update(settings)\r\n--> 533         resp = self.send(prep, **send_kwargs)\r\n    534 \r\n    535         return resp\r\n\r\n~\\Anaconda3\\lib\\site-packages\\requests\\sessions.py in send(self, request, **kwargs)\r\n    644 \r\n    645         # Send the request\r\n--> 646         r = adapter.send(request, **kwargs)\r\n    647 \r\n    648         # Total elapsed time of the request (approximately)\r\n\r\n~\\Anaconda3\\lib\\site-packages\\requests\\adapters.py in send(self, request, stream, timeout, verify, cert, proxies)\r\n    514                 raise SSLError(e, request=request)\r\n    515 \r\n--> 516             raise ConnectionError(e, request=request)\r\n    517 \r\n    518         except ClosedPoolError as e:\r\n\r\nConnectionError: HTTPSConnectionPool(host='%7bhostname%7d', port=443): Max retries exceeded with url: /api/v3/user/repos (Caused by NewConnectionError('<urllib3.connection.VerifiedHTTPSConnection object at 0x000001C42D189488>: Failed to establish a new connection: [Errno 11001] getaddrinfo failed'))"}}, {"doc": {"_id": 1403, "title": "PaginatedList length/count issue", "content": "commit.get_statuses() returns a PaginatedList\r\nI am trying to find the length of PaginatedList using\r\n\r\nhttps://github.com/PyGithub/PyGithub/blob/2991e9f1782e068d753f52009b1db2ad528fd6a1/github/PaginatedList.py#L106\r\n\r\n### totalcount()\r\n`commit.get_statuses().totalcount`\r\n```\r\nAttributeError: 'PaginatedList' object has no attribute 'totalcount'\r\n```\r\n\r\n### len()\r\n`len(commit.get_statuses()`\r\n```\r\nError: TypeError: object of type 'PaginatedList' has no len()\r\n```"}}, {"doc": {"_id": 1402, "title": "No reference docs for create_git_tag_and_release", "content": "The docs for a [Repository](https://pygithub.readthedocs.io/en/latest/github_objects/Repository.html#github.Repository.Repository.create_git_release) doesn't have any mention of `create_git_tag_and_release()`\r\n\r\n"}}, {"doc": {"_id": 1401, "title": "Linked pull requests", "content": "I'm using PyGitHub to implement [issue tracker](https://github.com/IlyaFaer/GitHub-Scraper). The very overall idea is to show active issues and related pull requests of several repositories.\r\n\r\nFor now I'm [walking through list of PRs and checking for GitHub keywords within their bodies](https://github.com/IlyaFaer/GitHub-Scraper/blob/50119a5f7dd1766685c8543e805b6cf73e558625/scraper/pr_index.py#L47-L59) to find relations between issues and PRs. It takes time and causes me to keep not very beautiful code.\r\n\r\nSome days ago my eye came across the new widget \"Linked pull requests\" in issue card. It would be great to implement method to return list of these PRs (or to return them while reading issues itself) in PyGitHub.\r\n\r\nThanks in advance!\r\n\r\n![\u0411\u0435\u0437\u044b\u043c\u044f\u043d\u043d\u044b\u0439](https://user-images.githubusercontent.com/26030071/74608253-9c20f480-50f0-11ea-9649-6df66b49596f.png)\r\n"}}, {"doc": {"_id": 1400, "title": "Feature Request: (high-level) function to find potential Pull Requests", "content": "Hello and thanks for providing this neat library :-)\r\n\r\nOut of a [discussion over in `probot/ideas`](https://github.com/probot/ideas/issues/26#issuecomment-578270124) came an idea that I'd be happy to receive input from around here: A tool to help maintainers observe the fork network around their project, in order to review interesting branches, which were never included in PRs (thus not easily reviewable by maintainers).\r\n\r\nWould this be more fruitful to attempt via:\r\n\r\na) [`get_network_events()`](https://pygithub.readthedocs.io/en/latest/github_objects/Repository.html#github.Repository.Repository.get_network_events) (plus extracting the branch from `payload.ref` and creator from `repo.name`, if the event is a `PushEvent`), or \r\n\r\nb) getting [all branches](https://pygithub.readthedocs.io/en/latest/github_objects/Repository.html#github.Repository.Repository.get_branches), [all forks](https://pygithub.readthedocs.io/en/latest/github_objects/Repository.html#github.Repository.Repository.get_forks) and [all PRs](https://pygithub.readthedocs.io/en/latest/github_objects/Repository.html#github.Repository.Repository.get_pulls),\r\n\r\nto create a list of branches that did diverge from the origin(al), but are not in a PR already? Thanks for any hints on how to use PyGitHub for this purpose, or for pointers to existing tools that do that :-)\r\n\r\nIf none are known, would you welcome a PR with such a high-level functionality, or should it be a different tool?"}}, {"doc": {"_id": 1399, "title": "Getting AttributeError: 'NoneType' object has no attribute 'startswith' when trying to get the repo_name", "content": "The application works fine but suddenly, the error pops up.\r\n\r\nFile \"/Users/sriharichandramouli/Documents/Git_Auto_comment/git_update.py\", line 19, in job\r\n    repo = g.get_repo(repo_name[i])\r\n  File \"/usr/local/lib/python3.7/site-packages/github/MainClass.py\", line 330, in get_repo\r\n    \"GET\", \"%s%s\" % (url_base, full_name_or_id)\r\n  File \"/usr/local/lib/python3.7/site-packages/github/Requester.py\", line 322, in requestJsonAndCheck\r\n    verb, url, parameters, headers, input, self.__customConnection(url)\r\n  File \"/usr/local/lib/python3.7/site-packages/github/Requester.py\", line 345, in __check\r\n    raise self.__createException(status, responseHeaders, output)\r\n  File \"/usr/local/lib/python3.7/site-packages/github/Requester.py\", line 379, in __createException\r\n    elif status == 403 and output.get(\"message\").startswith(\r\nAttributeError: 'NoneType' object has no attribute 'startswith'"}}, {"doc": {"_id": 1398, "title": "Add pre-commit plugin for black/isort/flake8", "content": ""}}, {"doc": {"_id": 1397, "title": "Unpin coverage to 5.0.3 only", "content": "To not force distributions to patch our requirements, loosen the\r\ncoverage test dependency."}}, {"doc": {"_id": 1396, "title": "Make scripts/add_attribute.py work with python3", "content": "In python3 you can't write text to a file that was opened in binary mode. This PR opens the target file in text mode, which is what we actually want."}}, {"doc": {"_id": 1395, "title": "Adds support to create repository from a template", "content": "This PR adds a new `create_repo_from_template` method to `AuthenticatedUser` and `Organization` that uses the new `/generate` endpoint of a repo. I followed the same pattern as the similar `create_fork` method;\r\n\r\nI also added a new `is_template` attribute to the `Repository` class. This attribute will only be sent by Github when we use the feature's `Accept` header which I only added to the POST to create the new repo. Let me know if I should also add it to `get_repo` calls.\r\n\r\nThe documentation mentions a template_repository attribute but Github never sends it."}}, {"doc": {"_id": 1394, "title": "how to add proxy host in github api", "content": ""}}, {"doc": {"_id": 1393, "title": "Silence most ResourceWarnings", "content": "A few test classes were failing to call tearDown() of the superclass,\r\nwhich meant the file descriptors of their replydata files were leaking.\r\nMake sure to call it, and switch every other callsite of superclasses by\r\nname to using argument-less super().\r\n\r\nRevert an AllTests change that snuck in during release."}}, {"doc": {"_id": 1392, "title": "Remove AccessToken from URLs", "content": "Hi guys, I received this email from GitHub\r\n\r\n\r\n```\r\nHi @rafaelcapucho,\r\n\r\nOn February 9th, 2020 at 22:37 (UTC) your application (OauthGitHubStudentDeveloperPack) used an access token (with the User-Agent python-requests/2.22.0) as part of a query parameter to access an endpoint through the GitHub API:\r\n\r\nhttps://api.github.com/user\r\n\r\nPlease use the Authorization HTTP header instead as using the `access_token` query parameter is deprecated and will be removed July 1st, 2020.\r\n\r\nDepending on your API usage, we'll be sending you this email reminder once every 3 days.\r\n\r\nVisit https://developer.github.com/changes/2019-11-05-deprecated-passwords-and-authorizations-api/#authenticating-using-query-parameters for more information.\r\n\r\nThanks,\r\nThe GitHub Team\r\n```\r\n\r\nWe're using your library, does it require any changes on your side? \r\nThank you."}}, {"doc": {"_id": 1391, "title": "Assert more attributes in Membership", "content": "To increase code coverage, assert more attributes in Membership."}}, {"doc": {"_id": 1390, "title": "Assert on changed Repository attributes", "content": "To increase code coverage, assert on more attributes of Repository\r\nduring the testEditWithAllArguments testcase."}}, {"doc": {"_id": 1389, "title": "Add reset to the repr for Rate", "content": "Add the reset attribute to the repr for Rate, and add a test for good\r\nmeasure.\r\n\r\nCo-Authored-By: Jonathan Leitschuh <jonathan.leitschuh@gmail.com>"}}, {"doc": {"_id": 1388, "title": "Add tox", "content": "- [x] Migrate all virtualenvs to tox \r\n- [x] Support for python3.5 - Python 3.8\r\n- [x] Add travis check for flake8/black/isort\r\n- [x] Add a tox command `format` for manual formatting"}}, {"doc": {"_id": 1387, "title": "This is a new issue", "content": ""}}, {"doc": {"_id": 1386, "title": "Run black over the entire tree", "content": "It's been a while since black was run over the entire tree, and since CI\r\nstill doesn't check it, we can get behind."}}, {"doc": {"_id": 1385, "title": "Add `reset` to `__repr__` for `Rate` type", "content": "Attempt number two, this one should be correct."}}, {"doc": {"_id": 1384, "title": "Add `remaining` to repr for Rate", "content": ""}}, {"doc": {"_id": 1383, "title": "Fix mistake in original submission", "content": "I modified #1306 to use the NotSet parameter after\r\nit was pointed out this was more appropriate however\r\nI did not also update the conditional."}}, {"doc": {"_id": 1382, "title": "Correct two attributes in Invitation", "content": "Proving once again that untested code is broken code, correctly set two\r\nattributes during initialization of Invitation. Increase coverage by\r\nchecking every attribute."}}, {"doc": {"_id": 1381, "title": "Add repo edit support for delete_branch_on_merge", "content": "A new parameter has been added to the repositories api, which allows the setting of the \"Automatically delete head branches\" setting shown in the screenshot below.\r\n\r\nThe parameter is defined here (create):\r\nhttps://developer.github.com/v3/repos/#parameters-4\r\n\r\nand here (edit):\r\nhttps://developer.github.com/v3/repos/#input\r\n\r\n![image](https://user-images.githubusercontent.com/11973031/73983428-8d1ca280-498a-11ea-8f0b-ea18e12ae3b8.png)\r\n\r\nIncidentally / FYI, the script to add missing attributes bombed out on my Windows environment (Python x64 3.7.5).\r\n\r\nhttps://github.com/PyGithub/PyGithub/blob/master/CONTRIBUTING.md#adding-missing-attributes-for-a-githubobject\r\n\r\n```\r\npython scripts/add_attribute.py AuthenticatedUser delete_branch_on_merge bool                                                                                                                        Traceback (most recent call last):\r\n  File \"scripts/add_attribute.py\", line 141, in <module>\r\n    f.write(line + \"\\n\")\r\nTypeError: a bytes-like object is required, not 'str'\r\n```\r\n\r\nThe end result was a saved, empty file."}}, {"doc": {"_id": 1380, "title": "Missing field \"files\" exception when creating gist", "content": "I get the following \"Validation Failed\" error while using `github.get_user().create_gist(True, files, description)`:\r\n```\r\ngithub.GithubException.GithubException: 422 {\"message\": \"Validation Failed\", \"documentation_url\": \"https://developer.github.com/v3/gists/#create-a-gist\", \"errors\": [{\"field\": \"files\", \"code\": \"missing_field\", \"resource\": \"Gist\"}]}\r\n```\r\nMy `files` dictionary looks good:\r\n```\r\n{'# README.md': <github.InputFileContent.InputFileContent object at 0x7f9abb69e2e8>, 'silicon-assertion-failed-b.vpr': <github.InputFileContent.InputFileContent object at 0x7f9abb692dd8>, 'silicon-assertion-failed-a.vpr': <github.InputFileContent.InputFileContent object at 0x7f9abb70dcc0>}\r\n```\r\nAny idea regarding what could be the cause?\r\n\r\n---\r\nDebug logging:\r\n```\r\nPOST https://api.github.com/gists\r\n{\r\n    'Content-Type': 'application/json',\r\n    'User-Agent': 'PyGithub/Python',\r\n    'Authorization': 'token (oauth token removed)'\r\n}\r\n{\r\n    \"files\": {\r\n        \"# README.md\": {\r\n            \"content\": \"Attachments for issue #335 of bitbucket repo viperproject/silicon\"\r\n        },\r\n        \"silicon-assertion-failed-a.vpr\": {\r\n            \"content\": \"\"\r\n        },\r\n        \"silicon-assertion-failed-b.vpr\": {\r\n            \"content\": \"\"\r\n        }\r\n    },\r\n    \"public\": true,\r\n    \"description\": \"Attachments for issue #335 of bitbucket repo viperproject/silicon\"\r\n}\r\n==> 422\r\n{\r\n    'x-accepted-oauth-scopes': '',\r\n    'content-length': '176',\r\n    'content-type': 'application/json; charset=utf-8',\r\n    'status': '422 Unprocessable Entity',\r\n    'x-github-media-type': 'github.v3; format=json',\r\n    'x-frame-options': 'deny',\r\n    'x-github-request-id': '(omitted)',\r\n    'x-xss-protection': '1; mode=block',\r\n    'strict-transport-security': 'max-age=31536000; includeSubdomains; preload',\r\n    'server': 'GitHub.com',\r\n    'x-oauth-scopes': 'gist, repo, write:discussion',\r\n    'date': 'Wed, 05 Feb 2020 11:25:37 GMT',\r\n    'referrer-policy': 'origin-when-cross-origin, strict-origin-when-cross-origin',\r\n    'access-control-expose-headers': 'ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type',\r\n    'x-ratelimit-limit': '5000',\r\n    'content-security-policy': \"default-src 'none'\",\r\n    'x-ratelimit-reset': '1580902688',\r\n    'x-content-type-options': 'nosniff',\r\n    'x-ratelimit-remaining': '3442',\r\n    'access-control-allow-origin': '*'\r\n}\r\n{\r\n    \"message\":\"Validation Failed\",\r\n    \"errors\":[\r\n        {\r\n            \"resource\":\"Gist\",\r\n            \"code\":\"missing_field\",\r\n            \"field\":\"files\"\r\n        }\r\n    ],\r\n    \"documentation_url\":\"https://developer.github.com/v3/gists/#create-a-gist\"\r\n}\r\n```"}}, {"doc": {"_id": 1379, "title": "Search repo issues by string label", "content": "Fixes #1377 \r\n\r\n### The problem\r\nAllows searching a repository for issues by label without having to do an HTTP request to fetch the label.\r\n\r\n### The solution\r\n1. Add a check to the assert to allow either `Label` or `str` types\r\n2. When building URL params, fetch the name of the Label (if Label type), else the label\r\n\r\nNote: code shamelessly copied from `Repository.create_issue`."}}, {"doc": {"_id": 1378, "title": "Trying to get the user name who has commented last in an issue using pygithub", "content": "I am delving into this wonderful library. I am trying to find information in the docs where **I can get the user name who commented last in an issue** but I have not been able to find any as of yet. I would really appreciate if there is any help :) Thanks"}}, {"doc": {"_id": 1377, "title": "Search repo issue by label without `get_label`", "content": "In order to search a repo's issues by label, you first need to fetch the label, then perform the search. This means we're doing an extra HTTP request (and using an extra API usage) just to search issues.\r\nI am working on integration with a repo where I know the label exists. Either way, this is irrelevant as GitHub will return no results for a label that doesn't exist.\r\n\r\nWhat I propose is to allow searching issues by the label strings removing the need for an extra API request. This means that PyGithub has the same behaviour for handling labels in `Repository.get_issues` as `Repository.create_issue`"}}, {"doc": {"_id": 1376, "title": "Timeout creating Git Blob of large content", "content": "I guess `repo.create_git_blob(..)` enforces a 15s timeout for creating Git Blobs. But, with a raw request it is possible to create a blob with request time of about 35 seconds. Is there a reason why timeout is kept 15 seconds?\r\n\r\n"}}, {"doc": {"_id": 1375, "title": "Add support to reply to a comment in a PullRequest", "content": "https://developer.github.com/v3/pulls/comments/#create-a-review-comment-reply"}}, {"doc": {"_id": 1374, "title": "Add support to reply to a Pull request comment", "content": "Closes #1375\r\n\r\nAdds support to reply to a Pull request comment:\r\n-> https://developer.github.com/v3/pulls/comments/#create-a-review-comment-reply\r\n"}}, {"doc": {"_id": 1373, "title": "GitHub Actions support", "content": "Docs here: https://developer.github.com/v3/actions/\r\n\r\nAre there plans to add support for GitHub Actions? The API is still in beta, but I would suspect that it won't change much in the future."}}, {"doc": {"_id": 1372, "title": "ResourceWarning unclosed ssl.SSLSocket", "content": "When using the Github object as part of a class, I get the following error running my unittests:\r\n\r\nResourceWarning: unclosed <ssl.SSLSocket fd=568, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=0, laddr=('****', 58166), raddr=('****', 443)>\r\n  method()\r\nResourceWarning: Enable tracemalloc to get the object allocation traceback\r\n\r\nThis could be solved by implementing the class as a context manager and explicitly closing any request objects in use on __exit()__"}}, {"doc": {"_id": 1371, "title": "Fix two deprecation warnings", "content": "Sort out two deprecation warnings to help silence the test suite."}}, {"doc": {"_id": 1370, "title": "Unpin sphinx requirement", "content": "Now that we support Python 3, we can stop pinning sphinx to the last\r\nversion with Python 2 support."}}, {"doc": {"_id": 1369, "title": "This is a new issue", "content": ""}}, {"doc": {"_id": 1368, "title": "This is a new issue", "content": ""}}, {"doc": {"_id": 1367, "title": "This is a new issue", "content": "This is the issue body"}}, {"doc": {"_id": 1366, "title": "This is a new issue", "content": "This is the issue body"}}, {"doc": {"_id": 1365, "title": "This is a new issue", "content": ""}}, {"doc": {"_id": 1364, "title": "This is a new issue", "content": ""}}, {"doc": {"_id": 1363, "title": "This is a new issue", "content": ""}}, {"doc": {"_id": 1362, "title": "Correct Repository.create_git_tag_and_release()", "content": "Repository.create_git_tag_and_release() is a convience function that\r\ncreates a git tag and then a release. It was not passing the SHA1 of the\r\ncommit to the release function, resulting in incorrect releases.\r\n\r\nFixes #1336"}}, {"doc": {"_id": 1361, "title": "Switch to no argument super()", "content": "Now that Python 2 support is gone, we can switch to no argument super()\r\nrather than calling our superclass by name."}}, {"doc": {"_id": 1360, "title": "exposed seats and filled_seats for Github Organization Plan", "content": "Problem:  Need access to the seats attributes (`seats` and `filled_seats`) for the `Organization` `Plan` object \r\nSolution: Added attributes following the pattern for the existing attributes, no change to test fixtures required as attributes were just not currently exposed\r\n\r\nNot too difficult!  Thanks "}}, {"doc": {"_id": 1359, "title": "Repository.create_project() body is optional", "content": "The POST parameters passed to the create_project API call did not\r\nconsider the body optional, and always included it. Fix up a formatting\r\nerror in the docstring for good measure.\r\n\r\nFixes #1357"}}, {"doc": {"_id": 1358, "title": "retrieving since value is not documented", "content": "I am trying to use `get_organizations()` to make a tool that dumps them but which can restart if interrupted. \r\n\r\nThe issue is that the function only returns an interator so I have no clue which was the last value of `since`, one that I would have to save on error, in order to be able to restart from zero next time."}}, {"doc": {"_id": 1357, "title": "Creating a project without body argument leads to exception", "content": "Hi guys,\r\n\r\nAccording to [documentation](https://pygithub.readthedocs.io/en/latest/github_objects/Repository.html#github.Repository.Repository.create_project) one can create project w/o body. However when I'm trying to do it I'm getting a `TypeError: Object of type _NotSetType is not JSON serializable`.\r\n\r\n### Steps to reproduce\r\n\r\nRun `poc.py` with your Personal Access Token as a first parameter:\r\n\r\n```\r\n$ cat poc.py\r\nimport sys\r\nfrom github import Github\r\nGithub(sys.argv[1]).get_user().create_repo(\"bug\").create_project(\"here\")\r\n$ pipenv run python3 -m pdb poc.py TOKEN\r\n...\r\nTypeError: Object of type _NotSetType is not JSON serializable\r\nUncaught exception. Entering post mortem debugging\r\nRunning 'cont' or 'step' will restart the program\r\n```\r\n\r\n### Root cause analysis\r\n\r\nThe root cause seems to be that unspecified `body` has the value `NotSet`. In pdb:\r\n\r\n```\r\n...\r\nTypeError: Object of type _NotSetType is not JSON serializable\r\nUncaught exception. Entering post mortem debugging\r\nRunning 'cont' or 'step' will restart the program\r\n> /usr/local/Cellar/python/3.7.6_1/Frameworks/Python.framework/Versions/3.7/lib/python3.7/json/encoder.py(179)default()\r\n-> raise TypeError(f'Object of type {o.__class__.__name__} '\r\n(Pdb) u\r\n> /usr/local/Cellar/python/3.7.6_1/Frameworks/Python.framework/Versions/3.7/lib/python3.7/json/encoder.py(257)iterencode()\r\n-> return _iterencode(o, 0)\r\n(Pdb) p o\r\n{'name': 'here', 'body': NotSet}\r\n```\r\n\r\nAfter I've changed the `body` to `\"\"` project was created successfully.\r\n\r\n### Software versions\r\n\r\nPython 3.7.6 (default, Dec 30 2019, 19:38:26) \r\n[Clang 11.0.0 (clang-1100.0.33.16)] on darwin"}}, {"doc": {"_id": 1356, "title": "Implement move action for ProjectCard", "content": "ProjectCard's have the ability to be moved between columns, implement\r\nthe GitHub API to do so.\r\n\r\nFixes #1312"}}, {"doc": {"_id": 1355, "title": "Tidy up ProjectCard.get_content()", "content": "ProjectCard.get_content() did not document its one argument or assert\r\nits type. Do so, as well as generally tidy up the calls."}}, {"doc": {"_id": 1354, "title": "how to use retry parameter github.Github(GITHUB_AUTH_TOKEN,retry=3)", "content": "Hi I found below parameter in documentation\r\n    retry \u2013 int or urllib3.util.retry.Retry object\r\nso this int(retry) is the number of times to retry ??\r\ncan you please let me know how to use and what is the timeout ??\r\nI can see the default read timeout=15.\r\n\r\ngithub.Github(GITHUB_AUTH_TOKEN,retry=3)"}}, {"doc": {"_id": 1353, "title": "Create Blob returning 404 Not Found", "content": "Hi, I'm trying to create a Blob using the `create_git_blob` function, but it is returning a 404 not found. Below is the code and I'm using it on an Enterprise Github instance. This used to work a month ago but stopped working now. I have had no other troubles with other functions, so the problem can't be the `base_url` or `gh_access_token` configuration. Has anything changed?\r\n\r\n`g = Github(base_url=base_url,\r\n               login_or_token=gh_access_token)\r\n\r\n    repo = g.get_repo(repository)\r\n\r\n    # -- Prepare content of the blob\r\n\r\n    updated_file_content = .....\r\n    \r\n    # Create a blob\r\n    file_blob = repo.create_git_blob(content=updated_file_content, encoding=\"utf-8\")`"}}, {"doc": {"_id": 1352, "title": "search_topics returns different number of repositories compared to searching in browser.", "content": "```python\r\nrepos = g.search_topics('recipes')\r\nprint(len(list(repos)))\r\nfor repo in repos:\r\n    print(repo.name)\r\n```\r\n\r\nprints\r\n\r\n```\r\n80\r\nrecipes\r\nfranz-recipes\r\nchef-recipes\r\ncooking-recipes\r\ndeployer-recipes\r\n...\r\n```\r\n\r\nAPI gets 80 repos. However my browser (https://github.com/topics/recipes) returns 449 public repositories. Any help wld be aprpeciated."}}, {"doc": {"_id": 1351, "title": "readthedocs: Edit on github link is broken", "content": "While looking at a page on the documentation ([this one for instance](https://pygithub.readthedocs.io/en/latest/github_objects/BranchProtection.html)) I've seen that the \"Edit on github\" link is broken. It redirects to a 404. \r\n\r\nShould it be like this? \r\n\r\nThank you."}}, {"doc": {"_id": 1350, "title": "Correct parameter for Label.edit", "content": "The existing code for Label.edit was passing 'name' as a parameter to\r\nthe PATCH call, but GitHub expects 'new_name', correct it."}}, {"doc": {"_id": 1349, "title": "Support for update and delete repository labels", "content": "Currently there is support for **creating** a label for use in a repository.  https://github.com/PyGithub/PyGithub/blob/fc7109eab750b52ce3c96ad447c3e9011419c952/github/Repository.py#L1194-L1219\r\n\r\nHowever, there is no support for **updating** nor **deleting** a label from a repository.  This issue requests an enhancement for updating and deleting repository labels.\r\n\r\nReferences:\r\n\r\n### Updating\r\n\r\n```\r\nPATCH /repos/:owner/:repo/labels/:name\r\n```\r\nhttps://developer.github.com/v3/issues/labels/#update-a-label\r\n\r\n### Deleting\r\n\r\n```\r\nDELETE /repos/:owner/:repo/labels/:name\r\n```\r\nhttps://developer.github.com/v3/issues/labels/#delete-a-label"}}, {"doc": {"_id": 1348, "title": "Added nested teams and parent (address issue#1337)", "content": "Address [issue#1337](https://github.com/PyGithub/PyGithub/issues/1337)\r\n\r\nExample usage:\r\n```python\r\n>>> org = gh.get_organization('testorggshefer')\r\n>>> teams = list(org.get_teams())\r\n>>> teams\r\n[Team(name=\"a\", id=3593732), Team(name=\"aa\", id=3593733), Team(name=\"aaa\", id=3593746), Team(name=\"ab\", id=3593734)]\r\n>>> nested_teams = list(teams[0].get_teams())\r\n>>> nested_teams\r\n[Team(name=\"aa\", id=3593733), Team(name=\"ab\", id=3593734)]\r\n>>> nested_teams[0].parent\r\nTeam(name=\"a\", id=3593732)\r\n```"}}, {"doc": {"_id": 1347, "title": "Add configuration for Read the Docs", "content": "Read the Docs defaults to using Python 2 to build the documentation, so\r\nadd a configuration file so we use a supported (upstream and by us)\r\nversion.\r\n\r\nFixes #1341"}}, {"doc": {"_id": 1346, "title": "Fix all but one sphinx warnings", "content": "To hopefully correct our doc build, tidy up some of the warnings that\r\nsphinx complains about. The one remaining one is legitimate."}}, {"doc": {"_id": 1345, "title": "Readthedocs from githubobjects is empty", "content": "I've tried to read the documentation [here](https://pygithub.readthedocs.io/en/latest/github_objects/Authorization.html) but it does not show anything (I've used this as an example but it actually does not show anything for any pages). \r\n\r\nAfter clicking on the [edit on github](https://github.com/PyGithub/PyGithub/blob/master/doc/github_objects/Authorization.rst) link I've got redirected to GitHub but it shows a 404. \r\n\r\nCan you please take a look on that?\r\nThanks a lot. "}}, {"doc": {"_id": 1344, "title": "doc: example of Pull Request creation", "content": ""}}, {"doc": {"_id": 1343, "title": "How do I download a file?", "content": "I am trying to download a file and so far have reached here, also looked at https://github.com/PyGithub/PyGithub/issues/661\r\n\r\nI have reached here so far.\r\n\r\n```python\r\n    repo = client.get_repo(GIT_REPO)\r\n    contents = repo.get_contents(file_path, ref=GIT_BRANCH)\r\n    print (contents)    # <-- ContentFile(path=\"clusters/poc2/test.txt\")\r\n    file_content = repo.get_contents(urllib.parse.quote(contents.path), ref=GIT_BRANCH)\r\n    print (file_content)   # <-- ContentFile(path=\"clusters/poc2/test.txt\")\r\n```\r\n\r\nI can use GitAPI to download a file, but just trying out my hands with this package :)\r\n"}}, {"doc": {"_id": 1342, "title": "Add get_review_comments to PullRequestReview", "content": "I tried adding a test for this, and frankly understood you guys will do it much faster than me... It seems quite simple if you know exactly what to put in the txt file.\r\n\r\nWould appreciate if you can merge this and publish a new version, thanks. "}}, {"doc": {"_id": 1341, "title": "Github class documentation (Docs \u00bb Reference \u00bb Main class: Github) on readthedocs is empty", "content": "When trying to go back to the main class reference documentation (automatically generated, I guess) on [Read the Docs][1], I found it **empty**. \r\n\r\nI remember having it documentation of methods, like for example `save` and `load` - which now cannot be found anywhere except in Changelog.\r\n\r\n[Docs \u00bb Reference \u00bb Main class: Github][2]\r\n\r\n[1]: https://pygithub.readthedocs.io/\r\n[2]: https://pygithub.readthedocs.io/en/latest/github.html"}}, {"doc": {"_id": 1340, "title": "Enterprise github authentication is not working from latest releases", "content": "Hi, Enterprise github authentication is not working since PyGithub==1.40. I am able to do authentication from PyGithub==1.39. \r\n\r\n# How to re-produce\r\nInstall latest PyGithub\r\n```\r\npip install PyGithub\r\n```\r\n\r\n## Python code \r\nfrom github import Github\r\ng = Github(base_url=\"https://{hostname}/api/v3\", login_or_token=\"access_token\")\r\ng.get_organization('xxxxxx'))\r\n\r\nand error is \r\n```\r\ngithub.GithubException.BadCredentialsException: 401 {'message': 'Bad credentials', 'documentation_url': 'https://developer.github.com/enterprise/2.18/v3'}\r\n```\r\n\r\n"}}, {"doc": {"_id": 1339, "title": "Fix org dismissal restrictions", "content": "Addresses https://github.com/PyGithub/PyGithub/issues/1335"}}, {"doc": {"_id": 1338, "title": "add endpoint for \"transfer repo\"", "content": "To transfer repo from one owner to another one needs to call /repos/:owner/:repo/transfer as per https://developer.github.com/v3/repos/#transfer-a-repository . This PR aims to add that endpoint to API."}}, {"doc": {"_id": 1337, "title": "Add support for listing child teams", "content": "There is currently no way to retrieve a list of child teams (nested teams). \r\n\r\nThis is possible to do in the REST API and in go-github. https://github.com/google/go-github/blob/40fcc261cf8cf4e4fb03b63f8fbfa13949119590/github/teams.go#L222\r\n\r\n**Sources**\r\n- https://developer.github.com/enterprise/2.17/v3/teams/#list-child-teams\r\n- https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/about-teams#nested-teams\r\n\r\n"}}, {"doc": {"_id": 1336, "title": "cannot create a correct release from tag when using create_git_tag_and_release", "content": "There is an issue when using create_git_tag_and_release function to create a release in Repository.py.\r\n\r\n`   def create_git_tag_and_release(\r\n        self,\r\n        tag,\r\n        tag_message,\r\n        release_name,\r\n        release_message,\r\n        object,\r\n        type,\r\n        tagger=github.GithubObject.NotSet,\r\n        draft=False,\r\n        prerelease=False,\r\n    ):\r\n        self.create_git_tag(tag, tag_message, object, type, tagger)\r\n        return self.create_git_release(\r\n            tag, release_name, release_message, draft, prerelease\r\n        )`\r\n\r\nThe code cannot create a correct commit id from the created tag. please help to fix it. thanks."}}, {"doc": {"_id": 1335, "title": "Dismissal Restrictions Enabled When no Users/Teams Provided", "content": "Branch protection for organization repos allow for the inclusion of dismissal restrictions for who should be able to dismiss reviews. To disable this feature, you must pass an empty object when editing branch protection. The current function `edit_protection` in `Branch.py` excludes the field if no users or teams are provided, which is the same as setting both to an empty list. This has the effect of limiting who can dismiss a review to admin users.\r\n\r\nUnfortunately, the fix is not as simple as including the field with an empty dict when neither users nor teams are provided, as this causes a validation error when used to edit branch protection for user owned repos.\r\n\r\n```\r\n422 {'message': 'Validation Failed', 'errors': ['Only organization repositories can have users and team restrictions'], 'documentation_url': 'https://developer.github.com/v3/repos/branches/#update-branch-protection'} \r\n```\r\n\r\nI am happy to PR a fix, but am unsure what direction the maintainers would like to go.\r\n\r\n1. Add org context to the Branch object when calling `get_branch` from a Repository object. This has the benefit of not introducing an API breaking change or additional arguments to `edit_protection`.\r\n\r\n2. Add an option to the `edit_protection` function that allows the user to specify whether it is a branch or an org repo. This will require a default that will either need to be defaulted to true or false. Default of user repo would maintain current behavior and leave org repos misconfigured. Default to org repo would cause validation errors for user repos, thus introducing an API breaking change.\r\n\r\n3. Something else.\r\n"}}, {"doc": {"_id": 1334, "title": "Repository compare function didn't work if one branch is orphan", "content": "Hello, I'm using github to extract some information from my github.\r\none of my repo have a branch which is orphan. i'm trying to compare master to this branch, to get status, but it seems will cause problems.  \r\n\r\n### Errors\r\n```\r\nTraceback (most recent call last):\r\n  File \"my_script.py\", line 102, in main\r\n    compared = repo.compare(\"master\",branch.name)\r\n  File \"/usr/local/lib/python3.6/dist-packages/github/Repository.py\", line 851, in compare\r\n    self.url + \"/compare/\" + base + \"...\" + head\r\n  File \"/usr/local/lib/python3.6/dist-packages/github/Requester.py\", line 268, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, self.__customConnection(url)))\r\n  File \"/usr/local/lib/python3.6/dist-packages/github/Requester.py\", line 279, in __check\r\n    raise self.__createException(status, responseHeaders, output)\r\ngithub.GithubException.GithubException: 404 {\"message\": \"No common ancestor between master and orphan.\", \"documentation_url\": \"https://developer.github.com/enterprise/2.18/v3/repos/commits/#co\r\nmpare-two-commits\"}\r\n```\r\n### What I did \r\nI tried serveral ways to fix this problem in my program.\r\n1. Capture it with UnknownObjectException( which is 404 error.) which will not work. (I capture it with GithubException, it works.) \r\n2. Try to make a new empty Comparison object , but it seems really hard to do it. \r\n\r\n### Questions\r\nIs there another way to do compare orphan branch with master?\r\nor a better way to handle this error? \r\ncause I need Comparison object for other usage. \r\n\r\n"}}, {"doc": {"_id": 1333, "title": "Add support for editing an issue", "content": "It seems that it is possible to create new issues, but not to edit them. I'd be useful to have https://developer.github.com/v3/issues/#edit-an-issue supported. For reference, see:\r\n\r\n- https://octokit.github.io/rest.js/#octokit-routes-issues-create\r\n- https://octokit.github.io/rest.js/#octokit-routes-issues-update\r\n- https://pygithub.readthedocs.io/en/latest/examples/Issue.html#create-issue"}}, {"doc": {"_id": 1331, "title": "Some questions regarding retrieving gists.", "content": "Hi, just discovered this library, I was wondering is there some sort of delays in the way gists appear in the API?\r\nI'm trying to obtain the gists from the past hour, the API documentation states for the param **since**: Only gists updated at or after this time are returned.\r\n\r\nMy code looks like this:\r\n```\r\nnow = datetime.datetime.now()\r\n# target is the past hour\r\ntarget = datetime.datetime(now.year, now.month, now.day, now.hour, 0, 0) - datetime.timedelta(hours=8)\r\n\r\ng = Github(GITHUB_TOKEN)\r\ngists = g.get_gists(since=target)\r\n\r\nrate_limit_remaining = g.get_rate_limit()\r\nprint('Rate: {}'.format(rate_limit_remaining))\r\nprint(\"Total Gists: {}\".format(str(gists.totalCount)))\r\n```\r\n\r\nThe output looks like this: \r\n```\r\nNow   : 2019-12-29 18:13:45.444242\r\nTarget: 2019-12-29 12:00:00\r\nRate: RateLimit(core=Rate(remaining=4969, limit=5000))\r\nTotal Gists: 0\r\n```\r\n"}}, {"doc": {"_id": 1330, "title": "Fix PyPI wheel deployment", "content": "`distributions` should be under `deploy`, not `deploy.on`\r\nhttps://docs.travis-ci.com/user/deployment/pypi/#uploading-different-distributions\r\n\r\nFixes #1321 "}}, {"doc": {"_id": 1329, "title": "Drop Python 2 support", "content": "With the Python 2 deadline fast approaching, it's time to move with the\r\ntimes and switch to Python 3 only."}}, {"doc": {"_id": 1328, "title": "Run black and isort to prepare for release", "content": "Run black and isort over github/*py and tests/*py to prepare for a new\r\nrelease."}}, {"doc": {"_id": 1327, "title": "Allow sha=None for InputGitTreeElement", "content": "InputGitTreeElement is used to build tree objects for\r\nRepository.create_git_tree(). However, the GitHub API allows passing\r\nsha=null to delete a file, which we don't allow. Extend the checking in\r\nInputGitTreeElement to also allow None, and add a test for good measure.\r\n\r\nFixes #1318"}}, {"doc": {"_id": 1326, "title": "Get list of repositories ", "content": "I need to get a list of all repositories that a specific user has access to through an access token. And then pull ssh and https URLs from each repository for cloning.\r\nBut I can't understand how i can do that with PyGithub. Will be happy for any help!"}}, {"doc": {"_id": 1325, "title": "Remove API preview parameter", "content": "The API preview flag for both MainClass and Requester was the last\r\nhard-coded custom header, and it seems to not be relevant since\r\nmid-2015. Remove it, if any users are using it, they shouldn't be. Its\r\ncode path was also entirely untested."}}, {"doc": {"_id": 1324, "title": "Update link to GitHub Enterprise in README", "content": "Update the link to GitHub Enterprise API v3 in README so that it always redirects to the up-to-date version"}}, {"doc": {"_id": 1323, "title": "Last Python 2.7 release", "content": "@sfdye I *think* we're in a good place to tag a release in the next few days for a release, and announce in the changes that it will be the last 2.7 release. We can even branch it at that commit if you wish. I also have a plan to skip ahead a tiny bit and use version 1.50, what do you think?"}}, {"doc": {"_id": 1322, "title": "Cleanup travis config", "content": "Xenial has been the default distribution since May, 2019, so tidy up the\r\ntest matrix to no longer specify it. Furthermore, due to not quoting the\r\ndistributions in the deploy config, we did not ship wheels on pypi.\r\n\r\nFixes #1321"}}, {"doc": {"_id": 1321, "title": "Publish sdist and bdist wheel", "content": "The benefits of wheels are well documented. See: https://pythonwheels.com/\r\nThis package is pure Python and publishing it as both source and as a wheel is simple.\r\n\r\nIt looks like there is config for Travis to upload wheels, but it doesn't appear to be happening for some reason. Is this something that we can fix or you'd like assistance in fixing?"}}, {"doc": {"_id": 1320, "title": "create_fork fails with UnknownObjectException", "content": "OS: Ubuntu 19.10\r\npython3-github version 1.40-1\r\n\r\nI'd like to fork a repo. Here's my code:\r\n\r\n```python\r\n#!/usr/bin/env python3\r\nimport github\r\ntoken = 'my token removed for privacy'\r\ngh = github.Github(token)\r\nsrc_repo = gh.get_user('linuxgurugamer').get_repo('abcors')\r\ngh.get_user().create_fork(src_repo)\r\n```\r\n\r\nException:\r\n\r\n```\r\n$ ./test-gh-mk-fork.py \r\nTraceback (most recent call last):\r\n  File \"./test-gh-mk-fork.py\", line 9, in <module>\r\n    gh.get_user().create_fork(src_repo)\r\n  File \"/usr/lib/python3/dist-packages/github/AuthenticatedUser.py\", line 469, in create_fork\r\n    \"/repos/\" + repo.owner.login + \"/\" + repo.name + \"/forks\"\r\n  File \"/usr/lib/python3/dist-packages/github/Requester.py\", line 260, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, self.__customConnection(url)))\r\n  File \"/usr/lib/python3/dist-packages/github/Requester.py\", line 271, in __check\r\n    raise self.__createException(status, responseHeaders, output)\r\ngithub.GithubException.UnknownObjectException: 404 {'message': 'Not Found', 'documentation_url': 'https://developer.github.com/v3/repos/forks/#create-a-fork'}\r\n```\r\n\r\nI don't understand what this is telling me. Is there something wrong with the above code?"}}, {"doc": {"_id": 1319, "title": "how to handle the rate limit error? ", "content": "We are getting this error a lot: \r\n\r\n```\r\nGithubException: 403 {u'documentation_url': u'https://developer.github.com/v3/#rate-limiting', u'message': u'API rate limit exceeded for user.'}\r\n```\r\n\r\nAccording to their documentation on https://developer.github.com/v3/#rate-limiting, they send the `X-RateLimit-Reset` header in the response from which we can figure out when to make the api call again. Is it possible to get the value of that header in PyGithub? If not, how much is the minimum time we should wait before making the api call again? "}}, {"doc": {"_id": 1318, "title": "InputGitTreeElement should allow passing \"null\" for sha", "content": "Github's [Tree creation api](https://developer.github.com/v3/git/trees/#create-a-tree) allows us to pass `sha = null` to indicate that the specified blob needs to be deleted.\r\n\r\nHowever, I don't have a way to pass this info to my `InputGitTreeElement`. I can either give it a str or a `github.GithubObject.NotSet`. This means I have no way of deleting files from a tree using PyGithub (I'd like to delete multiple files in a single commit so tree creation is the ideal choice for me).\r\n\r\nThe current design is to only pass the `sha` if it is actually set:\r\nhttps://github.com/PyGithub/PyGithub/blob/540a085001/github/InputGitTreeElement.py#L81\r\n\r\nI can understand that passing a `None` goes against the design. I think something like `github.GithubObject.Null` could be introduced to explicitly say that this field is `null`. It can be used everywhere the GH API accepts a null value.\r\n\r\nExample\r\n```python\r\nnew_tree = repo.create_git_tree(\r\n    [\r\n        InputGitTreeElement(\r\n            path=\"my/dir/my_file.txt\", mode=\"100644\", type=\"blob\", sha=github.GithubObject.Null\r\n        ),\r\n   ],\r\n    base_tree=head_commit.tree\r\n)\r\n```\r\nThis will delete `my/dir/my_file.txt`\r\n\r\n---\r\n\r\nMy current workaround is to directly hit the api to create tree (using requests, setting `sha=None`), get the tree sha & use it with pygithub for my remaining workflow (committing, etc).\r\n\r\nPlease let me know in case I misunderstood some aspect or if anything needs to be elaborated upon."}}, {"doc": {"_id": 1317, "title": "Add support for update branch ", "content": "https://developer.github.com/changes/2019-05-29-update-branch-api/"}}, {"doc": {"_id": 1316, "title": "Referencing github.Issue.Issue pull_request forces extra API call to GitHub ", "content": "When using the search_issues API a PaginatedList of Issues is returned. When you iterate through the list and try to check whether the issue is a pull request or not you test the Issue.pull_request field for Null test. \r\n\r\nProblem is that if the Issue item is not a PR, this field has not been \"completed\" so the library makes an API call to GitHub to grab the individual issue being processed causing an unnecessary API call (and using up your rate limits). We already have all the issue data from the search. But this time when the object is updated with the issue data, object is considered \"completed\".\r\n\r\nIf the issue object actually is a PR this field will have already been \"completed\" so no extra API call is performed.\r\n\r\nAll the fields in the Issue object should have been considered \"completed\" when building the PaginatedList from the search_issues.\r\n\r\n\r\n\r\n"}}, {"doc": {"_id": 1315, "title": "Refactor Logging tests", "content": "To stop skipping logging tests on Python 3, refactor them to mock out\r\nthe logger and check arguments directly, rather than naively comparing\r\nstrings. Allow a logger to be injected into Requester for this."}}, {"doc": {"_id": 1314, "title": "Expose adding custom headers", "content": "I want to add a timezone header to the requests going out of PyGithub so GitHub returns datetime values with the correct timezone. I don't see a way to modifying or extending the headers being sent to github.\r\n\r\nhttps://developer.github.com/v3/#using-the-time-zone-header"}}, {"doc": {"_id": 1313, "title": "Add tox", "content": ""}}, {"doc": {"_id": 1312, "title": "ProjectCard should have the move action?", "content": "\r\nHow can one move a project card with PyGithub.  It seems like the moves action is not implemented.  Or am I missing something?  I need to be able to move a card from one column to another."}}, {"doc": {"_id": 1311, "title": "Need repo.get_project(id)", "content": "Looks like the only way to get a project is to get all the projects from a repo and then find the right one from that.  If I know the id before - it would be nice to get the project from the repo by id."}}, {"doc": {"_id": 1310, "title": "Create a ProjectCard with an issue", "content": "I see no reference to issues in the ProjectCard API and no reference to ProjectCards in Issue object.  How do I create a card that represents an issue via this API?"}}, {"doc": {"_id": 1309, "title": "search_issues() result has totalCount maxed out to 1000", "content": "The paginated list returned from a search_issues() will report a totalCount that maxes out to 1000 when a search query results in more than 1000 items. The totalCount() method in PaginatedList() will get headers and data from result of a requester.requestJsonAndCheck() using the first URL. The logic then tests to see if 'link' is not in headers which in my case there is a 'link' so it falls to the else side and parses the lastUrl line for 'page' which is 1000.\r\n\r\nProblem though is that in my search, the original 'data' structure has a valid 'total_count' field of 3041 so I'm not sure why the logic tries to derive something from the lastUrl which is generating an incorrect value?\r\n\r\nAnd if I iterate through the PaginatedList returned I count only 1020 items so I'm not able to iterate through all 3041 items. Note that I put rate limiting code in the iteration loop to sleep checking on get_rate_limit().search.remaining to go nonzero.\r\n"}}, {"doc": {"_id": 1308, "title": "SEARCH_COMMITS() not working for multiple attribute", "content": "Hi\r\nfunction call 1 and 2 are working fine but 3 failing.\r\ncan you please help\r\n\r\n1)github_auth.search_commits(\"author:nvulli\")\r\n2)github_auth.search_commits(\"author-date:<2019-08-26\")\r\n3)github_auth.search_commits(\"author:nvulli+author-date:<2019-08-26\")"}}, {"doc": {"_id": 1307, "title": "Fix class used returning pull request comments", "content": "When trying to pull in pull request comments I noticed that it was returning `IssueComment`s instead of `PullRequestComment`s so this just switched to use the proper type."}}, {"doc": {"_id": 1306, "title": "Support for create_fork", "content": "http://developer.github.com/v3/repos/forks\r\n\r\nCloses #1305"}}, {"doc": {"_id": 1305, "title": "Support for create_fork in http://developer.github.com/v3/repos/forks", "content": "According to http://developer.github.com/v3/repos/forks\r\n\r\nYou can create a fork via a POST to the repositories /forks URL however this is not supported via PyGithub yet."}}, {"doc": {"_id": 1304, "title": "Create multiple files at once.", "content": "A simple method to create/update multiple files at once. "}}, {"doc": {"_id": 1303, "title": "Adopt black as code formatter", "content": "This PR proposes to use [black](https://github.com/psf/black) as the code formatter. \r\n\r\n- [x] Apply `black` to whole code base\r\n- [x] Apply `isort` to whole code base\r\n- [x] Make flake8 compatible with black\r\n- [ ] Update docs\r\n- [ ] Update PR template\r\n- [ ] Enforce black on CI\r\n- [ ] Enforce isort on CI\r\n- [ ] Add pre-commit \r\n- [x] Add .ignore-rev-files"}}, {"doc": {"_id": 1302, "title": "Support github timeline events (GH-422).", "content": "Adds support for retrieval of Github timeline events (GH-422).\r\n\r\nUsage example:\r\n\r\n```python\r\nissue = repo.get_issue(28)\r\nevents = issue.get_timeline()\r\nfor event in events:\r\n    print(f'Event: {event}')\r\n```\r\n\r\nThe class doesn't match the output exactly as shown on the api site because the output from the call/events doesn't. This can be seen in the text file used for testing. This can be verified using the following.\r\n\r\n```bash\r\ncurl -i https://[REPLACE WITH GH TOKEN]@api.github.com/repositories/3544490/issues/28/timeline -H\"Accept:application/vnd.github.mockingbird-preview\"\r\n```\r\n\r\nSigned-off-by: Nick Campbell <nicholas.j.campbell@gmail.com>"}}, {"doc": {"_id": 1301, "title": "Use Repository.get_contents() in tests", "content": "Two tests were calling Repository.get_dir_contents() which is\r\ndeprecated. To stop the warnings, change the call sites."}}, {"doc": {"_id": 1300, "title": "Allow GithubObject.update() to be passed headers", "content": "SourceImport.update() is really GithubObject.update(), which just calls\r\nGET on the object's URL. Refetching a source import requires an\r\nadditional header, so change GithubObject.update() to pass any it is\r\ngiven, and add a test for SourceImport.update()\r\n\r\nFixes #1297"}}, {"doc": {"_id": 1299, "title": "Support for repository dispatch event", "content": "Preview feature useful for triggering github actions.\r\n\r\nPOST /repos/:owner/:repo/dispatches\r\nhttps://developer.github.com/v3/repos/#create-a-repository-dispatch-event\r\n"}}, {"doc": {"_id": 1298, "title": "Support all features of SourceImport", "content": "When doing a source import, there are a number of additional operations available once the import has been started. It would be nice if support for these could be implemented. For me personally, mapping authors is the most needed, but it would also be useful to support getting large files, and being able to cancel an import.\r\n"}}, {"doc": {"_id": 1297, "title": "Support updating SourceImport to get progress", "content": "When creating a SourceImport, the object returned has a `update` method, but calling it fails because of not setting the correct headers to enable the preview feature. It's useful to update the object, to get the progress of the import in case of a large source repository.\r\n\r\n```\r\n>>> u\r\nAuthenticatedUser(login=\"mortenlj\")\r\n>>> r = u.create_repo(\"test-repo\", \"repo to test source import from API\", private=True, has_issues=False, has_wiki=False, has_downloads=False, has_projects=False)\r\n>>> si = r.create_source_import(\"hg\", \"https://url.to.repo\", \"mortenlj\", \"token\")\r\n>>> si\r\nSourceImport(vcs_url=\"https://url.to.repo\", url=\"https://api.github.com/repos/mortenlj/test-repo/import\", status=\"importing\", repository_url=\"https://api.github.com/repos/mortenlj/test-repo\")\r\n>>> si.update()\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/mortenlj/.virtualenvs/fb49c46198b4854/lib/python3.6/site-packages/github/GithubObject.py\", line 301, in update\r\n    headers, data = self._requester._Requester__check(status, responseHeaders, output)\r\n  File \"/home/mortenlj/.virtualenvs/fb49c46198b4854/lib/python3.6/site-packages/github/Requester.py\", line 279, in __check\r\n    raise self.__createException(status, responseHeaders, output)\r\ngithub.GithubException.GithubException: 415 {\"message\": \"If you would like to help us test the Source Import API during its preview period, you must specify a custom media type in the 'Accept' header. Please see the docs for full details.\", \"documentation_url\": \"https://developer.github.com/v3/migrations/source_imports/#get-import-progress\"}\r\n```\r\n"}}, {"doc": {"_id": 1296, "title": "Correct URL for assignees on PRs", "content": "The URL that was used for POST/DELETE when adding and removing\r\nassignees was the PR itself, when it should be the issue_url.\r\n\r\nFixes #1294"}}, {"doc": {"_id": 1295, "title": "closed event doesn't populate commit_id", "content": "The documentation on events notes that the close event will populate the commit_id field if the issue was closed by a PR using the \"closes / fixes #NN\" syntax. I have not seen this to be true and am now wondering what the linkage is from an issue that allows the GitHub UI to display \"Fixed by #NN\" on the closed status line?\r\n\r\nhttps://developer.github.com/v3/issues/events/\r\n"}}, {"doc": {"_id": 1294, "title": "pr.add_to_assignees doesn't POST to the correct url", "content": "Using latest PyGithub version (`^1.44`) the POST url that gets used when doing:\r\n```py\r\ngithub.get_repo('repo_name').get_pulls()[0].add_to_assignees('pgilad')\r\n```\r\n\r\nis `POST /repos/:owner/:repo/pulls/:number/assignees` instead of `POST /repos/:owner/:repo/issues/:number/assignees` which ends up with Github responding with 404\r\n\r\nA possible temp workaround is to do `.as_issue().add_to_assignees('pgilad')` but then the documentation is wrong and needs to be updated. This should be incorporated into both `pr.add_to_assignees` and `pr.remove_from_assignees`"}}, {"doc": {"_id": 1293, "title": "Support for \"Autolink References\" (aka key_links)", "content": "## Story\r\nAs a user of this fine library, I'd like to be able to conduct CRUD operations on the new _Autolink References_ feature, [introduced 2019-10-14](https://github.blog/2019-10-14-introducing-autolink-references/). This would allow for creating automation, such as a [probot](https://github.com/probot) app for managing them.\r\n\r\nUnfortunately though, there is no real API target yet and only works through `github.com` -- there is not even a [preview](https://developer.github.com/v3/previews/) for it. Perhaps given that, this feature request should be considered void until they do.\r\n\r\n## Details\r\nUsing browser dev tools, we can see what the requests look like. Below are the observations I made.\r\n\r\n### Check (POST) `/:owner/:repo/settings/key_links/check`\r\nMultipart Form Fields:\r\n- `key_link[key_prefix]`: `JIRAPROJECTA-`\r\n- `key_link[url_template]`: `https://jira.pygithub.com/browse/JIRAPROJECTA-<num>`\r\n\r\n### Create (POST) `/:owner/:repo/settings/key_links/new`\r\nForm fields:\r\n- `utf8`: `\u2713` _No idea what this is about..._\r\n- `authenticity_token`: _REDACTED (string, base64 encoded binary string)_\r\n- `timestamp`: _REDACTED (long, unix epoch of request with millis)_\r\n- `timestamp_secret`: _REDACTED (string, 64 character hexadecimal)_\r\n- `key_link[key_prefix]`: `JIRAPROJECTA-`\r\n- `key_link[url_template]`: `https://jira.pygithub.com/browse/JIRAPROJECTA-<num>`\r\n\r\n### Delete (POST) `/:owner/:repo/settings/key_links/<key_link_id>`\r\nForm fields:\r\n- `_method`: `delete`\r\n- `authenticity_token`: _REDACTED (string, base64 encoded binary string)_\r\n\r\n### List\r\nThis one doesn't seem to have a REST-y endpoint yet and reloads the page with\r\na (GET) `/:owner/:repo/settings/key_links`."}}, {"doc": {"_id": 1292, "title": "A better way to read the get_comment comment.body", "content": "```\r\nfrom github import Github\r\n\r\ngh = Github(base_url=\"https://github.XYZ.com/api/v3\", login_or_token=\"XXXX\")\r\nrepo = gh.get_repo(\"ORG/REPO\")\r\n\r\nfor issue in repo.get_issues(state='all'):\r\n    for comment in issue.get_comments():\r\n        print(comment.body.encode(\"utf-8\"))\r\n\r\n```\r\nI ran the sample above to get all the comments from each issue. However, the output is almost unreadable because left the words like \"\\n\\r\" all over the text without a spacing or paraphrasing. \r\n\r\nPlease, do you know a better way to get the comments and its format with the sample code above? Thank you!"}}, {"doc": {"_id": 1291, "title": "Select custom media type for diff and patch formats", "content": "How to select a custom media type in header to get a response in diff or patch format (for commits, commit comparison, and pull requests as specified in [GitHub API](https://developer.github.com/v3/media/#commits-commit-comparison-and-pull-requests).\r\n\r\nMore in general: how custom media type in request header are supported in PyGithub?\r\nI've read PyGithub API, but I didn't find any solution only found some similar issues (such as #1188).\r\n\r\nThank you!"}}, {"doc": {"_id": 1290, "title": "Fix Branch's push restriction API", "content": "The current API for changing user and teams push restrictions is\r\nbrittle, and flat out incorrect when it comes to adding members. Break\r\nthe API, but replace it with one that is correct.\r\n\r\nCo-Authored-By: Jonas Maurus <jonas-github@maurus.net>"}}, {"doc": {"_id": 1289, "title": "Issue comments", "content": "Can you help me? I want to get all comments of all Github`s issues. I've read the guide here: https://buildmedia.readthedocs.org/media/pdf/pygithub/stable/pygithub.pdf \r\nFollowing the script:\r\n\r\n```\r\nfrom github import Github\r\n\r\ng = Github(base_url=\"https://github.com/api/v3\", login_or_token=\"XXX\")\r\nr = g.get_repo(\"ORG/REPO\")\r\ni = r.get_issues(state='open')\r\nc = i.get_comments()\r\n\r\nfor issue in c:\r\n    print(issue)\r\n\r\n```\r\n\r\nBut I got the following stdout:\r\n```\r\nAttributeError: 'PaginatedList' object has no attribute 'get_comments'\r\n```\r\nI expected to see every comment from each \"issue\" collected by the `for`"}}, {"doc": {"_id": 1288, "title": "Feature request : Access to Security alerts settings", "content": "I would like to read the settings of security alerts on repositories, adding a function to get these informations on a repo will be helpful.\r\n\r\nThanks for all your work, your lib is really useful"}}, {"doc": {"_id": 1287, "title": "Remove hardcoded urls of github.com", "content": "Github is also available as on-premise installation on custom servers. Then the urls differ from the standard github.com. For example for me the url is api.git.dhl.com\r\n\r\nIn this tiny PR I remove two assert statements which prevent contacting the github enterprise API with pygithub.\r\n\r\nMinimal example of what didn't work before and works with the two asserts being removed:\r\n```python\r\nfrom github import Github\r\n\r\nuser_name = ...\r\norg_name = ...\r\n\r\n# Build connection\r\ngh = Github(user_name, input(\"Password:\"), base_url=\"https://api.git.dhl.com\")\r\n\r\n# Get organisation info\r\norg = gh.get_organization(org_name)\r\n```\r\n\r\nResult before:\r\n```\r\nTraceback (most recent call last):\r\n  File \"<input>\", line 14, in <module>\r\n  File \"<input>\", line 14, in <listcomp>\r\n  File \"C:\\Users\\ckrudewi\\AppData\\Local\\Continuum\\miniconda3\\lib\\site-packages\\github\\PaginatedList.py\", line 61, in __iter__\r\n    newElements = self._grow()\r\n  File \"C:\\Users\\ckrudewi\\AppData\\Local\\Continuum\\miniconda3\\lib\\site-packages\\github\\PaginatedList.py\", line 73, in _grow\r\n    newElements = self._fetchNextPage()\r\n  File \"C:\\Users\\ckrudewi\\AppData\\Local\\Continuum\\miniconda3\\lib\\site-packages\\github\\PaginatedList.py\", line 198, in _fetchNextPage\r\n    headers=self.__headers\r\n  File \"C:\\Users\\ckrudewi\\AppData\\Local\\Continuum\\miniconda3\\lib\\site-packages\\github\\Requester.py\", line 268, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, self.__customConnection(url)))\r\n  File \"C:\\Users\\ckrudewi\\AppData\\Local\\Continuum\\miniconda3\\lib\\site-packages\\github\\Requester.py\", line 328, in requestJson\r\n    return self.__requestEncode(cnx, verb, url, parameters, headers, input, encode)\r\n  File \"C:\\Users\\ckrudewi\\AppData\\Local\\Continuum\\miniconda3\\lib\\site-packages\\github\\Requester.py\", line 372, in __requestEncode\r\n    url = self.__makeAbsoluteUrl(url)\r\n  File \"C:\\Users\\ckrudewi\\AppData\\Local\\Continuum\\miniconda3\\lib\\site-packages\\github\\Requester.py\", line 442, in __makeAbsoluteUrl\r\n    assert o.hostname in [self.__hostname, \"uploads.github.com\", \"status.github.com\"], o.hostname\r\nAssertionError: git.dhl.com\r\n```\r\n"}}, {"doc": {"_id": 1286, "title": "no documentation for http proxies", "content": "If I search the docs for \"proxy\", the only entries I find are in the changelog such as \"Added support for http_proxy.\" Cool, where, how?"}}, {"doc": {"_id": 1285, "title": "Deprecate Repository.get_dir_contents()", "content": "Repository.get_contents() and Repository.get_dir_contents() call the\r\nsame endpoint, with slightly different error handling, and with the\r\ndifference that get_dir_contents() throws an odd exception if you call\r\nit with a file. get_contents() already even handles being called for a\r\ndirectory anyway, so deprecate get_dir_contents(), and refactor the code\r\nso the tests pass.\r\n\r\nFixes #1283"}}, {"doc": {"_id": 1284, "title": "Apply some polish to manage.sh", "content": "Use set -e in manage.sh for some safety, and allow the remote to be\r\noverridden for those of us who have different setups, and switch to\r\nusing flake8 for checks like travis does."}}, {"doc": {"_id": 1283, "title": "Exception in get_dir_contents", "content": "In the latest release of PyGithub, I found the following exception thrown by get_dir_contents:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/data/tyreunom/projects/offlate/offlate/systems/github.py\", line 63, in send\r\n    sha = project.get_dir_contents(mfile, 'translation').sha\r\n  File \"/gnu/store/jgz8y4a97rys726clj8n67kiqpwwy1bf-profile/lib/python3.7/site-packages/github/Repository.py\", line 1806, in get_dir_contents\r\n    for attributes in data\r\n  File \"/gnu/store/jgz8y4a97rys726clj8n67kiqpwwy1bf-profile/lib/python3.7/site-packages/github/Repository.py\", line 1806, in <listcomp>\r\n    for attributes in data\r\nTypeError: string indices must be integers\r\n```\r\n\r\nI think the issue is that it expects to be looking for a directory, not a single file. Line 1806 has:\r\n\r\n```python\r\nreturn [\r\n  github.ContentFile.ContentFile(..., completed=(attributes[\"type\"] != \"file\"))\r\n  for attributes in data\r\n]\r\n```\r\n\r\nbut data is a dictionary when looking for a single file, so attributes is a key (a string), leading to the above exception. I can work around that issue by looking for the parent directory and looping over the results."}}, {"doc": {"_id": 1282, "title": "add page limit functionality for getting pull requests", "content": "This PR will help reduce API calls to github by allowing a user to only retrieve a specific number of pages of pull requests"}}, {"doc": {"_id": 1281, "title": "Use inclusive ordered comparison for 'parameterized' requirement", "content": "This is similar to #1262 "}}, {"doc": {"_id": 1280, "title": "Add Python 3.8 to classifiers list", "content": "Add 3.8 to the classifiers list, drop the use of 2to3, and run tests\r\nagainst 3.8."}}, {"doc": {"_id": 1279, "title": "List matching references", "content": "\r\nHi,\r\n\r\nHow could I list matching references?\r\nhttps://developer.github.com/v3/git/refs/#list-matching-references\r\n\r\nI don't see corresponding call at the PyGitHub reference:\r\nhttps://pygithub.readthedocs.io/en/latest/apis.html"}}, {"doc": {"_id": 1278, "title": "How to get complete path? Some help here", "content": "Im trying get the content in file and some info about it. \r\n\r\n```\r\nsearch = g.search_code('keyword in:file, language:csv')\r\n\r\nfor item in search:\r\n   print(item)\r\n```\r\nsome return:\r\n\r\n```\r\nContentFile(path=\"project/DATA/PBR/PBR_news.csv\")\r\nContentFile(path=\"dados.csv\")\r\n\r\n\r\n```\r\n\r\nWith this info i can't get the whole path like this example: usr/repo/folder/ \r\nSome return just bring the doc  or the path starting from folder... \r\nthere's a way to get the whole path ? "}}, {"doc": {"_id": 1277, "title": "Correct API for NamedUser.get_organization_membership", "content": "NamedUser.get_organization_membership() was calling the API method for\r\nfetching the currently authenticated user only, which is incorrect. The\r\nmethod was not tested directly, so add tests.  Furthermore, Membership\r\nhad some errors which had slipped through review, so correct them.\r\n\r\nSadly, this is an API break, since passing the organization as an int\r\nmade no sense in this case.\r\n\r\nFixes #1276"}}, {"doc": {"_id": 1276, "title": "get_organization_membership is using the wrong api", "content": "I'm trying to get the membership of a list of users in an org, and the methods for NamedUser and Authenticated user is using the [get-your-organization-membership](https://developer.github.com/v3/orgs/members/#get-your-organization-membership) api but NamedUser should be using the [get-organization-membership](https://developer.github.com/v3/orgs/members/#get-organization-membership) api"}}, {"doc": {"_id": 1275, "title": "Create repositories", "content": "I wanted to create user repositories with the package. I added a method in `Github` class in MainClass.py that sends a POST request to /user/repos (following the spec http://developer.github.com/v3/repos#create) and returns a new `Repository` instance based on the response from the server. Added two tests for creating a public and a private repository for the user."}}, {"doc": {"_id": 1274, "title": "Correct header check for 2FA required", "content": "Currently, we were checking for an uppercase header if GitHub was\r\nrefusing our authentication because we didn't provide a token. Requests\r\nreturns headers with all lowercase. Fix the const, and add a test for\r\ngood measure.\r\n\r\nFixes #1273"}}, {"doc": {"_id": 1273, "title": "TwoFactorException is not raised as expected", "content": "### Description\r\n\r\nIf a user has 2FA enabled, when she initialises a `Github` instance with her password instead of her personal access token and then tries to perform some actions like `get_repo`, `GithubException` rather than `TwoFactorException` will be raised.\r\n\r\n### How to reproduce\r\n\r\n```python\r\n>>> from github import Github\r\n>>> name = 'username'  # username of someone with 2FA enabled\r\n>>> password = 'password'  # password instead of personal access token\r\n>>> gh = Github(name, password)\r\n>>> repo = gh.get_repo('span-example')\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/changhc/Desktop/projects/span/venv/lib/python3.7/site-packages/github/MainClass.py\", line 294, in get_repo\r\n    \"%s%s\" % (url_base, full_name_or_id)\r\n  File \"/home/changhc/Desktop/projects/span/venv/lib/python3.7/site-packages/github/Requester.py\", line 276, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, self.__customConnection(url)))\r\n  File \"/home/changhc/Desktop/projects/span/venv/lib/python3.7/site-packages/github/Requester.py\", line 287, in __check\r\n    raise self.__createException(status, responseHeaders, output)\r\ngithub.GithubException.GithubException: 401 {'message': 'Must specify two-factor authentication OTP code.', 'documentation_url': 'https://developer.github.com/v3/auth#working-with-two-factor-authentication'}\r\n```\r\n\r\n### Root cause\r\n\r\nIn the error handler of `Requester`, it checks whether a certain key is in the response headers. For 2FA-related error, it looks for `Consts.headerOTP`. The `requests` library converts all header keys to lower case, but `Consts.headerOTP` still keeps capital letters. Therefore, in the error handler this case cannot be captured as expected."}}, {"doc": {"_id": 1272, "title": "Iterating over PaginatedList of repositories creates too many API requests", "content": "I am trying to iterate over all (until I reach the rate limit) public repos on GitHub. When I execute the following code, my rate limit will decrease by one for each repository I iterate over. If I query the API manually using curl, I get multiple repositories in the result, and the Link info in the header correctly shows where to continue querying to get the next page of results. Am I doing something wrong? I would expect it to only call the API again after I iterated over 100 repositories.\r\n```\r\ng = Github(\"username\", \"password\", per_page=100)  # Maximum per page seems to be 100\r\nrepos = g.get_repos()\r\n\r\nfor repo in repos:\r\n    rate_limit_remaining = g.rate_limiting[0]\r\n```"}}, {"doc": {"_id": 1271, "title": "Use replay framework for Issue142 test", "content": "I was looking at #1269, wondered if this issue was still present, so tried it out. Looks like this test can be run successfully using the replay framework."}}, {"doc": {"_id": 1270, "title": "add GithubObject.last_modified_at datetime", "content": ""}}, {"doc": {"_id": 1269, "title": "Skip Issue142 test if no connection to GitHub", "content": "The Issue142 test requires actual GitHub due to type checking, but some\r\ntest runners are forbidden from network access. Check for this and skip\r\nthe test if that is the case, so they do not have to carry patches."}}, {"doc": {"_id": 1268, "title": "Check if the version is empty in manage.sh", "content": "If someone accidentally hits Enter when prompted for the new version, the\r\nscript merrily creates a tag called 'v', which is bothersome to tidy up.\r\nCheck if the variable is empty and error if it is."}}, {"doc": {"_id": 1267, "title": "Encode content for {create,update}_file", "content": "If a byte object (for Python 3) was passed into either create_file or\r\nupdate_file, it was attempted to be co-erced into a bytearray, which\r\nfailed. Check for encoded content before we encode it into bytes and\r\nthen base64 encode it.\r\n\r\nFixes #1266"}}, {"doc": {"_id": 1266, "title": "After v 1.44, TypeError: encoding or errors without a string argument", "content": "I have a job that runs regularly... it threw this error today- `TypeError: encoding or errors without a string argument`. So I pinned the version to v1.43.8 and it works fine. \r\n![Screen Shot 2019-10-21 at 12 46 30 PM](https://user-images.githubusercontent.com/45208412/67234786-5c305600-f40b-11e9-89d9-40cd9da0751e.png)\r\nI wonder if anyone else has experienced the same issue.\r\n"}}, {"doc": {"_id": 1265, "title": "Sync httpretty version requirement with setup.py", "content": "Quick fix based on comment left in #1254."}}, {"doc": {"_id": 1264, "title": "How to deal with token expiration?", "content": "This is both a question and a report of what I think is a design flaw. I'm trying to use PyGithub in a webapp that handles Github webhooks. I've set up a Github App for it, and am able to authenticate and perform the actions I want. However, now it is time to deal with token expiration, as Github tokens only live for an hour.\r\n\r\nThe first hurdle is that the `expires_at` property of an `InstallationAuthorization()` returns a naive datetime. Trying to assert the token is still valid is therefor problematic:\r\n```python\r\n>>> import os\r\n... import codecs\r\n... from github import Github, GithubIntegration\r\n... decoder = codecs.getdecoder(\"unicode_escape\")\r\n... PRIVATE_KEY = decoder(os.environ[\"GITHUB_APP_PRIVATE_KEY\"].encode())[0]\r\n... APP_ID = 44107\r\n... INSTALLATION_ID = 3289834\r\n... integration = GithubIntegration(APP_ID, PRIVATE_KEY)\r\n... integration_accessor = integration.get_access_token(INSTALLATION_ID)\r\n\r\n>>> integration_accessor\r\nInstallationAuthorization(expires_at=2019-10-20 09:36:48)\r\n\r\n>>> import datetime\r\n... now = datetime.datetime.now().astimezone()\r\n\r\n>>> integration_accessor.expires_at > now\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nTypeError: can't compare offset-naive and offset-aware datetimes\r\n```\r\n\r\nIf I *naively* try to do this, the token is \"expired\" the moment I get it:\r\n```python\r\n>>> import time\r\n... integration_accessor = integration.get_access_token(INSTALLATION_ID)\r\n... now = datetime.datetime.now()\r\n... print('valid?', now < integration_accessor.expires_at)\r\n... print(now)\r\n... print(integration_accessor.expires_at)\r\nvalid? False\r\n2019-10-20 09:56:53.049639\r\n2019-10-20 09:56:53\r\n\r\n>>> now.astimezone().tzinfo\r\ndatetime.timezone(datetime.timedelta(0, 3600), 'WEST')\r\n```\r\nThat is of course because I'm in UTC+1, but would be the case for everyone in later-than-UTC timezones. So I really think `expires_at` should be a timezone-aware datetime object.\r\n\r\nBut in general, how do people handle this? Any wrapper code to check a token for being still valid out there? Or a re-auth & retry loop?"}}, {"doc": {"_id": 1263, "title": "Fix change log format", "content": "Missing empty lines cause it to render incorrectly."}}, {"doc": {"_id": 1262, "title": "Bump httpretty to be a greater or equal to", "content": "Some distributions do not include httpretty 0.9.6 as is required by\r\nsetup.py. Set it to >= rather than ==."}}, {"doc": {"_id": 1261, "title": "add delete project and projectColumn", "content": "* delete project \r\n    Project.delete()\r\n* delete ProjectColumn\r\n    Project.delete_column(col_id)  or\r\n    ProjectColumn.delete()"}}, {"doc": {"_id": 1260, "title": "Add a Branch.delete() method", "content": "If you're iterating through a list of branches by name, it would be handy to be able to delete them directly:\r\n\r\n```python\r\n# Example 1\r\nrepo.get_branch('feature-branch-1').delete()\r\n\r\n# Example 2\r\nfor branch in repo.get_branches():\r\n    if some_condition:\r\n        branch.delete()\r\n```\r\n\r\nI think the only way currently available to delete branches is to call `repo.get_git_ref()` to get a reference to the branch, and then call `.delete()` on the returned object. What I'm proposing would complement this method."}}, {"doc": {"_id": 1259, "title": "Raise branch not found exception as unknown object", "content": "fixes #1242 \r\n\r\nBefore:\r\n```python\r\nPython 3.6.5 (default, Apr 25 2018, 14:26:36) \r\n[GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.39.2)] on darwin\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> from github import Github\r\n>>> gh = Github()\r\n>>> repo = gh.get_repo(\"PyGithub/PyGithub\")\r\n>>> repo.get_branch(branch=\"notfound\")\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/Users/qh812/work/role_expt/venv/lib/python3.6/site-packages/github/Repository.py\", line 1383, in get_branch\r\n    self.url + \"/branches/\" + branch\r\n  File \"/Users/qh812/work/role_expt/venv/lib/python3.6/site-packages/github/Requester.py\", line 268, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, self.__customConnection(url)))\r\n  File \"/Users/qh812/work/role_expt/venv/lib/python3.6/site-packages/github/Requester.py\", line 279, in __check\r\n    raise self.__createException(status, responseHeaders, output)\r\ngithub.GithubException.GithubException: 404 {\"message\": \"Branch not found\", \"documentation_url\": \"https://developer.github.com/v3/repos/branches/#get-branch\"}\r\n```\r\n\r\nAfter:\r\n```python\r\n>>> repo.get_branch(branch=\"notfound\")\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/Users/qh812/work/role_expt/venv/lib/python3.6/site-packages/github/Repository.py\", line 1383, in get_branch\r\n    self.url + \"/branches/\" + branch\r\n  File \"/Users/qh812/work/role_expt/venv/lib/python3.6/site-packages/github/Requester.py\", line 268, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, self.__customConnection(url)))\r\n  File \"/Users/qh812/work/role_expt/venv/lib/python3.6/site-packages/github/Requester.py\", line 279, in __check\r\n    raise self.__createException(status, responseHeaders, output)\r\ngithub.GithubException.UnknownObjectException: 404 {\"message\": \"Branch not found\", \"documentation_url\": \"https://developer.github.com/v3/repos/branches/#get-branch\"}\r\n```\r\n\r\nThe new behaviour is more consistent with other 404 API exceptions, like `get_issue`.\r\n```python\r\n>>> repo.get_issue(number=8888)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/Users/qh812/work/role_expt/venv/lib/python3.6/site-packages/github/Repository.py\", line 1996, in get_issue\r\n    self.url + \"/issues/\" + str(number)\r\n  File \"/Users/qh812/work/role_expt/venv/lib/python3.6/site-packages/github/Requester.py\", line 268, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, self.__customConnection(url)))\r\n  File \"/Users/qh812/work/role_expt/venv/lib/python3.6/site-packages/github/Requester.py\", line 279, in __check\r\n    raise self.__createException(status, responseHeaders, output)\r\ngithub.GithubException.UnknownObjectException: 404 {\"message\": \"Not Found\", \"documentation_url\": \"https://developer.github.com/v3/issues/#get-a-single-issue\"}\r\n```"}}, {"doc": {"_id": 1258, "title": "Downloading contents of a specific folder of a branch", "content": "How can I access the directories of a branch, after getting it ?\r\nEven after \r\nb = repo.get_branch(branch=\"XYZ\") on downloading repo.get_contents(), I still get master branch contents."}}, {"doc": {"_id": 1257, "title": "Is Github class and its methods thread safe?", "content": "Is the `Github` class and its methods reliably thread safe or not? Or should I necessarily use a unique instance of the class in each thread? Would at least the latter be safe? This also needs to be addressed in the docs."}}, {"doc": {"_id": 1256, "title": "Add new issue example", "content": "Hi, greate job!\r\n\r\nThis Pull Request add close all issues example. Thanks!"}}, {"doc": {"_id": 1255, "title": "Data Services Editing", "content": "Maybe missing it or maybe not possible at this time via API but is there currently a way or path to be able to edit Data Services area to the Repository.edit command?\r\n\r\n![image](https://user-images.githubusercontent.com/18703068/66680273-c68c0e00-ec35-11e9-9b59-094453b25b88.png)\r\n\r\n![image](https://user-images.githubusercontent.com/18703068/66680304-d9064780-ec35-11e9-8b0b-e1f8a404f0ad.png)"}}, {"doc": {"_id": 1254, "title": "Handle unicode strings when recording responses (#1253)", "content": "The string handled had some muddled assumptions about binary vs. string vs. unicode data. I updated to assume unicode at all times and added test coverage. I also tried running a test with the `--record` function to validate in practice."}}, {"doc": {"_id": 1253, "title": "`RecordingConnection` string handling issues", "content": "I was working on test coverage for topic search (see #1252). When recording an example API response, the test runner got thrown off by a non-breaking space in the content:\r\n```\r\nTraceback (most recent call last):\r\n  File \"tests/Topic.py\", line 67, in testSearch\r\n    self.assertListKeyEqual(self.g.search_topics(\"python\"), attrgetter(\"name\"), expected_names)\r\n  File \"tests/Framework.py\", line 312, in assertListKeyEqual\r\n    realKeys = [key(element) for element in elements]\r\n  File \"github/PaginatedList.py\", line 61, in __iter__\r\n    newElements = self._grow()\r\n  File \"github/PaginatedList.py\", line 73, in _grow\r\n    newElements = self._fetchNextPage()\r\n  File \"github/PaginatedList.py\", line 198, in _fetchNextPage\r\n    headers=self.__headers\r\n  File \"github/Requester.py\", line 268, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, self.__customConnection(url)))\r\n  File \"github/Requester.py\", line 328, in requestJson\r\n    return self.__requestEncode(cnx, verb, url, parameters, headers, input, encode)\r\n  File \"github/Requester.py\", line 381, in __requestEncode\r\n    status, responseHeaders, output = self.__requestRaw(cnx, verb, url, requestHeaders, encoded_input)\r\n  File \"github/Requester.py\", line 405, in __requestRaw\r\n    response = cnx.getresponse()\r\n  File \"tests/Framework.py\", line 129, in getresponse\r\n    self.__writeLine(output)\r\n  File \"tests/Framework.py\", line 140, in __writeLine\r\n    self.__file.write(line + '\\n')\r\nUnicodeEncodeError: 'ascii' codec can't encode character u'\\xa0' in position 2437: ordinal not in range(128)\r\n```\r\n\r\nI haven't looked too closely at the code, but this looks related to the fact that this class treats the response body as ASCII and UTF-8 in different places.\r\n\r\nThere's another issue with the same line in Python 3. Files opened in binary mode expect to receive bytes and `'\\n'` is a string."}}, {"doc": {"_id": 1252, "title": "Expand Topic class and add test coverage", "content": "I changed the parent class of `Topic` since it doesn't come with a URL that can be used to pull any missing fields."}}, {"doc": {"_id": 1251, "title": "Specify scope of flake8 to reduce runtime", "content": "On my computer, it worked out to ~15 vs. ~30 seconds."}}, {"doc": {"_id": 1250, "title": "Stop ignoring unused imports and remove them", "content": "I noticed some unused imports, so I removed the ignore directive and did the necessary cleanup. The most changes were made to the `AllTests` module. I verified there weren't any regressions by running this suite before and after, ensuring that the same number of tests ran each time (573)."}}, {"doc": {"_id": 1249, "title": "Add support for team discussions (#1246)", "content": "This patch adds support for a feature in preview. This seemed reasonable since a number of other similar features have been added. I tested by writing a unit test with mock data that replicates the format of a real response. I also tested on a GitHub Enterprise instance and was able to access expected data.\r\n\r\nI omitted implementing the ability to get a single comment, as well as create, edit, and delete. I'm happy to go back and do this, but I wanted to get feedback on what I've done so far since this is my first PR.\r\n\r\nI omitted another feature, a preview feature inside the preview feature: reactions to discussions. The schema is totally different to the existing `github.Reaction.Reaction` class (and, IMO, kind of peculiar in comparison). I'd prefer deferring on this particular feature."}}, {"doc": {"_id": 1248, "title": "403 {'message': 'Maximum number of login attempts exceeded. Please try again later.", "content": "Hello,\r\n\r\nI am trying to incorporate this API in my code. I am trying to simply authenticate a Github object using the code from the tutorial. I have a class that looks like this:\r\n\r\nfrom github import Github\r\n\r\ntoken = \"some token\"\r\n\r\n# Github Enterprise with custom hostname\r\ng = Github(\"url\", token)\r\n\r\n# Then play with your Github objects:\r\nfor repo in g.get_user().get_repos():\r\n    print(repo.name)\r\n\r\n\r\nWhen I run this script I get the following:\r\ngithub.GithubException.GithubException: 403 {'message': 'Maximum number of login attempts exceeded. Please try again later.', 'documentation_url': 'https://developer.github.com/v3'}\r\n\r\n\r\nIs there any way to fix this? I got this exception today and I have not tried to run this since yesterday evening. I have tried making new tokens and still get the same problem. Any help would be useful. Thank you"}}, {"doc": {"_id": 1247, "title": "get_user() do not return an AuthenticatedUser", "content": "I am trying create a repo with PyGithub, and on the [docs](https://pygithub.readthedocs.io/en/latest/github_objects/AuthenticatedUser.html) of AuthenticatedUser is described _An AuthenticatedUser object can be created by calling get_user() on a Github object._ . But get_user is returning a NamedUser, not an AuthenticatedUser.\r\n\r\ncode example:\r\n```python\r\nself._login = login\r\nself._password = password\r\ng = Github(login, password)\r\ng.get_user(self._login).create_repo(\"test\")\r\n```"}}, {"doc": {"_id": 1246, "title": "Feature Request: Team Discussions", "content": "The GitHub API supports interactions with [Team Discussions](https://developer.github.com/v3/teams/discussions/). It would be helpful to add a `get_discussion` method and a `get_discussions` method to `github.Team.Team` for retrieving this content."}}, {"doc": {"_id": 1245, "title": "Add six to install_requires", "content": "dc2f2ad8 introduced a dependancy on six, and added it to requirements,\r\nbut not to setup.py, add it."}}, {"doc": {"_id": 1244, "title": "get_labels() on a Pull Request ", "content": "Similar to GH-1220. \r\n\r\nCan you please advise on how to retrieve the *labels* on 1 pull request?\r\n  \r\nYour revised documentation, April 2018,  makes change to conform to GitHub API v3 in this PR: https://github.com/PyGithub/PyGithub/pull/754/commits/8ff93f5f576dc8d4c5d6afce85c9273e5b97c73f\r\n\r\nWhat's not clear to me is how I could replace `issues` with `pulls` in the above PR.\r\n\r\nI would like an example of how to query the labels in 1 pull request (my example returns a select few).  To do so, the example could be similar to getting specific labels in open issues, like so:\r\n\r\n\r\n```\r\ngH      = Github(\"user\", \"password\")\r\nuser    = gH.get_user('<gh-user>')\r\nrepo    = user.get_repo(\"<repo-name>\")\r\npulls   = repo.get_pulls(state='all', sort='created', base='master', direction=\"desc\")[:5]\r\nissues   =  repo.get_issues(state=\"open\")  \r\n\r\nfor issue in issues:\r\n    labels = issue.labels\r\n    label = [l.name for l in labels if l.name=='P1' or l.name=='P2' or l.name=='P3']\r\n    print(label)\r\n```\r\nAlternate: In example below, I'd like to replace `issues` with `pulls`, but it doesn't work.\r\n\r\n``` \r\n           for issue in issues:\r\n                labels = issue.get_labels()\r\n                label = [l.name for l in labels if l.name=='P1' or l.name=='P2' or l.name=='P3']\r\n                print(label)\r\n```\r\n\r\nAlso, in PyGitHub's docs, `labels` is an attribute of the github.PullRequest.PullRequest class. \r\nIt's not clear whether one can pull labels on a single PR, per docs here:\r\nhttps://pygithub.readthedocs.io/en/latest/github_objects/PullRequest.html#pullrequest"}}, {"doc": {"_id": 1243, "title": "get_labels() on a Pull Request ", "content": "Similar to GH-1220. \r\n\r\nCan you please advise on how to retrieve the *labels* on 1 pull request.\r\n  \r\nI see you revised documentation this past July 2019 to conform to GitHub API v3 in this PR: \r\nhttps://github.com/PyGithub/PyGithub/pull/754/commits/8ff93f5f576dc8d4c5d6afce85c9273e5b97c73f\r\n\r\n\r\n"}}, {"doc": {"_id": 1242, "title": "Inconsistent exception when calling get_branch with non-existent branch", "content": "When [get_branch](https://github.com/PyGithub/PyGithub/blob/020fbebcaf7067812d35bb16ce55c931f0254725/github/Repository.py#L1374) is called with a non-existent branch, a general `GithubException` is raised. This behaviour is inconsistent with other APIs like `get_repo` which raises the more specific `UnknownObjectException`.\r\n\r\nThe root cause is https://github.com/PyGithub/PyGithub/blob/a0f01cf9cf5521fd034813242727de72eb52df42/github/Requester.py#L307 where the checker is looking for an exact string match but the HTTP response for `get_branch` is instead:\r\n```\r\n{'message': 'Branch not found', 'documentation_url': 'https://developer.github.com/v3/repos/branches/#get-branch'}\r\n```\r\n\r\nThis inconsistent behaviour makes user's error handling code unnecessarily complicated.\r\n\r\nI wonder if there's a good way to fix this?"}}, {"doc": {"_id": 1241, "title": "Add assignee removal/addition support to PRs", "content": "Add assignee removal/addition support to PRs\r\nFixes #1009 \r\n\r\nAdd test for new PR assignee functionality\r\n\r\nAdd record file\r\n\r\nAddressed comments on #1016 and fixed test case"}}, {"doc": {"_id": 1240, "title": "Fix 1009", "content": ""}}, {"doc": {"_id": 1239, "title": "edit_branch_protection returns 404 object not found error ", "content": "I am trying to edit the branch protection for the master branch using edit_branch_protection..\r\nThis returns object not found 404 error.. I am using github enterprise server..\r\n\r\n---> 69     branch.edit_protection(strict=True,require_code_owner_reviews= True, required_approving_review_count=2)\r\n\r\n~\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\github\\Branch.py in edit_protection(self, strict, contexts, enforce_admins, dismissal_users, dismissal_teams, dismiss_stale_reviews, require_code_owner_reviews, required_approving_review_count, user_push_restrictions, team_push_restrictions)\r\n    178             self.protection_url,\r\n    179             headers={'Accept': Consts.mediaTypeRequireMultipleApprovingReviews},\r\n--> 180             input=post_parameters\r\n    181         )\r\n    182 \r\n\r\n~\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\github\\Requester.py in requestJsonAndCheck(self, verb, url, parameters, headers, input)\r\n    274 \r\n    275     def requestJsonAndCheck(self, verb, url, parameters=None, headers=None, input=None):\r\n--> 276         return self.__check(*self.requestJson(verb, url, parameters, headers, input, self.__customConnection(url)))\r\n    277 \r\n    278     def requestMultipartAndCheck(self, verb, url, parameters=None, headers=None, input=None):\r\n\r\n~\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\github\\Requester.py in __check(self, status, responseHeaders, output)\r\n    285         output = self.__structuredFromJson(output)\r\n    286         if status >= 400:\r\n--> 287             raise self.__createException(status, responseHeaders, output)\r\n    288         return responseHeaders, output\r\n    289 \r\n\r\nUnknownObjectException: 404 {'message': 'Not Found', 'documentation_url': 'https://developer.github.com/enterprise/2.17/v3/repos/branches/#update-branch-protection'}"}}, {"doc": {"_id": 1238, "title": "edit_branch", "content": ""}}, {"doc": {"_id": 1237, "title": "Implemented user organization membership. Added test case.", "content": ""}}, {"doc": {"_id": 1236, "title": "create_repo() readme option", "content": "Hello!\r\n\r\nI was reading the docs for [create_repo() method](https://pygithub.readthedocs.io/en/latest/github_objects/Organization.html) and couldn't find an option for setting README creation. Is there any way to initialize the created repo with a README using pygithub?\r\n\r\nThank you!"}}, {"doc": {"_id": 1235, "title": "throttling/backoff for rate limits support for PyGitHub", "content": "There is no elegant way to implement throttling for github API calls through PyGitHub. The best way I can find to make sure my app doesn't hit the throttling limits is to keep checking before every call, and maintain a count of the number of calls made to the APIs, and then continuously checking if that limit is reached or not - while refreshing the rate limits periodically. It is not simple to implement a wrapper class, or apply decorators/descriptors to the calls because there various classes (like GitHub, Repository, Releases etc) that can make a call to the API endpoint. It seems implementing this feature inside PyGitHub to help throttle/ratelimit/wait calls would be the best approach IMO, since every call the the REST API can be tracked. Will such a feature be encouraged? Does it make sense to work on a pull request?"}}, {"doc": {"_id": 1234, "title": "Using Github Enterprise behind Proxy, Assertion Error for mismatched hostnames", "content": "Hello, I'm having trouble using PyGithub for a Github Enterprise. Our Github Enterprise appliance is private and we have it behind a proxy. \r\n\r\nWhen creating the Github client, I set our `base_url` to `https://git-atlassian.corp.example.com/api/v3`. I then try getting the contents of a repo.\r\n\r\n```\r\n# Successfully returns a Repository instance\r\ngithub_repo = client.get_repo('Example/repo_name')\r\n# Returns an Assertion Error, since the repo contents_url is https://git.corp.example.com/, which doesn't match the original base_url hostname\r\nfile_contents = github_repo.get_contents('/filename.py')\r\n```\r\nWe then get the following AssertionError:\r\n```\r\n    \"traceback\": \"Traceback (most recent call last):\r\n      File \\\"/var/task/handlers/lex/lexhandler.py\\\", line 130, in handler\r\n        resp = self.handle_hook(event)\r\n      File \\\"/var/task/handlers/lex/codehook.py\\\", line 62, in handle_hook\r\n        return intent.handle_intent()\r\n      File \\\"/var/task/handlers/lex/intents/baseintent.py\\\", line 467, in handle_intent\r\n        ret = self._handle_intent()\r\n      File \\\"/var/task/handlers/lex/intents/aws_ecs.py\\\", line 383, in _handle_intent\r\n        for repo in github_repos:\r\n      File \\\"/opt/python/github/PaginatedList.py\\\", line 62, in __iter__\r\n        newElements = self._grow()\r\n      File \\\"/opt/python/github/PaginatedList.py\\\", line 74, in _grow\r\n        newElements = self._fetchNextPage()\r\n      File \\\"/opt/python/github/PaginatedList.py\\\", line 199, in _fetchNextPage\r\n        headers=self.__headers\r\n      File \\\"/opt/python/github/Requester.py\\\", line 276, in requestJsonAndCheck\r\n        return self.__check(*self.requestJson(verb, url, parameters, headers, input, self.__customConnection(url)))\r\n      File \\\"/opt/python/github/Requester.py\\\", line 336, in requestJson\r\n        return self.__requestEncode(cnx, verb, url, parameters, headers, input, encode)\r\n      File \\\"/opt/python/github/Requester.py\\\", line 380, in __requestEncode\r\n        url = self.__makeAbsoluteUrl(url)\r\n      File \\\"/opt/python/github/Requester.py\\\", line 450, in __makeAbsoluteUrl\r\n        assert o.hostname in [self.__hostname, \\\"uplads.github.com\\\", \\\"status.github.com\\\"], o.hostname\r\n        AssertionError: git.corp.example.com\r\n    \",\r\n```\r\n\r\nReference:\r\n- Proxy DNS is `git-atlassian.corp.example.com`\r\n- GHE DNS is `git.corp.example.com`"}}, {"doc": {"_id": 1233, "title": "Do not allow to perform requests", "content": "Hi everyone.\r\nI am using the library for my pet project. I really like its architecture,\r\nHowever, I ran into an issue or a feature of the library.\r\nI need to retrieve information about all the issues (including pull requests) in a repository. I was surprised by the low performance of the following script.\r\n\r\n```python\r\nimport pandas as pd\r\nfrom github import Github\r\n\r\ndef load(reponame, login, password):\r\n    # Log in to GitHub (see below)\r\n    gh = Github(login, password, per_page=100)\r\n    # Define the repository: reponame=\"user/repo\"\r\n    repo = gh.get_repo(reponame)\r\n\r\n    # Create a pandas dataframe\r\n    column_names = [\"Created\", \"IsPR\"]\r\n    df_issues = pd.DataFrame(columns = column_names)\r\n\r\n    issues = repo.get_issues(state=\"all\")\r\n\r\n    for issue in issues:\r\n        df_issues.loc[issue.number] = [issue.created_at,\r\n                    issue.pull_request != None, issue.labels, issue.milestone]\r\n    \r\n    return df_issues\r\n```\r\n\r\nThe script should load up to 100 issues in one request and process them in a loop.\r\nI have noticed that while in `for issue in issues:`, the script still utilizes network.\r\n\r\nDigging into this weird behavior, it turned out, that PyGithub can send a request to GitHub if a property value is not set:\r\n\r\n```python\r\n@property\r\ndef pull_request(self):\r\n    \"\"\"\r\n    :type: :class:`github.IssuePullRequest.IssuePullRequest`\r\n    \"\"\"\r\n    \r\n    self._completeIfNotSet(self._pull_request)\r\n    if self._pull_request is NotSet:\r\n        return None\r\n    return self._pull_request.value\r\n```\r\n\r\nSo when the script fetches 100 issues, `N` of them are pull requests. For those `100-N` issues the `pull_request` property value is not set. On each such issue a network request to GitHub is performed.\r\n\r\nFor my use case these http requests are useless, significantly decrease performance and sometimes make gthub to reject the request due to rate limiting.\r\nI already have this data. required. If `self._pull_request is NotSet`, then I can safely say it is not a PR, but an issue.\r\n\r\nI have not found a way to turn off this behavior in PyGithub's API.\r\n\r\nI think there should be a way to tell, that I dont want further hidden request when acessing an item (`GithubObject`)\r\nI think there should be an option to tell if hidden requests on an object are allowed.\r\nAt the moment the `_fetchNextPage` function of `PaginatedList` sets all items as not completed:\r\n```\r\nself.__contentClass(self.__requester, headers, element, completed=False)\r\n```\r\n\r\nA workaround might be to use `get_pulls` to retrieve all pull requests, but then the data is retrieved again, although it is already present when retreiving issues."}}, {"doc": {"_id": 1232, "title": "since arguement of get_repos", "content": "Hi all! \r\n\r\nI am trying to use pygithub to get a list of publicly available repos on github. Rather than getting all repos available on github, I'm trying to limit it to a subset of these repos. My code is as follows:\r\n\r\n```\r\nfrom github import Github\r\nimport sys\r\nimport datetime as dt\r\n\r\ng = Github(sys.argv[1]) // token passed as command line argument\r\nsince = dt.datetime.now() - dt.timedelta(minutes=1) // get all repos in the past minute\r\n\r\nfor repo in g.get_repos(visibility='public', since=since):\r\n    print(repo.name)\r\n```\r\n\r\nThis consistently throws the following error:\r\n```\r\n    assert since is github.GithubObject.NotSet or isinstance(since, int), since\r\nAssertionError: 2019-09-30 10:22:20.979714\r\n```\r\n\r\nIn the documentation it's clear the since argument is expecting an integer (see here: https://pygithub.readthedocs.io/en/latest/github.html ) but I cannot see how an integer could be used in this context. Can someone please explain the usage of this argument? "}}, {"doc": {"_id": 1231, "title": "Type stubs for mypy", "content": "Adds type stubs that can be used in mypy, as requested in: #1217\r\nThe current type stubs were generated by MonkeyType against the unit test, however it missed a few things here and there so manual fix is required before merging (still WIP)."}}, {"doc": {"_id": 1230, "title": "Can I Create Tokens with PyGithub? I can't find any examples and would love some guidance  ", "content": "Hi There \ud83d\udc4b !\r\nI'm new to pygithub and the github api so please let me know if this isn't the right place to ask this question. i've been pouring through the docs and do some some reference to the [authorization](https://pygithub.readthedocs.io/en/latest/github_objects/Authorization.html) object but i'm not exactly sure how to use it. Has anyone implemented authorization as follows:\r\n\r\nuser authenticates with github username and password\r\nToken is created in their account via pygithub\r\nToken string is accessed via pygithub\r\n\r\nMost of the examples start with the user providing the login credentials or the token string. but i'd like to create the string via the api and then access it.\r\n\r\nThank you for any guidance!\r\n"}}, {"doc": {"_id": 1229, "title": "Support non-default URLs in GithubIntegration", "content": "The get_installation() method of GithubIntegration was hardcoded to\r\nalways use the default URL of api.github.com, making it impossible to\r\nfetch the installation of an GitHub Enterprise installation."}}, {"doc": {"_id": 1228, "title": "Cleanup try/except import in PaginatedList", "content": "Since we're using six.moves to import parse_qs, we don't need to check\r\nfor an import exception, we can just import it directly."}}, {"doc": {"_id": 1227, "title": "Add an IncompletableObject exception", "content": "If a returned object from GitHub does not include an URL, that object\r\ncan not be completed, and used to fail with an obscure traceback saying\r\nNoneType has no method startswith. Check for this, and raise\r\nIncompletableObject instead."}}, {"doc": {"_id": 1226, "title": "Fix redundant int checks", "content": ""}}, {"doc": {"_id": 1225, "title": "can a shell script be used to to pass pygithub attributes to a python program?", "content": "can a shell script be used to to pass pygithub attributes to a python program? we are trying to pass parameters to a python script that is utilizing pygithub from a shell(bash) script but inside the shell script we get this error:\r\n  File \"<string>\", line 1\r\n    from _pythonprog_ import *; 111111111111._method_('_param1_')\r\n                                                                        ^\r\nSyntaxError: invalid syntax\r\nany ideas why?\r\n"}}, {"doc": {"_id": 1224, "title": "AttributeError: 'NoneType' object has no attribute 'startswith' when trying to access UserKey attributes", "content": "**Description:**\r\n\r\nI'm trying to iterate through Github users and get their public keys.  Unfortunately I'm getting an `AttributeError` when trying to access some of the returned `UserKey` object's attributes. \r\n\r\nThis happens whether the attributes are accessed directly or via `.raw_data`.\r\n\r\nIt looks like it's an issue with some of the attributes only being available on `AuthenticatedUser`'s keys vs a `NamedUser`'s keys.\r\n\r\n\r\n**Steps to reproduce:**\r\n```python\r\nfrom github import Github\r\n\r\ng = Github('access_token')\r\n\r\nfor user in g.get_users():\r\n    keys = '\\n'.join(\r\n        f'key: {key.url}'\r\n        for key in user.get_keys()\r\n    )\r\n    print(f'{user.id} {user.login}\\n{keys}')\r\n```\r\n\r\n```python\r\n  File \"./all_github_users.py\", line 27, in <genexpr>\r\n    for key in user.get_keys()\r\n  File \"/usr/local/lib/python3.7/site-packages/github/UserKey.py\", line 82, in verified\r\n    self._completeIfNotSet(self._verified)\r\n  File \"/usr/local/lib/python3.7/site-packages/github/GithubObject.py\", line 265, in _completeIfNotSet\r\n    self._completeIfNeeded()\r\n  File \"/usr/local/lib/python3.7/site-packages/github/GithubObject.py\", line 269, in _completeIfNeeded\r\n    self.__complete()\r\n  File \"/usr/local/lib/python3.7/site-packages/github/GithubObject.py\", line 274, in __complete\r\n    self._url.value\r\n  File \"/usr/local/lib/python3.7/site-packages/github/Requester.py\", line 276, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, self.__customConnection(url)))\r\n  File \"/usr/local/lib/python3.7/site-packages/github/Requester.py\", line 292, in __customConnection\r\n    if not url.startswith(\"/\"):\r\nAttributeError: 'NoneType' object has no attribute 'startswith'\r\n```\r\n\r\n**Line causing the error:**\r\n\r\nhttps://github.com/PyGithub/PyGithub/blob/a0f01cf9cf5521fd034813242727de72eb52df42/github/Requester.py#L284\r\n\r\n\r\n**Expected behavior:**\r\n\r\nThe attributes not available on a `NamedUser`'s keys should be `None` or not present on `UserKey`."}}, {"doc": {"_id": 1223, "title": "Update changes.rst", "content": "There is a API endpoint deprecation as pointed out in https://github.com/PyGithub/PyGithub/issues/1222 It should be documented in changelog"}}, {"doc": {"_id": 1222, "title": "'Repository' object has no attribute 'get_file_contents' in 1.43.8", "content": "The following code works with 1.43.7 and fails on 1.43.8.\r\nGitRepo is our Repo which was initialized elsewhere.\r\nblob_sha = self.git_repo.get_file_contents(self.sf_config_file, \"master\").sha\r\nresults in 15:49:03  AttributeError: 'Repository' object has no attribute 'get_file_contents'\r\n\r\n"}}, {"doc": {"_id": 1221, "title": "KeyError: 'PROJ_LIB'", "content": "Hi there,\r\n\r\nWhen I try to use \"from mpl_toolkits.basemap import Basemap\", the error shows below.\r\n\r\n``Traceback (most recent call last):\r\n  File \"test_prj4.py\", line 3, in <module>\r\n    from mpl_toolkits.basemap import Basemap\r\n  File \"/glade/u/home/lixujin/anaconda3/envs/geoschem/lib/python3.6/site-packages/mpl_toolkits/basemap/__init__.py\", line 155, in <module>\r\n    pyproj_datadir = os.environ['PROJ_LIB']\r\n  File \"/glade/u/home/lixujin/anaconda3/envs/geoschem/lib/python3.6/os.py\", line 669, in __getitem__\r\n    raise KeyError(key) from None\r\nKeyError: 'PROJ_LIB'``\r\n\r\nDo you guys have any advice on it?"}}, {"doc": {"_id": 1220, "title": "Endpoint / method to retrieve all the files on a range of PRs", "content": "I'd really like to see all the files included on a Pull Request (PR) for several PRs, using PyGitHub. \r\nIncidentally, I created a hack to get this information, using the GitHub API v3, but it's not very graceful. And given the anonymous management of queries with PyGithub, it'd be so cool to have this feature in PyGithub vs. the GitHub API.  \r\n\r\nI noticed this unit test only verifies that files on one pr can be retrieved.  \r\nhttps://github.com/PyGithub/PyGithub/blob/master/github/PullRequest.py\r\n\r\nDoes that speak to the intended use case? I'd like to know. Especially because the return value of this method provide a \"Paginated list\" object. \r\n\r\nProblem scenario: This method yields only one document on one PR. \r\n\"\"\"\r\ng = Github(\"username\", \"password\")\r\nuser = g.get_user(\"distro\")\r\nrepo = user.get_repo(\"documentation\")\r\npulls = repo.get_pulls(state='all', sort='created', base='master', direction=\"desc\")\r\nfor pull in pulls: \r\n   files = pull.get_files()\r\n   print(files) \r\n\"\"\"\r\n\r\nThis methods seems to be imagined as if a developer only seeks files on 1 PR, and not all the files on a range of PRs.   If I'm missing some method in your docs that already exists, please let me know. \r\n\r\nHere's where I've looked: \r\nhttps://pygithub.readthedocs.io/en/latest/github_objects/File.html\r\nhttps://pygithub.readthedocs.io/en/latest/github_objects/PullRequest.html\r\n"}}, {"doc": {"_id": 1219, "title": "Knowing if a repo has been renamed (redirected url)?", "content": "Hello\r\n\r\nGithub is keeping repository redirect url when a repository is renamed.\r\n\r\nCurrently, when calling organization.get_repo(old_repo_name), it follows redirect and return a pointer to the renamed_repo.\r\nIs it possible to know that my request goes through a redirected url using PyGithub?"}}, {"doc": {"_id": 1218, "title": "datetime returned by (issue and comment) created_at is naive, should be UTC ", "content": "See #512 "}}, {"doc": {"_id": 1217, "title": "Add type anontations for mypy (etc.)", "content": "It would be great if `PyGithub` had type annotations for its types. This would enable users to build safer code around it as well as improving editor suggestions. As `PyGithub` already has a well defined type hierarchy there are already types which could be used, which is great.\r\n\r\n(I actually originally assumed from the description that `PyGithub` was annotated and was surprised that it wasn't).\r\n\r\nIs this something you've considered and/or would be open to?"}}, {"doc": {"_id": 1216, "title": "Add 'author_association' to 'PullRequest'", "content": "'author_association' labels PR author as project member or contributor."}}, {"doc": {"_id": 1215, "title": "Tiens", "content": "-Added a way to not filter out MS users on some repos \r\n-Launch notepad at the end with status"}}, {"doc": {"_id": 1214, "title": "Support custom base_url for get_installation", "content": ""}}, {"doc": {"_id": 1213, "title": "Support draft pull requests", "content": "https://developer.github.com/v3/pulls/#create-a-pull-request\r\n\r\nhttps://github.com/PyGithub/PyGithub/blob/74cd6856de404dc3109360860b712d62458c24eb/github/Repository.py#L1190-L1204"}}, {"doc": {"_id": 1212, "title": "fix topics attribute always return None", "content": "It resolves #1208. Fixing it is not as easy as it looks like. Currently PyGithub tries to use a common way to request GitHub v3 API. \r\n\r\nhttps://github.com/PyGithub/PyGithub/blob/74cd6856de404dc3109360860b712d62458c24eb/github/Repository.py#L725-L739\r\n\r\nDue to GitHub preview handling, each individual preview has its own MIME type(the `Accept` header) to enable it. I'm not sure it's good to use some MIME type by default. If I put the `mercy-preview` in default `Accept` header, there will be 33 fail tests. And if GitHub adds some new preview, we need to change the ReplayData again.\r\n\r\nIf any good idea, please tell me, I will change."}}, {"doc": {"_id": 1211, "title": "Fix bug in repository create new file example PyGithub#1210", "content": "The previous code would throw an 'error path cannot start with a slash'\r\n. Now fixed it by removing a slash in the example. PyGithub#1210"}}, {"doc": {"_id": 1210, "title": "ERROR: path cannot start with a slash", "content": "I just started with PyGithub, but while while running  the documentation example[ Create a new file in the repository](https://github.com/PyGithub/PyGithub/blob/master/doc/examples/Repository.rst#create-a-new-file-in-the-repository)\r\n\r\n Getting this error \r\n\r\n> Traceback (most recent call last):\r\n>   File \"D:\\g4rdn3r\\app.py\", line 8, in <module>\r\n>     repo.create_file(\"/test.txt\", \"test\", \"test\")\r\n>   File \"C:\\Python27\\lib\\site-packages\\github\\Repository.py\", line 1669, in create_file\r\n>     input=put_parameters\r\n>   File \"C:\\Python27\\lib\\site-packages\\github\\Requester.py\", line 276, in requestJsonAndCheck\r\n>     return self.__check(*self.requestJson(verb, url, parameters, headers, input, self.__customConnection(url)))\r\n>   File \"C:\\Python27\\lib\\site-packages\\github\\Requester.py\", line 287, in __check\r\n>     raise self.__createException(status, responseHeaders, output)\r\n> github.GithubException.GithubException: 422 {u'documentation_url': u'https://developer.github.com/v3/repos/contents/#create-or-update-a-file', u'message': u'path cannot start with a slash', u'errors': [{u'field': u'path', u'code': u'invalid', u'resource': u'Commit'}]}\r\n\r\n\r\n\r\n"}}, {"doc": {"_id": 1209, "title": "documentation: get_repo example to explain better", "content": "the get_repo example is good.\r\n\r\ni would like though to see the example explain the format of repo name. it must use \"org/repo\" . i saw a couple of posts on github and stackoverflow where this was the user's issue."}}, {"doc": {"_id": 1208, "title": "unable to get repo topics when using topics property", "content": "### Problem\r\n\r\nRecently, I found a problem on getting a repo's topics. If I use the `topics` property, it never work. But if I use the `get_topics` method, it will work.\r\n\r\n```Python\r\nfrom github import Github\r\n\r\ntoken = open('./.token').read().strip()\r\n\r\ng = Github(token)\r\nrepo = g.get_repo('PyGithub/PyGithub')\r\nassert repo.topics is None\r\nassert len(repo.get_topics()) == 4\r\n```\r\n\r\n### Environment\r\n\r\n- PyGithub == 1.43.8\r\n- Python == 3.7.4\r\n\r\nThe master branch (`a0f01cf`) has the same problem.\r\n\r\n----\r\nAfter check the source code of `get_topics`, I find that there should be have a specical header `\"application/vnd.github.mercy-preview+json\"`\r\n\r\nhttps://github.com/PyGithub/PyGithub/blob/a0f01cf9cf5521fd034813242727de72eb52df42/github/Repository.py#L2529-L2539\r\n\r\nThanks, I wanna submit a patch for this. "}}, {"doc": {"_id": 1207, "title": "get_organizations throws exception when accessing the org ", "content": "I'm getting a stack trace when trying to iterate over the organizations in my private GHE instance. The code looks like this:\r\n\r\n```python3\r\ng = Github(base_url=f\"{GHE_URL}/api/v3\", login_or_token=username, password=pwd, per_page=200)\r\norgs = g.get_organizations()\r\nfor i, org in enumerate(orgs):\r\n    print(org.name)\r\n```\r\nAnd the error is as follows:\r\n```\r\nTraceback (most recent call last):\r\n  File \"gh_clone.py\", line 67, in <module>\r\n    print(org.name)\r\n  File \"/usr/local/lib/python3.7/site-packages/github/NamedUser.py\", line 265, in name\r\n    self._completeIfNotSet(self._name)\r\n  File \"/usr/local/lib/python3.7/site-packages/github/GithubObject.py\", line 265, in _completeIfNotSet\r\n    self._completeIfNeeded()\r\n  File \"/usr/local/lib/python3.7/site-packages/github/GithubObject.py\", line 269, in _completeIfNeeded\r\n    self.__complete()\r\n  File \"/usr/local/lib/python3.7/site-packages/github/GithubObject.py\", line 274, in __complete\r\n    self._url.value\r\n  File \"/usr/local/lib/python3.7/site-packages/github/Requester.py\", line 276, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, self.__customConnection(url)))\r\n  File \"/usr/local/lib/python3.7/site-packages/github/Requester.py\", line 292, in __customConnection\r\n    if not url.startswith(\"/\"):\r\nAttributeError: 'NoneType' object has no attribute 'startswith'\r\n```\r\n\r\nI'm using PyGithub 1.43.8 on Python 3.7 / OSX. Other operations, such as listing all repositories directly work fine, but organizations show the error above. \r\n\r\nThanks!"}}, {"doc": {"_id": 1206, "title": "Getting a 404{data  error cant figure out", "content": "I am trying to connect to our github url and I get what is below(this is just a portion:\r\n\r\n**github.GithubException.GithubException: 404 {'data': '<!DOCTYPE html>\\n<html>\\n  <head>\\n    <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\">\\n    <meta http-equiv=\"Content-Security-Policy\" content=\"default-src \\'none\\'; base-uri \\'self\\'; connect-src \\'self\\'; form-action \\'self\\'; img-src \\'self\\' data:; script-src \\'self\\'; style-src \\'unsafe-inline\\'\">\\n    <meta content=\"origin\" name=\"referrer\">\\n    <title>Page not found &middot; GitHub</title>\\n    <style type=\"text/css\" media=\"screen\">\\n      body {\\n        background-color: #f1f1f1;\\n        margin: 0;\\n      }\\n      body,\\n      input,\\n      button {\\n\r\n    font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\\n      }\\n      .container { margin: 30px auto 40px auto; width: 800px; text-align: center; }\\n\\n      a { color: #4183c4; text-decoration: none; font-weight: bold; }\\n      a:hover { text-decoration: underline; }\\n\\n      h3 { color: #666; }\\n      ul { list-style: none; padding: 25px 0; }\\n      li {\\n        display: inline;\\n        margin: 10px 50px 10px 0px;\\n      }\\n      input[type=text],\\n      input[type=password] {\\n        font-size: 13px;\\n        min-height: 32px;\\n        margin: 0;\\n        padding: 7px 8px;\\n        outline: none;\\n        color: #333;\\n\r\n      background-color: #fff;\\n        background-repeat: no-repeat;\\n** \r\n\r\n\r\nwhat could be wrong ?  what should be in the base_url?\r\nI have the url of our github in there g=Github(base_url=\"https://www.oururl.com\",login_or_token=\"xxxxx..............\")"}}, {"doc": {"_id": 1205, "title": "support of oauth2", "content": "Its not clear to me from the readme whether pygithub supports building oauth2 app or not\r\n\r\nsee #410 \r\nsee #1021 "}}, {"doc": {"_id": 1204, "title": "Incomplete results, retries not working, random exceptions", "content": "Configuration:\r\ng = Github({api_key}, per_page=100, retry=1000)\r\n\r\n**1** - Retries do not execute, the program ends with an error\r\n**2** - For some reason Exception behavior is highly unpredictable and it's maddening.\r\nMy program can effectively cycle and preemptively call the ratelimit api to check if it adheres within the limits for one to two hours before randomly getting a 403/50x .\r\n\r\nSome native rate limit adherence would be a warm welcome here. Having to implement sleeps based on intuition when your application decides to spill the beans after two hours of running smoothly should not be expected behavior.\r\n``` File \"word.py\", line 126, in get_stargazers_inner\r\n    for i in repo.get_stargazers_with_dates():\r\n  File \"/usr/local/lib/python3.6/dist-packages/github/PaginatedList.py\", line 62, in __iter__\r\n    newElements = self._grow()\r\n  File \"/usr/local/lib/python3.6/dist-packages/github/PaginatedList.py\", line 74, in _grow\r\n    newElements = self._fetchNextPage()\r\n  File \"/usr/local/lib/python3.6/dist-packages/github/PaginatedList.py\", line 199, in _fetchNextPage\r\n    headers=self.__headers\r\n  File \"/usr/local/lib/python3.6/dist-packages/github/Requester.py\", line 276, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, self.__customConnection(url)))\r\n  File \"/usr/local/lib/python3.6/dist-packages/github/Requester.py\", line 287, in __check\r\n    raise self.__createException(status, responseHeaders, output)\r\ngithub.GithubException.RateLimitExceededException: 403 {'message': 'API rate limit exceeded for user ID xxxx.', 'documentation_url': 'https://developer.github.com/v3/#rate-limiting'}\r\n```\r\n\r\nAdditionally, one could use the backoff library (function decorator with exponential backoff) -- however **it can not account for the current position in item iteration and will therefore start from scratch again**.\r\n**3** - Incomplete results being returned\r\nExample with keyword 'nyzo':\r\nThe api finds 28 results: https://api.github.com/search/repositories?q=nyzo\r\nThe library finds 15 results: https://i.imgur.com/XfjPI8i.png\r\n"}}, {"doc": {"_id": 1203, "title": "first time user of pygithub.  Set up incorrect?  I get error when I run the code ", "content": "I am writing a python script to access the issues in a our team repository.  Here is what my code looks like:\r\n\r\nfrom github import Github\r\ng=Github(\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\")\r\nrepo = g.get_repo(\"GJ\")\r\nopen_issues = repo.get_issues(state='open')\r\nclosed_issues = repo.get_issues(state='closed')\r\nfor issue in open_issues:\r\n    print(issue)\r\n\r\nbut I get the error below:\r\n    raise self.__createException(status, responseHeaders, output)\r\ngithub.GithubException.BadCredentialsException: 401 {'message': 'Bad credentials', 'documentation_url': 'https://developer.github.com/v3'}\r\n\r\ndo I need the url of the github repository in the code?  Where am i going wrong?"}}, {"doc": {"_id": 1202, "title": "(Question) List all issues on an enterprise Github", "content": "I've got a quick question about (hopefully) making my code a lot more efficient. currently I have something like the following:\r\n```\r\ng = Github(base_url = \"https://github.companyName.com/api/v3\" ,login_or_token=\"my_token\")\r\n\r\nrepos = g.get_repos()\r\nfor repo in repos:\r\n    try:\r\n        issues = repo.get_issues()\r\n        for issue in issues:\r\n            i+=1\r\n            print(i)\r\n\r\n```\r\nThis code is just proof that I can access each issue, and in this case, just add up how many there are. As you can imagine this code is very inefficient, and in my opinion, poorly written. \r\n\r\nIs there some sort of function that will allow me to access all issues from all repos in the enterprise Github?  This would hopefully be similar to when you access all issues by going to the following links: https://github.companyName.com/issues\r\nhttps://github.com/issues\r\n"}}, {"doc": {"_id": 1201, "title": "Additional org configuration", "content": "I see the test [mock data](https://github.com/PyGithub/PyGithub/blob/78d283b9b5c5222dd0ca2750db7b56a2a5545a39/tests/ReplayData/Organization.setUp.txt) has the following returned:\r\n\r\n```\r\ndefault_repository_permission: read\r\nhas_organization_projects: true\r\nhas_repository_projects: true\r\nmembers_can_create_repositories: false\r\n```\r\n\r\nHowever, I do not see a way to configure these.\r\n\r\nAm I missing something?"}}, {"doc": {"_id": 1200, "title": "Preview Handling", "content": "Looking through https://developer.github.com/v3/previews/ it looks like each individual preview has its own MIME type to enable it, and there's no documented sequence to them (that is, it doesn't say that type U also covers types S and T, and there isn't a type Z that enables everything).\r\n\r\nIt looks like #1188 enables just one of these previews and touches 32 files in the process.\r\n\r\nMaybe there's a better, more systemic way to handle this?\r\n\r\nThe current behavior is a single flag that enables the `moondragon` changes, which are from [2015](https://developer.github.com/changes/2015-01-07-prepare-for-organization-permissions-changes/) and were \"merged\" on June 24 of that year."}}, {"doc": {"_id": 1199, "title": "API for checking the availablity of organization name", "content": "Is there any API, for checking the availability of organization name? \r\nBelow are the details -\r\nMethod : `POST` \r\nURL : `https://api.github.com/organizations/check_name`\r\nAPI : `check_name`"}}, {"doc": {"_id": 1198, "title": "Personaltoken", "content": "Enable to use Personal Tokens."}}, {"doc": {"_id": 1197, "title": "ref parameter does not work on the get_contents() method", "content": "If i try to include the ref parameter (branch name other than master), i get the below error :\r\nUnknownObjectException: 404 {'message': 'Not Found', 'documentation_url': 'https://developer.github.com/v3/repos/contents/#get-contents'}\r\nIt seems the ref parameter does not take the branch name other than master. \r\nPlease verify"}}, {"doc": {"_id": 1196, "title": "This is a new issue", "content": "This is the issue body"}}, {"doc": {"_id": 1195, "title": "Add support to vulnerability alert and automated security fixes APIs", "content": "- Add functions to get vulnerability alert information and change the vulnerability alert settings. \r\n- Add functions to change the automated security fixes settings. \r\n\r\n\r\nUnit tests cover:\r\n- Normal case \r\n- when the repository does not exist (error 404)\r\n- change automated security fix when vulnerability alert is disabled(error 424)\r\n- get vulnerability when it is turned off(error 404).\r\n\r\nNote: Those APIs are currently in preview status, feel free to reject it. \r\n\r\nGithub API Documents:\r\n- [get vulnerability settings](https://developer.github.com/v3/repos/#check-if-vulnerability-alerts-are-enabled-for-a-repository)\r\n- [enable vulnerability alerts](https://developer.github.com/v3/repos/#enable-vulnerability-alerts)\r\n- [disable vulnerability alerts](https://developer.github.com/v3/repos/#disable-vulnerability-alerts)\r\n- [enable automated security fixes](https://developer.github.com/v3/repos/#enable-automated-security-fixes)\r\n- [disable automated security fixes](https://developer.github.com/v3/repos/#disable-automated-security-fixes)\r\n\r\n"}}, {"doc": {"_id": 1194, "title": "Drop use of assertEquals", "content": "TestCase.assertEquals is deprecated, at least in modern Python 3, so\r\nwhich to assertEqual, which is used everywhere else."}}, {"doc": {"_id": 1193, "title": "Remove more Python version specific code", "content": "Remove a bunch of other call sites that behaved differently between\r\nPython 2 and 3, massively cleaning up a few messy methods."}}, {"doc": {"_id": 1192, "title": "Delete Legacy submodule", "content": "The Legacy module is unused, untested and has been untouched for seven\r\nyears. Drop it."}}, {"doc": {"_id": 1191, "title": "Remove some uses of atLeastPython3", "content": "There are a number of call sites that would behave differently depending\r\non Python 2 or 3. A fair amount of them are left over from Python 3.2 or\r\nPython 2.6 were the current versions, and it was much harder to write\r\ncompatible code for both versions. Happily, that is now in the past, so\r\nrefactor some of them out."}}, {"doc": {"_id": 1190, "title": "Fix directories for coverage in Travis", "content": "The directory github/tests no longer exists, correct the path for Travis\r\ngoodness."}}, {"doc": {"_id": 1189, "title": "Switch to using six", "content": "With the Python 2.7 deadline fast approaching, modernize the codebase\r\nmaking use of the modernize module to switch to using six, as well as\r\nother upcoming features, such as absolute imports . Stop using 2to3\r\nfor Travis, yay!"}}, {"doc": {"_id": 1188, "title": "Label API: pass custom media type in the Accept header", "content": "See #1101 for the corresponding issue and #1102 for the previous attempt at fixing it\r\n\r\nAs described in https://developer.github.com/changes/2018-02-22-label-description-search-preview/, a custom media type needs to be passed to the `Access` header to access label descriptions.\r\n\r\n6a9fdd8 implements the new `Accept` header for getters methods of various classes\r\ne73863a updates the unit tests accordingly"}}, {"doc": {"_id": 1187, "title": "On issue edit/create/query, labels parameter is inconsistently used", "content": "This is essentially the same behavior described in #222\r\n\r\nWhen editing/creating/querying labels, some functions require labels to be passed as a Labels object and some require as a string. The preferred behavior would be to accept either a Label object or a string.\r\n\r\nI'll submit a PR for this functionality."}}, {"doc": {"_id": 1186, "title": "Update Repository.update_file() docstring", "content": "The docstring for Repository.update_file() insisted that content be\r\nbase64 encoded, which is not quite correct, update it.\r\n\r\nCloses #1069"}}, {"doc": {"_id": 1185, "title": "search_repositories() returns an incorrect number of results for queries.", "content": "While direct use of the REST API v3 returns the complete enumeration of search results, `g.search_repositories()` returns an incomplete list of results.\r\n\r\nFor example, while `https://api.github.com/search/repositories?q=pony+language:python` shows that `total_count: 286`, `repositories.totalCount` is 111 for `repositories = g.search_repositories(query='pony+language:python')`. Indeed, after traversing through `repositories`, only 111 repositories are returned.\r\n\r\nI hope there isn't something I missed in the documentation, but this is a rather serious issue. Thank you!"}}, {"doc": {"_id": 1184, "title": "Fix PR review creation.", "content": "Fixes https://github.com/PyGithub/PyGithub/issues/1181."}}, {"doc": {"_id": 1183, "title": "Missing functionality to get all issues associated with a repository project", "content": "Thanks for the very useful library. I am using the version `1.43.8` with Python version `3.6`.\r\n\r\nI am wondering if there is a way to get all issues associate with a repository project.\r\n\r\nI am unable to find a way to get all issues associated with a repository project (I have also not been able to find projects a given issue is associated with, which is very odd).\r\n\r\nThe raw data for an issue contains information for 'Assignees', 'Labels', and 'Milestone', but not 'Projects', which is shown right before 'Milestone' for every issue on the right-hand side of the GitHub interface, so there must be a straightforward way to get that information.\r\n\r\nAny insights would be most welcome, and thank you very much for your time."}}, {"doc": {"_id": 1182, "title": "Rate Limit Detection no longer works, string changed", "content": "It seems that Github has changed the text that it sends when rate limiting. I have a script that uses a backoff decorator to retry on RateLimitExceededException, but now because the text has changed it throws a generic GithubException, which my decorator isn't catching.\r\n\r\nThis code here is looking for the strings that no longer exist. https://github.com/PyGithub/PyGithub/blob/828b53b7560b8c2b4e9d7064e0d9ffc442b16548/github/Requester.py#L310-L314\r\n\r\n```\r\ngithub.GithubException.GithubException: 403 {'message': 'You have triggered an abuse detection mechanism. Please wait a few minutes before you try again.', 'documentation_url': 'https://developer.github.com/v3/#abuse-rate-limits'}\r\n```"}}, {"doc": {"_id": 1181, "title": "Creating code review changes PR data.", "content": "I have some code that polls for pull requests, then, in some cases,\r\ncreates an automatic approval, like this:\r\n\r\n    checked = set()\r\n    ...\r\n                # n is a Notification\r\n                p = n.get_pull_request()\r\n                if p.state == 'open':\r\n                    print(\"Checking pull request {}.\".format(p.id))\r\n                    if p.id in checked:\r\n                        continue\r\n                    if ...\r\n                        ...\r\n                        p.create_review(event=\"APPROVE\", body=\"\")\r\n                        n.mark_as_read()\r\n                    checked.add(p.id)\r\n    ...\r\n\r\nThis is actually not working like this, because `p.id` is being\r\nmodified!\r\n\r\nThere's this line in `PullRequest.py` in the `create_review` method:\r\n\r\n```\r\n        self._useAttributes(data)\r\n```\r\n\r\nThat looks like it's taking the data from the pull request review and just applies it to itself ... that can't be right, can it? Before I create a PR then, what might have been the reason to have that call in there?"}}, {"doc": {"_id": 1180, "title": "AuthUser lazy login field initialization and equality issue", "content": "Hello,\r\n\r\nI'm raising another issue as even though the fix is potentially quite straightforward, I can't seem to get the project building locally, due to various reasons.\r\n\r\nNoticed it briefly yesterday, but if I obtain the authenticated user and print it as in the example bellow, the representation has no login information. However, if I manually print the login value, I will get the expected result.\r\n\r\n```py\r\n>>> auth_user = git.get_user()\r\n>>> print(auth_user)\r\nAuthenticatedUser(login=None)\r\n\r\n>> print(auth_user.login)\r\ndragosdumitrache\r\n```\r\n\r\nI suspect the issue might be because the `__repr__` method on `AuthenticatedUser` directly references the login value: `self._login.value`, instead of using the property `login()`. However, this is just a guess on my end, since I couldn't run the code locally.\r\n\r\nRegarding local development, I am using Python 3.7.3, and the project only seems compatible with python2, is that correct? I'm asking so that in the future I can be more useful than just raising issues :)\r\n\r\nL.E: Seems to print the correct representation if I manually check the `login` value and then print the entire object.\r\n```py\r\n>>> print(auth_user.login)\r\ndragosdumitrache\r\n>>> print(auth_user)\r\nAuthenticatedUser(login=dragosdumitrache)\r\n```\r\n\r\nFurthermore, as it relates to `AuthenticatedUser`, is there a reason why `AuthenticatedUser` would not be equal to the equivalent `NamedUser`? There's no hash implementation"}}, {"doc": {"_id": 1179, "title": "Correct return type of MainClass.get_organizations", "content": "The doc string and the code disagreed about the return type of\r\nMainClass.get_organizations(), correct the code, which was incorrect.\r\n\r\nFixes #1177"}}, {"doc": {"_id": 1178, "title": "Fix URL encoding in GithubObject:__complete", "content": "PyGithub currently fails on content retrieval due to '#' characters in URL path. This code path is hit when using GitHub code search and `GithubObject.py:__complete` is retrieving the i-th repo for `decoded_content`.\r\n\r\nI fixed it similar to other instances in the codebase using `urllib.parse.quote`.\r\n\r\nExample of search result that cannot be retrieved:\r\nhttps://github.com/nbsullivan/hashtagcluster/blob/71c978ee41dc1ccdbdba8ee93507a2e418798ece/data/results/emmybatchpreds/#Emmys_batch5080usercount.csv\r\n\r\nReturned from code search query:\r\n`\"user:nbsullivan GIFShare_es\"`\r\n\r\n"}}, {"doc": {"_id": 1177, "title": "MainGithub  get_organizations unexpected return type", "content": "Hello. I have started writting a Git interaction tool for my current workplace. We have our own instance of GHE and organise everything into orgs. I have started used PyGithub, currently using v1.43.7, which should be the latest one.\r\n\r\nApologies if this has been asked before, I did have a look and could find nothing of the sort.\r\n\r\nThe `get_organizations` pydoc on the `MainClass.Github` seems to suggest that the returned type for `get_organizations` is a `PaginatedList` of `Organizations`, as can be seen at the following URL: \r\n[get_organizations docs](https://pygithub.readthedocs.io/en/latest/github.html#github.MainClass.Github.get_organizations)\r\n\r\nHowever, a successful call to `get_organizations` seems to return a `PaginatedList` of `NamedUser`, where each `NamedUser` is actually a git org (so it goes off and finds the right things on GHE, but returns the wrong type).\r\n\r\nA quick fix to get the right type is to do something like this:\r\n\r\n```py\r\nnamed_users = git.get_organizations()\r\nfor named_user in named_users:\r\n\tactual_org = git.get_organization(named_user.login)\r\n```\r\n\r\nThat is not in line with the documentation though, so I am wondering whether I am doing something wrong, or if this is the intended behaviour.\r\n\r\nKind regards,\r\nDragos"}}, {"doc": {"_id": 1176, "title": "Specifying UnknownObjectExceptions", "content": "Hello,\r\n\r\nI'm writing a script to look for a directory of a certain name in a given repository, and if that directory doesn't exist, it throws an UnknownObjectException. I'd like to be able to specify the exception I'm catching as an UnknownObjectException, but I'm having trouble figuring out how to access that utility. Here's what I'm trying to do:\r\n```\r\ntry:\r\n    dir_test = repo.get_contents(\"test_directory\")\r\nexcept UnknownObjectException:\r\n    print(\"This directory DNE\")\r\n```\r\n\r\n\r\nAnd here's how I've tried to do it so far, and the resulting outputs:\r\n```\r\nexcept UnknownObjectException:\r\n    # NameError: name 'UnknownObjectException' is not defined\r\n\r\nexcept GithubException as ge:\r\n    # NameError: name 'GithubException' is not defined\r\n\r\nexcept Github(url, token).GithubException as ge:\r\n    # AttributeError: 'Github' object has no attribute 'GithubException'\r\n\r\nimport github\r\nexcept github.GithubException.UnknownObjectException: \r\n    # AttributeError: type object 'GithubException' has no attribute 'UnknownObjectException'\r\n```\r\n\r\nAny help as to how to go about specifying PyGithub exceptions would be greatly appreciated as I haven't found any examples online that have worked for me. Thanks!\r\n"}}, {"doc": {"_id": 1175, "title": "NotSet is not None", "content": "why `github.GithubObject.NotSet is None` is returning `False`?\r\n\r\ncode would look much nicer and Pythonic if we could use something lilke \r\n\r\n    param or default_value\r\n\r\ninstead  of\r\n \r\n    if param is not github.GithubObject.NotSet:\r\n      return param\r\n    else:\r\n      return default_value"}}, {"doc": {"_id": 1174, "title": "release 1.43.8", "content": ""}}, {"doc": {"_id": 1173, "title": "Add support to vulnerability alert and automated security fixes APIs", "content": "- Add functions to get vulnerability alert information and change the vulnerability alert settings. \r\n- Add functions to change the automated security fixes settings. \r\n\r\nNote: Those APIs are currently in preview status, feel free to reject it. \r\n\r\nGithub API Documents:\r\n- [get vulnerability settings](https://developer.github.com/v3/repos/#check-if-vulnerability-alerts-are-enabled-for-a-repository)\r\n- [enable vulnerability alerts](https://developer.github.com/v3/repos/#enable-vulnerability-alerts)\r\n- [disable vulnerability alerts](https://developer.github.com/v3/repos/#disable-vulnerability-alerts)\r\n- [enable automated security fixes](https://developer.github.com/v3/repos/#enable-automated-security-fixes)\r\n- [disable automated security fixes](https://developer.github.com/v3/repos/#disable-automated-security-fixes)"}}, {"doc": {"_id": 1172, "title": "1.43.8?", "content": "Hello\r\nthere are some great improvements waiting to be shipped into a new release.\r\nWhen can we expect a new version?\r\nthanks for your work \ud83d\udc4d "}}, {"doc": {"_id": 1171, "title": "Fix small issues for Python 3 compatibility.", "content": "Still can't run tests with Python 3, but it's improving it a bit."}}, {"doc": {"_id": 1170, "title": "Repository and team missing methods", "content": "For Repository class couldn't find get_pending_invitations()\r\nFor Team class couldn't find get_team_by_slug()"}}, {"doc": {"_id": 1169, "title": "Code review bodies are optional in some cases.", "content": "The body of a pull request review is optional for the `APPROVE` and `PENDING` events."}}, {"doc": {"_id": 1168, "title": "Jump from notifications to related PRs/issues.", "content": "I couldn't find a way to jump directly from a notification to its pull request or its issue. This worked for me, though it's basically just copied from the existing code. If this is roughly okay I'm going to add tests for it too."}}, {"doc": {"_id": 1167, "title": "Move a portion of github module to use six", "content": "The Python 2 deadline is fast approaching, and we still rely very\r\nheavily on Python 2 features. To make a start on moving this code base\r\nto work without modifications for both Python 2 and 3, use the six\r\nmodule for github/[A-G] for string checking."}}, {"doc": {"_id": 1166, "title": "Fix bug in recursive repository contents example", "content": "The previous code would prematurely exit when the intermediate contents list holds one thing, and that one thing has not been processed / expanded yet. Now the exit condition is when the contents list is empty, and there is nothing left to be processed."}}, {"doc": {"_id": 1165, "title": "Add cryptography to test-requirements.txt", "content": "Running the tests locally upon cloning and installing dependencies in requirements.txt and test-requirements.txt fails.\r\n\r\nI got the following errors:\r\n\r\n```\r\n(py2env) jaskaran@jaskaran-H81M-S:~/PyGithub$ python -m tests\r\nr\n======================================================================\r\nERROR: testCreateJWT (tests.GithubIntegration.GithubIntegration)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"tests/GithubIntegration.py\", line 133, in testCreateJWT\r\n    token = integration.create_jwt()\r\n  File \"github/MainClass.py\", line 729, in create_jwt\r\n    algorithm=\"RS256\"\r\n  File \"/home/jaskaran/gsoc/py2env/local/lib/python2.7/site-packages/jwt/api_jwt.py\", line 65, in encode\r\n    json_payload, key, algorithm, headers, json_encoder\r\n  File \"/home/jaskaran/gsoc/py2env/local/lib/python2.7/site-packages/jwt/api_jws.py\", line 120, in encode\r\n    \"installed?\" % algorithm\r\nNotImplementedError: Algorithm 'RS256' could not be found. Do you have cryptography installed?\r\n\r\n======================================================================\r\nERROR: testGetAccessToken (tests.GithubIntegration.GithubIntegration)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"tests/GithubIntegration.py\", line 152, in testGetAccessToken\r\n    auth_obj = integration.get_access_token(664281)\r\n  File \"github/MainClass.py\", line 751, in get_access_token\r\n    \"Authorization\": \"Bearer {}\".format(self.create_jwt()),\r\n  File \"github/MainClass.py\", line 729, in create_jwt\r\n    algorithm=\"RS256\"\r\n  File \"/home/jaskaran/gsoc/py2env/local/lib/python2.7/site-packages/jwt/api_jwt.py\", line 65, in encode\r\n    json_payload, key, algorithm, headers, json_encoder\r\n  File \"/home/jaskaran/gsoc/py2env/local/lib/python2.7/site-packages/jwt/api_jws.py\", line 120, in encode\r\n    \"installed?\" % algorithm\r\nNotImplementedError: Algorithm 'RS256' could not be found. Do you have cryptography installed?\r\n\r\n======================================================================\r\nERROR: test_get_installation (tests.GithubIntegration.GithubIntegration)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"tests/GithubIntegration.py\", line 167, in test_get_installation\r\n    inst = integr.get_installation(\"foo\", \"bar\")\r\n  File \"github/MainClass.py\", line 788, in get_installation\r\n    \"Authorization\": \"Bearer {}\".format(self.create_jwt()),\r\n  File \"github/MainClass.py\", line 729, in create_jwt\r\n    algorithm=\"RS256\"\r\n  File \"/home/jaskaran/gsoc/py2env/local/lib/python2.7/site-packages/jwt/api_jwt.py\", line 65, in encode\r\n    json_payload, key, algorithm, headers, json_encoder\r\n  File \"/home/jaskaran/gsoc/py2env/local/lib/python2.7/site-packages/jwt/api_jws.py\", line 120, in encode\r\n    \"installed?\" % algorithm\r\nNotImplementedError: Algorithm 'RS256' could not be found. Do you have cryptography installed?\r\n\r\n----------------------------------------------------------------------\r\nRan 565 tests in 27.385s\r\n\r\nFAILED (errors=3)\r\n```\r\n\r\nI think cryptography is missing from requirements.txt. Adding it and installing enables testing locally without any of the above errors."}}, {"doc": {"_id": 1164, "title": "General github api question: merge from another repo", "content": "I'm currently working on bug detecting system.\r\n\r\nI need to find a way to get all events for an issue, especially merges that come from the repository, that I'm currently in and from another repository.\r\n\r\nExample: \r\nI have repoA, created an issue #1 there\r\n\r\nIn repoB, someone created a pull request that was merged and referenced to #1 via keyworld 'fixes'\r\n\r\nWhat I would like to get is a way to get a reference to this pull request api link, working from /api/repos/repoA/issues/1\r\n\r\n\r\n\r\n"}}, {"doc": {"_id": 1163, "title": "Run flake8 in Travis", "content": "Clean up one error I missed, ignore another, and configure flake8 using\r\na config file to ignore certain errors. The next step would be to remove\r\nthe F* ignores. But this gets us all the way to running flake8 in\r\ntravis."}}, {"doc": {"_id": 1162, "title": "Silence most flake8 warnings", "content": "Continue my crusade to running flake8 against new contributions by\r\ncleaning up whitespace (and wierdly, the entire indentation of\r\nMigration) to silence most flake8 warnings. AllTests is the remaining\r\noutlier, and requires some thought on how to approach."}}, {"doc": {"_id": 1161, "title": "Organization.has_in_members uses incorrect URL if called from repository instance", "content": "This works correctly (returns `True`):\r\n```python\r\ngithub_client = Github('token')\r\norganization = github_client.get_organization('org')\r\nuser = github_client.get_user('user')\r\norganization.has_in_members(user)\r\n```\r\n\r\nThe same call from repo instance returns `False`:\r\n```python\r\ngithub_client = Github('token')\r\norganization = github_client.get_organization('org')\r\nuser = github_client.get_user('user')\r\nrepo = organization.get_repo('repo')\r\nrepo.organization.has_in_members(user)\r\n```\r\n\r\nThe reason is that requested URL is  referring to `users` namespace instead of `orgs`:\r\n`https://api.github.com/users/...`"}}, {"doc": {"_id": 1160, "title": "Silence more flake8 errors", "content": "Make more whitespace changes to silence flake8 errors under the github\r\ndirectory only."}}, {"doc": {"_id": 1159, "title": "Add Repository methods for pending invitations", "content": "Make a start on implementing more of the invitations API, by adding\r\nmethods to Repository to list and remove pending invitations.\r\n\r\nCloses #1120"}}, {"doc": {"_id": 1158, "title": "Use assertRaises in other exception test in Retry", "content": "I missed this use of try/except in the Retry tests during my last patch,\r\nswitch to using self.assertRaises()."}}, {"doc": {"_id": 1157, "title": "Is there a way to get the content of a file from a specific branch?", "content": ""}}, {"doc": {"_id": 1156, "title": "Add invitee and inviter to Invitation", "content": "Invitations contain information about the user they are for, and\r\nwhich user invited them, so export that too.\r\n\r\nDuring invesigating attmepting to test the new attributes of Invitation,\r\nit was discovered that there are no code paths to fetch them, so add\r\nAuthenticatedUser.get_invitations(). The test added can do double duty."}}, {"doc": {"_id": 1155, "title": "Do not import directly into Retry tests", "content": "The Retry test class was importing Repository directly, which had the\r\nside effect of masking the tests.Repository import in AllTests with\r\ngithub.Repository. Switch to importing github only, which is safe. As a\r\ndrive-by, switch to using self.assertRaises for one of the tests."}}, {"doc": {"_id": 1154, "title": "Adds `get_issue_events` to `PullRequest` object", "content": "Closes #1149 by the simplest possible means."}}, {"doc": {"_id": 1153, "title": "Clean up a lot of pyflakes warnings", "content": "Clean up unused imports or unused variables to mostly silence pyflakes.\r\nWe aren't quite yet in a place where we can run it via Travis, but baby\r\nsteps."}}, {"doc": {"_id": 1152, "title": "Add tests to MANIFEST.in", "content": "Can you add tests to the PyPI package to make it easier for downstream maintainers to verify the package?"}}, {"doc": {"_id": 1151, "title": "Allow name to be specified for upload_asset", "content": "GitRelease.upload_asset() calculates the name based on the filename, and\r\ndoesn't allow it to be overridden. Add a new name argument that is used\r\nif it is set. Drive by changing the default of the content_type argument\r\nto NotSet.\r\n\r\nCloses #1095"}}, {"doc": {"_id": 1150, "title": "Fetching a private repo fails (404)", "content": "```python\r\n>>> from github import Github\r\n>>> github = Github(\"oauth token\")\r\n>>> github.get_repo(\"ddevault/test-repo\") # GitHubException (404)\r\n```\r\n\r\nA similar request with curl succeeds:\r\n\r\n```\r\n$ curl -v -A 'PyGitHub/Python' \\\r\n    -H Accept:'application/vnd.github.v3+json' \\\r\n    -H Authorization:'token [redacted]' \\\r\n    https://api.github.com/repos/ddevault/test-repo # works\r\n```\r\n\r\nWhen trying to direct pygithub through mitmproxy to gather more information, it succeeds (200):\r\n\r\n```\r\n$ mitmproxy -m reverse:https:/api.github.com\r\n```\r\n\r\n```python\r\n>>> from github import Github\r\n>>> github = Github(\"oauth token\", base_url=\"http://localhost:8080\")\r\n>>> github.get_repo(\"ddevault/test-repo\") # works\r\n```"}}, {"doc": {"_id": 1149, "title": "Expose `get_issue_events()` from `PullRequest`", "content": "I'm attempting to script automatically closing old Pull Requests, but letting users re-open them if they are still working on them. I don't want to *keep* closing PRs, so I want to check that a PR hasn't been re-opened before closing it. One way of doing that is to look through the list of \"issue events\", but first I need to use `PullRequest.as_issue()`, which makes a needless API request. \r\n\r\nOnly the issue number is needed for `GET /repos/:owner/:repo/issues/:issue_number/events`, so it should be possible to do directly from the `PullRequest` object. Any chance you could add that method? Similar to `PullRequest.get_issue_comments()` etc."}}, {"doc": {"_id": 1148, "title": "Fixed #1147 Missing support for license attribute in Repository", "content": "This adds new attribute 'license' to Repository. Which allows access to the license information which is already retrieved earlier."}}, {"doc": {"_id": 1147, "title": "Missing support for license attribute in Repository", "content": "There is a missing attribute for the license attribute which is returned when Repository API is called. At the moment there is only get_license function, but that makes another request.\r\n\r\nI have a PR for this issue."}}, {"doc": {"_id": 1146, "title": "Fix assertion in add_to_members", "content": "The role parameter is set to NotSet by default\r\nbut the assertion only allowed str and unicode.\r\nSo it would always fail. Add NotSet to the assertion\r\nto allow calling the function without a role.\r\n\r\nSigned-off-by: Pascal Bach <pascal.bach@nextrem.ch>"}}, {"doc": {"_id": 1145, "title": "What's the best way to get results in bulk?", "content": "Is there a way for PyGitHub to return results as a bulk data dump?\r\n\r\n## What I'd like\r\n\r\nTo be able to run a search query, and get a list of raw JSON, one for each item.\r\n\r\n## What I've tried\r\n\r\nI'll run a query with something like `search_issues(query)`, this returns a paginated list. I loop through the list, and on each \"Issue\" object I grab `raw_data` and turn it all into a DataFrame.\r\n\r\n## Where I've run into challenges\r\n\r\nI've found that returning a list of, e.g., issue objects and then looping through them individually takes a *lot* longer than if I just grab the JSON from the GitHub API directly. Is there some way to just get the whole dump of JSON objects at once rather than making an individual API request for each one?"}}, {"doc": {"_id": 1144, "title": "Add new Organization.get_team_by_slug method", "content": "Add a new API call to Organization that allows fetching teams by\r\nslug.\r\n\r\nCloses #1116"}}, {"doc": {"_id": 1143, "title": "topics attribute always return None, even when get_topics() return a list of topics", "content": "For example:\r\n`g.get_repo('nteract/hydrogen').topics` return `None`\r\n\r\n`g.get_repo('nteract/hydrogen').get_topics()` return `['atom', 'data-science', 'hydrogen', 'ipython', 'jupyter', 'jupyter-kernels', 'nteract', 'repl']`\r\n\r\nIf I add `headers={\"Accept\": Consts.mediaTypeTopicsPreview}` to the repo request, I can get the topics list in the attribute as well.\r\n\r\nI can create a PR if needed."}}, {"doc": {"_id": 1142, "title": "Persistence for PyGithubObjects from v1.19.0?", "content": "[According to changes in version 1.19.0 ](https://github.com/PyGithub/PyGithub/blob/master/doc/changes.rst#version-1190-september-8th-2013-akfishs-edition) there should be a `save` method for making `github.GithubObject.GithubObject` persistent. \r\n\r\nHowever, I cannot find the related code [where I would expect it](https://github.com/PyGithub/PyGithub/blob/master/github/GithubObject.py) (the [related documentation](https://pygithub.readthedocs.io/en/latest/github_objects.html#github.GithubObject.GithubObject) does not also not list this functionality). \r\n\r\nWhat happened? I would love to have this feature!\r\n"}}, {"doc": {"_id": 1141, "title": "Add support for the preview of the Vulnerability Alert APIs", "content": "* Add support for the preview APIs related to Vulnerability Alerts on repositories (https://developer.github.com/changes/2019-04-24-vulnerability-alerts/) \r\n* Added support for three API endpoints:\r\n    * `GET /repos/:owner/:repo/vulnerability-alerts`- Returns the status of Security Alerts for the repo\r\n    * `PUT /repos/:owner/:repo/vulnerability-alerts` - Enable Security Alerts for the repo\r\n    * `DELETE` /repos/:owner/:repo/vulnerability-alerts` - Disable Security Alerts for the repo\r\n\r\nI had a need for this so I added it. Feel free to reject this if you want to wait for full official support for the APIs. \r\n\r\nThe APIs require owner permissions for the repository in question. I haven't written any checks to see if permissions are correct or not. \r\n"}}, {"doc": {"_id": 1140, "title": "Feature request: upload_asset with data in memory", "content": "It would be nice to have a way to use GitRelease.upload_asset() with a blob of data in memory without having to write it to disk first.\r\n\r\nCurrently it is implemented via https://github.com/PyGithub/PyGithub/blob/master/github/Requester.py#L360 which uses `open()`."}}, {"doc": {"_id": 1139, "title": "Add sorting capability to Organization.get_repos()", "content": "Following https://developer.github.com/v3/repos/#list-organization-repositories, and sorting capability to [Organization.get_repos()](https://github.com/PyGithub/PyGithub/blob/master/github/Organization.py#L763) function.\r\n\r\nTest data were \"crafted\" based on [Organization.testGetRepos.txt](https://github.com/PyGithub/PyGithub/blob/master/tests/ReplayData/Organization.testGetRepos.txt) data as i don't have access to tested organization"}}, {"doc": {"_id": 1138, "title": "Get unauthenticated user's data", "content": "Since profile are public is there a way to use PyGithub to get the public data on users without needing their password, i.e. only having their username?\r\n\r\n```\r\ng = Github(\"user\", \"password\")\r\ng.get_user()\r\n```\r\n... fails if you do not provide a password\r\n"}}, {"doc": {"_id": 1137, "title": "Replacing a specified string, Iterating over every file within every repo.", "content": "Hello,\r\n\r\nSorry for the long title.\r\n\r\nEssentially, I am attempting to write a script which will iterate over every repository I own. Then for a specific string and if found in any of the files within the repo; replace it.\r\n\r\nIs this possible? I am aware I need to also use `update_file`. Could somebody point me in the right direction?\r\n\r\nSo far I have got:\r\n\r\n```python\r\n\"\"\"\r\nA Python 3.7 script to remove a specific string from all file(s) and repos containing a specified string.\r\n\"\"\"\r\n\r\nACCESS_TOKEN = \"Sometoken\"\r\nSTR_TO_REPLACE = \"The string to find in a file and remove.\"\r\n\r\nfrom github import Github\r\n\r\ng = Github(ACCESS_TOKEN)\r\nfor repo in g.get_user().get_repos(type=\"owner\"):\r\n    print(repo.name)\r\n    # Fetch all content from the repo.\r\n    repo_contents = repo.get_contents(\"\")\r\n    # Show all repo contents.\r\n    print(repo_contents)\r\n    for file in repo_contents:\r\n        print(file.name)\r\n        try:\r\n            # Search the file for the specified string and replace it with something else.\r\n            # Not sure how to do this yet. This is where I need some help :-)\r\n        except:\r\n            # Some error which occurs if the string is not found. \r\n            # Tell user the string isn't in the file.\r\n            print(f\"The string {STR_TO_REPLACE} wasn't found in {file.name}\")\r\n```\r\n\r\nAny help would be appreciated.\r\n"}}, {"doc": {"_id": 1136, "title": "Paginated list reversed only gives the first page of results backwards", "content": "When I do\r\n```\r\ng = Github(\"xxx\")\r\nrepo = g.get_repo(\"xxx\")\r\n\r\nfor comm in repo.get_commits(since=datetime).reversed:\r\n    ....\r\n```\r\nit only goes through the most recent 30 results in reverse order.\r\n\r\nI was able to fix this with\r\n```\r\ndef reverse_github_results(paginated_list):\r\n    for i in range(paginated_list.totalCount//30, -1, -1):\r\n        page = paginated_list.get_page(i)\r\n        page.reverse()\r\n        for item in page:\r\n            yield item\r\n```\r\nbut this possibly runs a bit slower and I thought I should let you guys know\r\n"}}, {"doc": {"_id": 1135, "title": "GithubIntegration: enable getting installation", "content": "I tried adding this to the Repository class but since the request requires jwt token and the special headers, it was too much of a hassle.\r\n\r\n~~I need a bit of help with adding replay tests.~~ Figured it out, ready for review.\r\n\r\nRelated #725 #828 #1021"}}, {"doc": {"_id": 1134, "title": "Issue with search_code", "content": "I am doing:\r\n```\r\n            query = \"extension:py+repo:eriklindernoren/PyTorch-GAN\"\r\n            code_files = self.g.search_code(query)\r\n```\r\n\r\nThe error I get, however is:\r\n```\r\nGET https://api.github.com/search/code?q=extension%3Apy%2Brepo%3Aeriklindernoren%2FPyTorch-GAN {'Authorization': 'token (oauth token removed)', 'User-Agent': 'PyGithub/Python'} None ==> 422 {'server': 'GitHub.com', 'date': 'Sun, 09 Jun 2019 18:00:30 GMT', 'content-type': 'application/json; charset=utf-8', 'content-length': '309', 'status': '422 Unprocessable Entity', 'x-ratelimit-limit': '30', 'x-ratelimit-remaining': '9', 'x-ratelimit-reset': '1560103242', 'cache-control': 'no-cache', 'x-oauth-scopes': 'repo', 'x-accepted-oauth-scopes': '', 'x-github-media-type': 'github.v3; format=json', 'access-control-expose-headers': 'ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type', 'access-control-allow-origin': '*', 'strict-transport-security': 'max-age=31536000; includeSubdomains; preload', 'x-frame-options': 'deny', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'referrer-policy': 'origin-when-cross-origin, strict-origin-when-cross-origin', 'content-security-policy': \"default-src 'none'\", 'x-github-request-id': 'DF64:1A57:2693796:4CCC116:5CFD493D'} {\"message\":\"Validation Failed\",\"errors\":[{\"message\":\"Search text is required when searching source code. Searches that use qualifiers only are not allowed. Were you searching for something else?\",\"resource\":\"Search\",\"field\":\"q\",\"code\":\"invalid\"}],\"documentation_url\":\"https://developer.github.com/v3/search/\"}\r\n```\r\n\r\nHowever, the URL, when loaded, gives a valid API response."}}, {"doc": {"_id": 1133, "title": "How to upload zip file to repository?", "content": "Basically, I am trying to upload a zipfile with create_file using pygithub.\r\n\r\nIf I were to use :\r\n```myfork.create_file(path_to_zip, \"Upload Zip\", zipfile_contents)```\r\nHow would I get 'zipfile_contents' to actually be the zipfile, or is there an alternative method.\r\nThanks"}}, {"doc": {"_id": 1132, "title": "Add two factor attributes on organizations", "content": "If you have the role of `org:admin` on an organization, you can view whether or not a second factor is required in order to be a member of an organization. (See https://developer.github.com/v3/orgs/#get-an-organization for more information). This PR adds `two_factor_requirement_enabled` as an attribute to the organization model. \r\n\r\nIf a user doesn't have the correct permissions set on their personal access token or doesn't have `org:admin`, this value will be null in the JSON and `None` in pygithub."}}, {"doc": {"_id": 1131, "title": "PyGithub and proxy issues", "content": "Hi team,\r\nI need to ask a question.\r\nI just following the PyGithub introduction documentation step by step but it looks like I could be facing proxy issues.\r\nfrom github import Github\r\nuser=\"xxx\" \r\nPass=\"xxx\"\r\ng = Github(user,Pass)\r\nor using an access token\r\n#g = Github(\"access_token\")\r\nGithub Enterprise with custom hostname\r\ng = Github(base_url=\"https://github.mylabs.com.au/api/v3\")\r\ng.get_user() \r\nAuthenticatedUser(login=None)\r\nfor repo in g.get_user().get_repos(): \r\nprint(repo.name) \r\nrepo.edit(has_wiki=False) \r\n# to see all the available attributes and methods \r\nprint(dir(repo))\r\n \r\nthen I get a timeout error: \r\n\r\nConnectTimeout: HTTPSConnectionPool(host='github.mylabs.com.au', port=443): Max retries exceeded with url: /api/v3/user/repos (Caused by ConnectTimeoutError(<urllib3.connection.VerifiedHTTPSConnection object at 0x000000000737AAC8>, 'Connection to github.mylabs.com.au timed out. (connect timeout=15)'))\r\n\r\nMy question is whether I can set the proxy used by PyGithub... \r\n\r\nThe problem is that I've been looking everywhere and it looks like a lot of people seems to have hit the same problem but could not see anyone providing a fix. For example before I was testing with the REQUESTS package (as shown below) and there was a way to set the proxy:\r\nimport requests \r\nproxies = { \r\n'http':'http://proxy.mycompany.corp:8080', \r\n'https': 'https://proxy.mycompany.corp:8080', \r\n}\r\nr = requests.get('https://github.mylabs.com.au/iagcl/iag-edh-data/pulls', proxies = proxies)\r\n\r\nIf you please advise me how to do similar thing with the PyGithub would be great... Thanks again ...\r\n"}}, {"doc": {"_id": 1130, "title": "Repository.get_hooks() returns PaginatedList which does not iterate correctly", "content": "I have repositories with >30 webhooks. If i run\r\n```python\r\ncount = 0\r\nfor hook in repository.get_hooks():\r\n   print(count)\r\n   count += 1\r\n```\r\nI end up with 30 hooks. However, if I start requesting additional pages, then I get the full number of hooks.\r\n```python\r\nhooks = []\r\npage = 0\r\nwhile repo.get_hooks().get_page(page):\r\n   hooks += list(repo.get_hooks().get_page(page))\r\n   page += 1\r\nprint( len(hooks) ) # returns, e.g., 58\r\n```\r\n\r\nMy suspicion is that something with the iterator is wrong or I am using the library wrongly. Please provide me with some hints.\r\n\r\nI tried to implement a test case but I couldn't run the create_hook() method successfully. Is there any mock or a documentation available on how to create unit tests for these cases?\r\n\r\nBest regards\r\nSebastian"}}, {"doc": {"_id": 1129, "title": "Support list with protected branches only", "content": "Add support to protected flag parameter when calling List branches endpoint.\r\n\r\nhttps://developer.github.com/v3/repos/branches/#list-branches"}}, {"doc": {"_id": 1128, "title": "[Feature Request] Ability to toggle repository features", "content": "I think it could be quite helpful if we could toggle repository features like Wikis, Issues, and Sponsorships on and off via PyGithub. A possible use case would be setting up multiple new repositories with the same settings.\r\n\r\nP.S.: Thanks for all your hard work on this project. It's been a great boon in my development flow."}}, {"doc": {"_id": 1127, "title": "Mock for testing", "content": "Is there a way to fake GitHub APIs like some kind of a mock? \r\nsomething like \r\n```\r\ng = Github(fake=True)\r\nrepo = g.get_repo('non-existing/repo', default={'name': 'repo', ...})\r\n```\r\n"}}, {"doc": {"_id": 1126, "title": "Get followers", "content": "How to get followers and following?"}}, {"doc": {"_id": 1125, "title": "Add description field when creating a new team", "content": "https://developer.github.com/v3/teams/#create-team has a supported field for `description`.\r\nThis PR adds support for creating teams with a description."}}, {"doc": {"_id": 1124, "title": "Delete tag in Github ", "content": "Hi, \r\nI just wanted to know if there is any way to delete a tag using pygithub as after deleting the release, the tag still remains. Searched in docs for git tag, had only methods of creation but not deletion.\r\n\r\nThanks"}}, {"doc": {"_id": 1123, "title": "Small docs problem", "content": "At the documentation for [get_branch](https://pygithub.readthedocs.io/en/latest/github_objects/Repository.html#github.Repository.Repository.get_branch), the link to\r\n\r\n    Calls: GET /repos/:owner/:repo/branches/:branch\r\n\r\nin the API should go to this [link](https://developer.github.com/v3/repos/branches/#get-branch) instead of http://developer.github.com/v3/repos\r\n"}}, {"doc": {"_id": 1122, "title": "Set custom request headers", "content": "As a developer interested in cutting-edge github API features, I want a way to append custom `Accepts` headers to all requests so that I don't have to wait for them (the headers) to be hard-coded into the library.\r\n\r\nSpecifically, I've been wanting to query with the [starfox preview](https://developer.github.com/v4/previews/) header and been unable to so far."}}, {"doc": {"_id": 1121, "title": "Is it possible to get back header data from a request?", "content": "Specifically, I'm doing\r\n\r\n```\r\nrepo.get_contents(file_content.path)\r\n```\r\n\r\nAnd I want the returned header as well"}}, {"doc": {"_id": 1120, "title": "How to remove sent invitations", "content": "I used repo.add_to_collaborators to add massively some users to some repositories, but now I have to revert the action for those who haven't accepted the invitation yet, how can I list the invitations and cancel them?\r\nIs there a way to use with PyGithub this API [example](https://developer.github.com/v3/repos/invitations/#delete-a-repository-invitation)?"}}, {"doc": {"_id": 1119, "title": "github.GithubException.GithubException: 401 {'message': 'Requires authentication',", "content": "Hello PyGithub Community - First off, thank you for supporting this tool you folks are the best! \r\n\r\nIssue: I am attempting to authenticate to github enterprise using client_id and client_secret. I need to leverage PyGithub to post issues. Please let me know if there is a better route I should take, below are the errors I am hitting. \r\n\r\nCode: \r\n```\r\nfrom github import Github\r\n\r\nclient_id=<xyz>\r\nclient_secret=<abc>\r\ng = Github(base_url=\"https://<enterprise>/api/v3\", client_id=client_id, client_secret=client_secret)\r\n\r\nfor repo in g.get_user().get_repos():\r\n    print(repo.name)\r\n\r\nrepo = g.get_repo(\"<repo>\")\r\nrepo.create_issue(title=\"This is a new issue\", body=\"This is the issue body\" \r\n```\r\nError: \r\n```\r\nTraceback (most recent call last):\r\n    File \"script.py\", line 7, in <module>\r\n      for repo in g.get_user().get_repos():\r\n    File \"/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/github/PaginatedList.py\", line 64, in __iter__\r\n      newElements = self._grow()\r\n    File \"/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/github/PaginatedList.py\", line 76, in _grow\r\n      newElements = self._fetchNextPage()\r\n    File \"/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/github/PaginatedList.py\", line 201, in _fetchNextPage\r\n      headers=self.__headers\r\n    File \"/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/github/Requester.py\", line 275, in requestJsonAndCheck\r\n      return self.__check(*self.requestJson(verb, url, parameters, headers, input, self.__customConnection(url)))\r\n    File \"/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/github/Requester.py\", line 286, in __check\r\n      raise self.__createException(status, responseHeaders, output)\r\n  github.GithubException.GithubException: 401 {'message': 'Requires authentication', 'documentation_url': 'https://developer.github.com/enterprise/2.16/v3/repos/#list-your-repositories'}\r\n```\r\n\r\nThanks again for all the help!"}}, {"doc": {"_id": 1118, "title": "Update Repository.rst", "content": "the example confused me until I found https://github.com/PyGithub/PyGithub/issues/545"}}, {"doc": {"_id": 1117, "title": "Feature Request: Deployments API", "content": "It appears that the Deployments API isn't currently in PyGithub. This API has been around for years. Is there any chance it could get added to PyGithub?\r\n\r\nhttps://developer.github.com/v3/repos/deployments/"}}, {"doc": {"_id": 1116, "title": "Organization needs get_team_by_slug()", "content": "https://developer.github.com/v3/teams/#get-team-by-name\r\n\r\nThis API call is missing. "}}, {"doc": {"_id": 1115, "title": "github.GithubException.RateLimitExceededException", "content": "I am trying to fetch the number of open issues using the following code in my Flask application.\r\n```\r\ng = Github()\r\n\r\nrepo = g.get_repo(repo_name)\r\n\r\nopen_pulls = repo.get_pulls(state='open')\r\nopen_pull_titles = [pull.title for pull in open_pulls]\r\n\r\nopen_issues = repo.get_issues(state='open')\r\nopen_issues = [issue for issue in open_issues if issue.title not in open_pull_titles]\r\n```\r\nand I get the error `github.GithubException.RateLimitExceededException: `.\r\n\r\n`repo.get_issues()` returns the count of open issues plus pull requests.\r\n\r\n"}}, {"doc": {"_id": 1114, "title": "PyGithub-1.36 and later cannot get files in a folder or file with a space in name", "content": "I have had a file that i checkout using pygithub\r\nwhich was working great with 1.35\r\nwe tried moving to latest pygithub and the simple line\r\n        self.github_api.git_repo.get_file_contents(urllib.quote('file with spaces.txt') , \"master\")\r\nfails\r\n\r\n        self.github_api.git_repo.get_file_contents(urllib.quote('/iOS/Supporting Files/Info.plist') , \"master\")  \r\nalso fails, yet works in 1.35 \r\n\r\nThis is blocking us from moving to later versions, as it breaks our release automation scripts.\r\n"}}, {"doc": {"_id": 1113, "title": "can not connect to github with ssl", "content": "  File \"C:\\Users\\lenovo\\AppData\\Local\\conda\\conda\\envs\\python1v3\\lib\\site-packages\\github\\MainClass.py\", line 123, in rate_limiting\r\n    self.get_rate_limit()\r\n  File \"C:\\Users\\lenovo\\AppData\\Local\\conda\\conda\\envs\\python1v3\\lib\\site-packages\\github\\MainClass.py\", line 145, in get_rate_limit\r\n    '/rate_limit'\r\n  File \"C:\\Users\\lenovo\\AppData\\Local\\conda\\conda\\envs\\python1v3\\lib\\site-packages\\github\\Requester.py\", line 172, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, cnx))\r\n  File \"C:\\Users\\lenovo\\AppData\\Local\\conda\\conda\\envs\\python1v3\\lib\\site-packages\\github\\Requester.py\", line 213, in requestJson\r\n    return self.__requestEncode(cnx, verb, url, parameters, headers, input, encode)\r\n  File \"C:\\Users\\lenovo\\AppData\\Local\\conda\\conda\\envs\\python1v3\\lib\\site-packages\\github\\Requester.py\", line 252, in __requestEncode\r\n    status, responseHeaders, output = self.__requestRaw(cnx, verb, url, requestHeaders, encoded_input)\r\n  File \"C:\\Users\\lenovo\\AppData\\Local\\conda\\conda\\envs\\python1v3\\lib\\site-packages\\github\\Requester.py\", line 277, in __requestRaw\r\n    requestHeaders\r\n  File \"C:\\Users\\lenovo\\AppData\\Local\\conda\\conda\\envs\\python1v3\\lib\\http\\client.py\", line 1239, in request\r\n    self._send_request(method, url, body, headers, encode_chunked)\r\n  File \"C:\\Users\\lenovo\\AppData\\Local\\conda\\conda\\envs\\python1v3\\lib\\http\\client.py\", line 1285, in _send_request\r\n    self.endheaders(body, encode_chunked=encode_chunked)\r\n  File \"C:\\Users\\lenovo\\AppData\\Local\\conda\\conda\\envs\\python1v3\\lib\\http\\client.py\", line 1234, in endheaders\r\n    self._send_output(message_body, encode_chunked=encode_chunked)\r\n  File \"C:\\Users\\lenovo\\AppData\\Local\\conda\\conda\\envs\\python1v3\\lib\\http\\client.py\", line 1026, in _send_output\r\n    self.send(msg)\r\n  File \"C:\\Users\\lenovo\\AppData\\Local\\conda\\conda\\envs\\python1v3\\lib\\http\\client.py\", line 964, in send\r\n    self.connect()\r\n  File \"C:\\Users\\lenovo\\AppData\\Local\\conda\\conda\\envs\\python1v3\\lib\\http\\client.py\", line 1400, in connect\r\n    server_hostname=server_hostname)\r\n  File \"C:\\Users\\lenovo\\AppData\\Local\\conda\\conda\\envs\\python1v3\\lib\\ssl.py\", line 407, in wrap_socket\r\n    _context=self, _session=session)\r\n  File \"C:\\Users\\lenovo\\AppData\\Local\\conda\\conda\\envs\\python1v3\\lib\\ssl.py\", line 817, in __init__\r\n    self.do_handshake()\r\n  File \"C:\\Users\\lenovo\\AppData\\Local\\conda\\conda\\envs\\python1v3\\lib\\ssl.py\", line 1077, in do_handshake\r\n    self._sslobj.do_handshake()\r\n  File \"C:\\Users\\lenovo\\AppData\\Local\\conda\\conda\\envs\\python1v3\\lib\\ssl.py\", line 689, in do_handshake\r\n    self._sslobj.do_handshake()\r\nsocket.timeout: _ssl.c:835: The handshake operation timed out\r\n"}}, {"doc": {"_id": 1112, "title": "remove_from_membership(member) missing team_id", "content": "https://pygithub.readthedocs.io/en/latest/github_objects/Team.html#github.Team.Team.remove_membership\r\n\r\nhttps://developer.github.com/v3/teams/members/#remove-team-membership\r\n\r\nCorrect me if I'm wrong, but this does not fully implement the api.\r\nThe API has team_id and username\r\n    DELETE /teams/:team_id/memberships/:username\r\n\r\nPyGithub's Implementation only has username \r\nParameters: | member \u2013 github.NamedUser.NamedUser\r\n\r\nI cannot pass team_id so I am forced to remove user from all teams."}}, {"doc": {"_id": 1111, "title": "Wrap more of the Github project API", "content": "- organization projects\r\n- team permissions on projects"}}, {"doc": {"_id": 1110, "title": "fixes #1106 for GitHub Enterprise API", "content": "fixes #1106 for GitHub Enterprise API"}}, {"doc": {"_id": 1109, "title": "Rapid decrease of search API rate limit after 1 function call", "content": "I am using the search_code function and am occasionally seeing the remaining rate limit for the search API decrease by more than 1 after the function is called. According to the Github API documentation, it should decrease by 1 per request and are allowed 30 requests per minute. So my 1 request using search_code shouldn't be exceeding the rate limit however it often does. Has anyone else experienced this kind of issue or are there any ideas for why this function call is showing as more than 1 request against the rate limit?"}}, {"doc": {"_id": 1108, "title": "Crashing due to recursion when calling get_stats_commit_activity on large repos", "content": "The repo this happened on is https://github.com/chromium/chromium\r\n\r\n```\r\nTraceback (most recent call last):\r\n<my code pruned>\r\n    activity = repo.get_stats_commit_activity()\r\n  File \"/usr/local/lib/python3.6/site-packages/github/Repository.py\", line 2384, in get_stats_commit_acti\r\nvity\r\n    self.url + \"/stats/commit_activity\"\r\n  File \"/usr/local/lib/python3.6/site-packages/github/Requester.py\", line 264, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, self.__customConnection(\r\nurl)))\r\n  File \"/usr/local/lib/python3.6/site-packages/github/Requester.py\", line 324, in requestJson\r\n    return self.__requestEncode(cnx, verb, url, parameters, headers, input, encode)\r\n  File \"/usr/local/lib/python3.6/site-packages/github/Requester.py\", line 377, in __requestEncode\r\n    status, responseHeaders, output = self.__requestRaw(cnx, verb, url, requestHeaders, encoded_input)\r\n  File \"/usr/local/lib/python3.6/site-packages/github/Requester.py\", line 416, in __requestRaw\r\n    return self.__requestRaw(original_cnx, verb, url, requestHeaders, input)\r\n  File \"/usr/local/lib/python3.6/site-packages/github/Requester.py\", line 416, in __requestRaw\r\n    return self.__requestRaw(original_cnx, verb, url, requestHeaders, input)\r\n  File \"/usr/local/lib/python3.6/site-packages/github/Requester.py\", line 416, in __requestRaw\r\n    return self.__requestRaw(original_cnx, verb, url, requestHeaders, input)\r\n  [Previous line repeated 956 more times]\r\n  File \"/usr/local/lib/python3.6/site-packages/github/Requester.py\", line 401, in __requestRaw\r\n    response = cnx.getresponse()\r\n  File \"/usr/local/lib/python3.6/site-packages/github/Requester.py\", line 109, in getresponse\r\n    r = verb(url, headers=self.headers, data=self.input, timeout=self.timeout, verify=self.verify, allow_\r\nredirects=False)\r\n  File \"/usr/local/lib/python3.6/site-packages/requests/sessions.py\", line 546, in get\r\n    return self.request('GET', url, **kwargs)\r\n  File \"/usr/local/lib/python3.6/site-packages/requests/sessions.py\", line 533, in request\r\n    resp = self.send(prep, **send_kwargs)\r\n  File \"/usr/local/lib/python3.6/site-packages/requests/sessions.py\", line 646, in send\r\n    r = adapter.send(request, **kwargs)\r\n  File \"/usr/local/lib/python3.6/site-packages/requests/adapters.py\", line 533, in send\r\n    return self.build_response(request, resp)\r\n  File \"/usr/local/lib/python3.6/site-packages/requests/adapters.py\", line 265, in build_response\r\n    response = Response()\r\n  File \"/usr/local/lib/python3.6/site-packages/requests/models.py\", line 607, in __init__\r\n    self.headers = CaseInsensitiveDict()\r\n  File \"/usr/local/lib/python3.6/site-packages/requests/structures.py\", line 44, in __init__\r\n    self.update(data, **kwargs)\r\n  File \"/usr/local/lib/python3.6/_collections_abc.py\", line 839, in update\r\n    if isinstance(other, Mapping):\r\n  File \"/usr/local/lib/python3.6/abc.py\", line 184, in __instancecheck__\r\n    if subclass in cls._abc_cache:\r\n  File \"/usr/local/lib/python3.6/_weakrefset.py\", line 75, in __contains__\r\n    return wr in self.data\r\nRecursionError: maximum recursion depth exceeded in comparison\r\n```\r\n\r\nTbf that page [doesn't even load for me in the browser](https://github.com/chromium/chromium/graphs/contributors) but it would be nice to get a nicer (and earlier, took a while for it to crash) error message."}}, {"doc": {"_id": 1107, "title": "issue: add lock/unlock", "content": ""}}, {"doc": {"_id": 1106, "title": "Add 'visibility' parameter to get_repos", "content": "I'm working with Github Enterprise API and I cannot get a full list of private repositories without this parameter being allowed.  Only 'since' works here"}}, {"doc": {"_id": 1105, "title": "totalCount shows wrong number of open issues", "content": "```\r\nfrom github import Github\r\ng = Github('Access_Token')\r\nrepo = g.get_repo('pygithub/pygithub')\r\nopen_issues = repo.get_issues(state='open')\r\nprint(open_issues.totalCount)\r\n```\r\n\r\nThis code prints 77, but github repo shows 60 open issues.\r\n\r\nWhat is this extra count about?\r\n![open_issues](https://user-images.githubusercontent.com/7472569/57015479-a3931200-6c32-11e9-82b9-1154567c083d.JPG)\r\n"}}, {"doc": {"_id": 1104, "title": "Delete brach associated with pr", "content": "Issue #580 Added a `delete_branch` flag to the `pr.merge(...)` method.  If the flag is true, it checks if the branch is part of other PRs.  If it is not, then it deletes the branch.  "}}, {"doc": {"_id": 1103, "title": "Regular 502 even with 1.43.6", "content": "Hello\r\n\r\nwe are still facing regular 502 API errors although we use 1.43.6 version with a retry set to 10.\r\nIt seems to happen most of the time when getting the \"email\" field of a user.\r\n\r\n```\r\n File \"/home/abalone/abalone_github/git/src/venv/local/lib/python2.7/site-packages/github/NamedUser.py\", line 145, in email\r\n    self._completeIfNotSet(self._email)\r\n  File \"/home/abalone/abalone_github/git/src/venv/local/lib/python2.7/site-packages/github/GithubObject.py\", line 263, in _completeIfNotSet\r\n    self._completeIfNeeded()\r\n  File \"/home/abalone/abalone_github/git/src/venv/local/lib/python2.7/site-packages/github/GithubObject.py\", line 267, in _completeIfNeeded\r\n    self.__complete()\r\n  File \"/home/abalone/abalone_github/git/src/venv/local/lib/python2.7/site-packages/github/GithubObject.py\", line 272, in __complete\r\n    self._url.value\r\n  File \"/home/abalone/abalone_github/git/src/venv/local/lib/python2.7/site-packages/github/Requester.py\", line 275, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, self.__customConnection(url)))\r\n  File \"/home/abalone/abalone_github/git/src/venv/local/lib/python2.7/site-packages/github/Requester.py\", line 286, in __check\r\n    raise self.__createException(status, responseHeaders, output)\r\nGithubException: 502 {u'message': u'Server Error'}\r\n```\r\n\r\nAny suggestions?"}}, {"doc": {"_id": 1102, "title": "Request API preview when asking for labels", "content": "Pass preview \"Access\" headers for label descriptions when requesting\r\n\r\nFixes the first part of #1101 "}}, {"doc": {"_id": 1101, "title": "get_labels/get_label does not return description", "content": "It seems that it is missing the \"Accept\" : \"application/vnd.github.symmetra-preview+json\" header which is added for the edit call\r\n\r\nAdditionally, if you pass it and have \"api_preview = True\" it will be overwritten "}}, {"doc": {"_id": 1100, "title": "PullRequest: Add draft attribute", "content": "This requires a header to be set: https://developer.github.com/v3/pulls/#list-pull-requests"}}, {"doc": {"_id": 1099, "title": "Fix permissions (no exec bit) for data and python modules (without shebang) files", "content": ""}}, {"doc": {"_id": 1098, "title": "Move tests/ back into github/tests and ship within tarball, or at least provide github.testing?", "content": "#1031 recently placed `tests/` outside of the `github` package. The main reasoning, if I got it right from #672, is the size -- tests indeed add up to the distribution.  I personally from time to time  do run tests of the package I am \"questioning\", which cannot be done if no `tests/` shipped.  To my knowledge, many (if not most) packages do ship `tests` subpackages as part of their packages. \r\nMoreover, my use case is actually to consider using `github.tests.Framework`  in our ([datalad](http://datalad.org)) tests to verify correct operation of our code which makes use of the `github` package.   I am not sure if that might be advised against, but now I wouldn't even be able to do so since there is no installed `github.tests` module.  If you see `Framework` to be potentially reused by 3rd party packages like ours, and if you insist that no `tests/` shipped as part of the `github` package, may be it makes sense then to move `Framework` components to e.g. `github.testing` (analogous to `numpy.testing` etc)?"}}, {"doc": {"_id": 1097, "title": " PyGithub module does not work with Python 3.7.2", "content": "When try to running the simple demo after doing the installation throws the following:\r\n\r\nTraceback (most recent call last):\r\n  File \"<pyshell#0>\", line 1, in <module>\r\n    from github import Github\r\nModuleNotFoundError: No module named 'github\r\n\r\nOS: macOS Mojave 10.14.4\r\nPython: 3.7.2"}}, {"doc": {"_id": 1096, "title": "transfer issue", "content": "I wonder if the Beta  \"transfer issue\" will be available any time soon?"}}, {"doc": {"_id": 1095, "title": "Allow setting `name` for upload_asset", "content": "Currently, PyGithub uses `path.basename` for the `name` of the file assets -- could it be added that I can choose my own name? I can of course rename the file before upload, but it would be easier if I could just specify the name."}}, {"doc": {"_id": 1094, "title": "Add List pending organization invites", "content": "The GitHub v3 API has an API to [list pending organization invitations](https://developer.github.com/v3/orgs/members/#list-pending-organization-invitations). This would be great to have implemented in PyGithub.\r\n\r\nI have a branch in my fork which solves this but I am not quite show to to go about running the test but have created an example one here. Please review my PR and let me know if there is anything I can do to assist.\r\n"}}, {"doc": {"_id": 1093, "title": "Add support for custom base_url in GithubIntegration class", "content": "The gihub api URL is hardcoded in the GithubIntegration Class.\r\n\r\nThis PR is an attempt to let the user change the GitHub Domain, when it's using not github.com"}}, {"doc": {"_id": 1092, "title": "Can I fetch using PyGithub?", "content": "How to convert this GitPython code to PyGithub?\r\n``` python\r\nfrom git import Repo\r\ngitrepo = Repo(os.getcwd())\r\ngitrepo.remotes.origin.fetch()\r\n```"}}, {"doc": {"_id": 1091, "title": "PullRequest.edit() throws UnknownObjectException", "content": "Hi there, I'm able to retrieve a PR but I get an UnknownObjectException when I try to edit it.  Here's my code:\r\n\r\nGetting the PR works:\r\n```\r\nfrom github import Github\r\nghclient = Github(CREDS)\r\nrepo = ghclient.get_repo(REPO_NAME)\r\npull = repo.get_pull(PULL_NUM)\r\nprint(pull)\r\n\r\n# PullRequest(title=\"My title\", number=PULL_NUM)\r\n```\r\n\r\nHowever when I try to edit the PR, it throws an UnknownObjectException:\r\n```\r\nrevised_title = \"My new title\"\r\npull.edit(revised_title)\r\n\r\n# Throws: \r\n---------------------------------------------------------------------------\r\nUnknownObjectException                    Traceback (most recent call last)\r\n<ipython-input-117-449b848bf9f4> in <module>\r\n      5 help(pull.edit)\r\n      6 \r\n----> 7 pull.edit(revised_title)\r\n\r\n~/.virtualenvs/myenv/lib/python3.7/site-packages/github/PullRequest.py in edit(self, title, body, state, base)\r\n    514             \"PATCH\",\r\n    515             self.url,\r\n--> 516             input=post_parameters\r\n    517         )\r\n    518         self._useAttributes(data)\r\n\r\n~/.virtualenvs/myenv/lib/python3.7/site-packages/github/Requester.py in requestJsonAndCheck(self, verb, url, parameters, headers, input)\r\n    273 \r\n    274     def requestJsonAndCheck(self, verb, url, parameters=None, headers=None, input=None):\r\n--> 275         return self.__check(*self.requestJson(verb, url, parameters, headers, input, self.__customConnection(url)))\r\n    276 \r\n    277     def requestMultipartAndCheck(self, verb, url, parameters=None, headers=None, input=None):\r\n\r\n~/.virtualenvs/myenv/lib/python3.7/site-packages/github/Requester.py in __check(self, status, responseHeaders, output)\r\n    284         output = self.__structuredFromJson(output)\r\n    285         if status >= 400:\r\n--> 286             raise self.__createException(status, responseHeaders, output)\r\n    287         return responseHeaders, output\r\n    288 \r\n\r\nUnknownObjectException: 404 {'message': 'Not Found', 'documentation_url': 'https://developer.github.com/v3/pulls/#update-a-pull-request'}\r\n```\r\n\r\nCould this be a permissions problem?  I'm stumped.  Thanks!"}}, {"doc": {"_id": 1090, "title": "Add code coverage", "content": "Closes #1089\r\n"}}, {"doc": {"_id": 1089, "title": "Add Coverage", "content": "It would be nice to add the coverage to the readme.\r\n\r\n I can help with that if needed, but someone with admin access need to register the app to codecov. Then, in travis or semaphore-ci the coverage can be generated. "}}, {"doc": {"_id": 1088, "title": "search_commits, missing repository key", "content": "I would like to get a GitHub Repository URL from a Commit HASH. This is feasible with the API:\r\n\r\n```python\r\n    import json\r\n    import requests\r\n    \r\n    def search_commits(sha):\r\n       headers = {'Accept': 'application/vnd.github.cloak-preview'}\r\n       req = requests.get('http://api.github.com/search/commits',\r\n           {'q': sha},\r\n           headers=headers)\r\n       return json.loads(req.text)\r\n    \r\n    commit = search_commits('e83c5163316f89bfbde7d9ab23ca2e25604af290')['items'][0]\r\n    clone_url = commit['repository']['url']\r\n```\r\n\r\nThen I tried the same with `PyGitHub`:\r\n\r\n```python\r\n    from github import Github\r\n    g = Github()\r\n    \r\n    commit = g.search_commits('e83c5163316f89bfbde7d9ab23ca2e25604af290')[0]\r\n```\r\n\r\nUnfortunately in this result (even in `commit.raw_data`) there is no key `repository`. \r\n\r\nIt seems PyGitHub uses `search/commits` as described here: https://developer.github.com/v3/search/#search-commits\r\n\r\nBut instead of this object it returns a Commit object https://developer.github.com/v3/repos/commits/\r\n\r\nHow can I get the URL of the repository?"}}, {"doc": {"_id": 1087, "title": "Listing GitHub Enterprise Private Repo gets no repo at all", "content": "Hi,\r\n\r\nI am successfully listing all repos belonging to a person on GHEnterprise, when all of them are public. If all repositories are private, get_repos() lists nothing.\r\n\r\nBy looking at GitHub v3 documentation:\r\nhttps://developer.github.com/v3/repos/#list-organization-repositories\r\n\r\nI tried to find where is the method inside PyGithub for this APIcall, and was unable to find.\r\nI think that this APIcall may work for me.\r\n\r\nI am using my personal access token, which gives me full rights on the organization (I am also org owner).\r\n\r\nBest,\r\nLovato"}}, {"doc": {"_id": 1086, "title": "Use non-deprecated path for creating GitHub App access tokens", "content": "\ud83d\udc4b Hey friends\r\n\r\n`/installations/<installation_id>/access_tokens` has been [deprecated](https://developer.github.com/changes/2018-08-16-renaming-and-deprecation-of-github-app-installation-access-token-route/) but it has a drop-in replacement at  `/app/installations/<installation_id>/access_tokens`.\r\n\r\nThis updates `get_access_token` and associated test to use the non-deprecated URL.\r\n\r\n```sh\r\n$ python -m github.tests GithubIntegration                                                                                                                                                                                                  update_access_token_path \u2714\r\n..\r\n----------------------------------------------------------------------\r\nRan 2 tests in 0.106s\r\n\r\nOK\r\n```\r\n"}}, {"doc": {"_id": 1085, "title": "Couldn't get ContentFile's last_modified attribute directly", "content": "I've found a weird thing recently, I couldn't get last_modified unless I called update()function. Is it a bug or something?:\r\n\r\nIn [9]: res = g.search_code('pygithub')\r\n\r\nIn [10]: files = res.get_page(0)\r\n\r\nIn [11]: print(files[0].last_modified)\r\nNone\r\n\r\nIn [12]: files[0].update()\r\nOut[12]: True\r\n\r\nIn [13]: files[0].last_modified\r\nOut[13]: 'Thu, 25 Jan 2018 18:00:05 GMT'\r\n\r\n It takes a long time to call the update function\uff0cDo you have a good solution? \r\n"}}, {"doc": {"_id": 1084, "title": "Caching API data", "content": "A simple loop such as:\r\n\r\n```\r\n            for review in self.pull_request.get_reviews():\r\n                if review.user and review.user.name and \\\r\n                   review.user.name.startswith(\"foobar\") and \\\r\n                   review.state == \"CHANGES_REQUESTED\":\r\n                    ...\r\n```\r\n\r\nSeems to produce a huge number of repeated `GET https://api.github.com/users/<username>` calls.  I believe this ends up triggering abuse rate-limiting:\r\n\r\n```\r\n[2019-04-09T10:02:14.101Z] 2019-04-09 10:02:11,214 POST https://api.github.com/.../pulls/284/reviews {'Content-Type': 'application/json', 'Authorization': 'Basic (login and password removed)', 'User-Agent': 'PyGithub/Python'} {...} ==> 422 {'status': '422 Unprocessable Entity', 'x-accepted-oauth-scopes': '', 'content-length': '171', 'x-github-media-type': 'github.v3; format=json', 'content-security-policy': \"default-src 'none'\", 'x-content-type-options': 'nosniff', 'access-control-expose-headers': 'ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type', 'x-github-request-id': '9F34:7C5C:3ABC39:7696C8:5CAC6DA0', 'strict-transport-security': 'max-age=31536000; includeSubdomains; preload', 'x-ratelimit-remaining': '4719', 'server': 'GitHub.com', 'x-ratelimit-limit': '5000', 'x-oauth-scopes': 'notifications, public_repo', 'date': 'Tue, 09 Apr 2019 10:02:11 GMT', 'x-frame-options': 'deny', 'access-control-allow-origin': '*', 'referrer-policy': 'origin-when-cross-origin, strict-origin-when-cross-origin', 'content-type': 'application/json; charset=utf-8', 'x-xss-protection': '1; mode=block', 'x-ratelimit-reset': '1554806424'} {\"message\":\"Unprocessable Entity\",\"errors\":[\"was submitted too quickly\"],\"documentation_url\":\"https://developer.github.com/v3/pulls/reviews/#create-a-pull-request-review\"}\r\n```\r\n\r\nSurely the library doesn't need to repeatedly get the same user info from the API and can instead cache it after the first fetch, yes?"}}, {"doc": {"_id": 1083, "title": "This is a new issue", "content": ""}}, {"doc": {"_id": 1082, "title": "This is a new issue", "content": ""}}, {"doc": {"_id": 1081, "title": "This is a new issue", "content": ""}}, {"doc": {"_id": 1080, "title": "Unable to get GitHub API status, fails with RecursionError: maximum recursion depth exceeded in comparison", "content": "I can reproduce this reliably in 1.43.3 and 1.43.5 (latest) I haven't tried 1.43.4. Version 1.43 to 1.43.2 also don't work but with a completely different error.\r\n\r\nTo reproduce:\r\n\r\nIn the snippet below, `[...]` is where I've chopped stuff to keep it readable.\r\n```\r\n$ pip uninstall pygithub\r\n[...]\r\n$ pip install pygithub\r\nCollecting pygithub\r\nRequirement already satisfied: Deprecated in /home/user/.local/share/virtualenvs/venv/lib/python3.5/site-packages (from pygithub) (1.2.5)\r\nRequirement already satisfied: pyjwt in /home/user/.local/share/virtualenvs/venv/lib/python3.5/site-packages (from pygithub) (1.6.4)\r\nRequirement already satisfied: requests>=2.14.0 in /home/user/.local/share/virtualenvs/venv/lib/python3.5/site-packages (from pygithub) (2.19.1)\r\nRequirement already satisfied: wrapt<2,>=1 in /home/user/.local/share/virtualenvs/venv/lib/python3.5/site-packages (from Deprecated->pygithub) (1.11.1)\r\nRequirement already satisfied: urllib3<1.24,>=1.21.1 in /home/user/.local/share/virtualenvs/venv/lib/python3.5/site-packages (from requests>=2.14.0->pygithub) (1.23)\r\nRequirement already satisfied: certifi>=2017.4.17 in /home/user/.local/share/virtualenvs/venv/lib/python3.5/site-packages (from requests>=2.14.0->pygithub) (2018.8.24)\r\nRequirement already satisfied: chardet<3.1.0,>=3.0.2 in /home/user/.local/share/virtualenvs/venv/lib/python3.5/site-packages (from requests>=2.14.0->pygithub) (3.0.4)\r\nRequirement already satisfied: idna<2.8,>=2.5 in /home/user/.local/share/virtualenvs/venv/lib/python3.5/site-packages (from requests>=2.14.0->pygithub) (2.7)\r\nInstalling collected packages: pygithub\r\nSuccessfully installed pygithub-1.43.5\r\n$ python\r\nPython 3.5.3 (default, Sep 27 2018, 17:25:39) \r\n[GCC 6.3.0 20170516] on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> from github import Github\r\n>>> gh = Github('<my github api token>')\r\n>>> gh.get_api_status()\r\n[...]\r\n File \"/home/user/.local/share/virtualenvs/venv/lib/python3.5/site-packages/github/Requester.py\", line 420, in __requestRaw\r\n    return self.__requestRaw(original_cnx, verb, o.path, requestHeaders, input)\r\n  File \"/home/user/.local/share/virtualenvs/venv/lib/python3.5/site-packages/github/Requester.py\", line 420, in __requestRaw\r\n    return self.__requestRaw(original_cnx, verb, o.path, requestHeaders, input)\r\n  File \"/home/user/.local/share/virtualenvs/venv/lib/python3.5/site-packages/github/Requester.py\", line 420, in __requestRaw\r\n    return self.__requestRaw(original_cnx, verb, o.path, requestHeaders, input)\r\n  File \"/home/user/.local/share/virtualenvs/venv/lib/python3.5/site-packages/github/Requester.py\", line 401, in __requestRaw\r\n    response = cnx.getresponse()\r\n  File \"/home/user/.local/share/virtualenvs/venv/lib/python3.5/site-packages/github/Requester.py\", line 109, in getresponse\r\n    r = verb(url, headers=self.headers, data=self.input, timeout=self.timeout, verify=self.verify, allow_redirects=False)\r\n  File \"/home/user/.local/share/virtualenvs/venv/lib/python3.5/site-packages/requests/sessions.py\", line 525, in get\r\n    return self.request('GET', url, **kwargs)\r\n  File \"/home/user/.local/share/virtualenvs/venv/lib/python3.5/site-packages/requests/sessions.py\", line 512, in request\r\n    resp = self.send(prep, **send_kwargs)\r\n  File \"/home/user/.local/share/virtualenvs/venv/lib/python3.5/site-packages/requests/sessions.py\", line 622, in send\r\n    r = adapter.send(request, **kwargs)\r\n  File \"/home/user/.local/share/virtualenvs/venv/lib/python3.5/site-packages/requests/adapters.py\", line 530, in send\r\n    return self.build_response(request, resp)\r\n  File \"/home/user/.local/share/virtualenvs/venv/lib/python3.5/site-packages/requests/adapters.py\", line 264, in build_response\r\n    response = Response()\r\n  File \"/home/user/.local/share/virtualenvs/venv/lib/python3.5/site-packages/requests/models.py\", line 603, in __init__\r\n    self.headers = CaseInsensitiveDict()\r\n  File \"/home/user/.local/share/virtualenvs/venv/lib/python3.5/site-packages/requests/structures.py\", line 44, in __init__\r\n    self.update(data, **kwargs)\r\n  File \"/home/user/.local/share/virtualenvs/venv/lib/python3.5/_collections_abc.py\", line 773, in update\r\n    if isinstance(other, Mapping):\r\n  File \"/home/user/.local/share/virtualenvs/venv/lib/python3.5/abc.py\", line 182, in __instancecheck__\r\n    if subclass in cls._abc_cache:\r\n  File \"/home/user/.local/share/virtualenvs/venv/lib/python3.5/_weakrefset.py\", line 75, in __contains__\r\n    return wr in self.data\r\nRecursionError: maximum recursion depth exceeded in comparison\r\n>>> \r\n```\r\n\r\nI will try to debug further later but I've already spent hours trying to fix my issues with version 1.43 and I've had enough for today."}}, {"doc": {"_id": 1079, "title": "Add ability to create new git releases", "content": ""}}, {"doc": {"_id": 1078, "title": "Custom Port Number in API URL", "content": "Hi All,\r\nI am trying to use this to connect to a enterprise Github exposed at a port different than 443. \r\nFor example, when I try this URL below, I get errors. It seems there is a port checking in the code, and only accept 443 by default. And there is no way to change it? Is there a way to use custom port in the API url? Thanks. \r\n\r\n**Example URL**\r\n\"https://github.company.com:3690/api/v3\"\r\n**Errors:**\r\n File \"/var/task/github/Requester.py\", line 440, in __makeAbsoluteUrl\r\n    assert o.port == self.__port\r\nAssertionError"}}, {"doc": {"_id": 1077, "title": "I want to delete a directory. What should I do?", "content": ""}}, {"doc": {"_id": 1076, "title": "add get-a-single-comment call", "content": "Hi again,\r\n\r\nI would like to add https://developer.github.com/v3/issues/comments/#get-a-single-comment. "}}, {"doc": {"_id": 1075, "title": "Add url parameter to include anonymous contributors in get_contributors()", "content": "Add the anon parameter missing from get_contributors() so anonymous contributors can be included in results as specified in the [Github REST API Reference](https://developer.github.com/v3/repos/#list-contributors).\r\n"}}, {"doc": {"_id": 1074, "title": "add since and before to get_notifications", "content": "Needed this for getting notifications in a certain period and noticed that it wasn't implemented. "}}, {"doc": {"_id": 1073, "title": "Handle repos with missing licenses", "content": "Right now if you call `repo.get_license()` on a repo that doesn't even have a license file, you get an exception: `github.GithubException.UnknownObjectException: 404 {'message': 'Not Found', 'documentation_url': 'https://developer.github.com/v3/licenses/#get-the-contents-of-a-repositorys-license'}`.\r\n\r\nPersonally, I would prefer to just get a `None` returned instead. Idk what's most pythonic?"}}, {"doc": {"_id": 1072, "title": "Search results limited to 1000 per search query", "content": "When I use PyGithub to make API calls to GitHub, the max results for a query are only 1000. Is there a way to have pagination or get the total number of results that the Github UI displays?"}}, {"doc": {"_id": 1071, "title": "Add feature for get repo from another user", "content": "Hello, sometimes I want to recover the repository in which I collaborate, but if I use the method get_repo (name) will return error because the default request is for the owner of the repository, to get around this problem I created a small function that searches the repository by full name and so I can instantiate the 'Repositoty' object, even as a contributor.\r\n\r\nCan this be helpful to you?"}}, {"doc": {"_id": 1070, "title": "Handle a path of / in Repository.get_contents()", "content": "The path requested in Repository.get_contents() is appended to the URL,\r\nso the root path should be requested with the empty string. If path is\r\n'/', set it to the empty string. Copy the replay data from the original\r\ntest, since it is identical.\r\n\r\nDrive-by renaming the test to include the missing 's'.\r\n\r\nCloses #1059"}}, {"doc": {"_id": 1069, "title": "`update_file` says to base64 encode your input, but that's not necessary", "content": "https://github.com/PyGithub/PyGithub/blob/118def30a3ee69e203113cc64dceea27ece12e13/github/Repository.py#L1666\r\n\r\nThis should read: \"The updated file content, either Base64 encoded or ready to be encoded\"."}}, {"doc": {"_id": 1068, "title": "provide option to extend expiration of jwt token", "content": "supply optional parameter for `create_jwt` method"}}, {"doc": {"_id": 1067, "title": "Run pyupgrade across the project", "content": "https://github.com/asottile/pyupgrade\r\n\r\n- Use dict comprehension\r\n- Use set literals"}}, {"doc": {"_id": 1066, "title": "Add testing and document support for Python 3.7", "content": "Python 3.7 was released on June 27, 2018.\r\n\r\nhttps://docs.python.org/3/whatsnew/3.7.html"}}, {"doc": {"_id": 1065, "title": "Feature request: fetch anonymous contributors", "content": "`get_contributors(self, anon=False):`\r\nhttps://github.com/PyGithub/PyGithub/blob/118def30a3ee69e203113cc64dceea27ece12e13/github/Repository.py#L1802-L1812"}}, {"doc": {"_id": 1064, "title": "commit.last_modified returns wrong date when retrieved from tags list", "content": "## The problem\r\n\r\nHey there, \r\n\r\nIt seems that the value returned by the `last_modified` attribute of a given commit differs if we obtain this commit from the repository's tags list.\r\n\r\n## Example\r\n\r\n ```{python}\r\nfrom github import Github\r\ngh = Github()\r\nrepo = gh.get_repo(\"PyGithub/PyGithub\")\r\ntag_commit = repo.get_tags()[0].commit\r\ncommit = repo.get_commit(tag_commit.sha)\r\n\r\n# same commit sha\r\nprint(\"{} -- {}\".format(tag_commit.sha, commit.sha))\r\n\r\n# different last_modified dates\r\nprint(\"{} -- {}\".format(tag_commit.last_modified, commit.last_modified))\r\n```\r\n\r\n## Environment\r\n\r\n* Python: 3.7\r\n* PyGithub: 1.43.5"}}, {"doc": {"_id": 1063, "title": "Add support for the Checks API", "content": "The Github v3 API now supports a first-class notion of [check runs] and [check suites] that can be used to gate whether a pull-request should be merged or not.\r\n\r\nAdding support for this part of the API to PyGithub would be useful for users who want to develop custom checks.  As I'm in that case, I might have a stab at this, but simply didn't make the time yet.\r\n\r\n[check runs]: https://developer.github.com/v3/checks/runs/\r\n[check suites]: https://developer.github.com/v3/checks/suites/"}}, {"doc": {"_id": 1062, "title": "add issue author and time opened to get_issue()", "content": "currently you get issue title and number. add author info / who opened issue and when"}}, {"doc": {"_id": 1061, "title": "get number of closed issues", "content": "https://github.com/PyGithub/PyGithub/issues/825 describes how to get closed issues, but how to get number of closed issues? i see a totalCount but how to use it?"}}, {"doc": {"_id": 1060, "title": "add without auth examples", "content": "the examples all use login to get public info, i.e. info you can get without login. or did  i get it wrong?"}}, {"doc": {"_id": 1059, "title": "Exception raised in get_contents()", "content": "```\r\nPython 3.6.7 (default, Oct 22 2018, 11:32:17) \r\n[GCC 8.2.0] on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import github\r\n>>> gh = github.Github('mytoken')\r\n>>> repo = gh.get_repo('VIDA-NYU/reprozip')\r\n>>> repo.get_commit('master')\r\nCommit(sha=\"a9f1ea3767e2ae357d8e67d77554845d65f4c2e7\")\r\n>>> repo.get_contents('/', 'a9f1ea3767e2ae357d8e67d77554845d65f4c2e7')\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"lib/python3.6/site-packages/github/Repository.py\", line 1479, in get_contents\r\n    return self.get_file_contents(path, ref)\r\n  File \"lib/python3.6/site-packages/github/Repository.py\", line 1503, in get_file_contents\r\n    return github.ContentFile.ContentFile(self._requester, headers, data, completed=True)\r\n  File \"lib/python3.6/site-packages/github/GithubObject.py\", line 252, in __init__\r\n    GithubObject.__init__(self, requester, headers, attributes, completed)\r\n  File \"lib/python3.6/site-packages/github/GithubObject.py\", line 86, in __init__\r\n    self._storeAndUseAttributes(headers, attributes)\r\n  File \"lib/python3.6/site-packages/github/GithubObject.py\", line 98, in _storeAndUseAttributes\r\n    self._useAttributes(attributes)\r\n  File \"lib/python3.6/site-packages/github/ContentFile.py\", line 192, in _useAttributes\r\n    if \"content\" in attributes:  # pragma no branch\r\nTypeError: argument of type 'NoneType' is not iterable\r\n```\r\n*[edit: removed my token (and revoked it). Doh!]*\r\n\r\nSeems to be a regression."}}, {"doc": {"_id": 1058, "title": "[fix] the default vaule of 'PullRequest.create_review'`s commit param", "content": "[fix] the default vaule of github.PullRequest.PullRequest.create_review`s input param commit.\r\n\r\nIn `POST /repos/:owner/:repo/pulls/:number/reviews`, 'commit_id' is not a necessary parameter.Reference [https://developer.github.com/v3/pulls/reviews/](https://developer.github.com/v3/pulls/reviews/)\r\n\r\nSigned-off-by: MurphyZhao <d2014zjt@163.com>"}}, {"doc": {"_id": 1057, "title": "Missing api for selecting a column in the Project board", "content": "Hello Guys,\r\n\r\nI was using the library to automate a bit of the Project board feature, and noticed that there isn't a `get_column` method. I thought I'd report it as an issue/feature request.\r\nThe intent is to select a particular column in the Project board.\r\n\r\nCorresponding GH api : `GET /projects/columns/:column_id`\r\n\r\nhttps://developer.github.com/v3/projects/columns/#get-a-project-column\r\nhttps://developer.github.com/enterprise/2.16/v3/projects/columns/#get-a-project-column\r\n\r\nThanks."}}, {"doc": {"_id": 1056, "title": "Regular GithubException gets raised instead of TwoFactorException in 1.43.5", "content": "Originally reported/troubleshooted in https://github.com/datalad/datalad/pull/3180#issuecomment-468321921\r\n\r\nUnfortunately I didn't come up with a fix or bisection, so no PR - only the \"issue\".  \r\nI am doing smth like (code, now with the workaround, is actually [here](https://github.com/datalad/datalad/pull/3180/files#diff-2700e603a7dcfb78502b8d5bd5c3a532R171))\r\n```\r\nses = gh.Github(user_name, password=password)\r\nuser = ses.get_user()\r\n```\r\nand then asking for `user.name` to sense if 2FA is needed.  It used (with 1.40.0 in Debian) to throw TwoFactorException but with 1.43.5 I am getting a generic GtihubException with code 401 and data `{u'documentation_url': u'https://developer.github.com/v3/auth#working-with-two-factor-authentication', u'message': u'Must specify two-factor authentication OTP code.'} `.\r\nHere is a pdb of the relevant piece and header if would be of any value\r\n```\r\n(Pdb) re.match(r'.*required.*', headers[Consts.headerOTP])\r\n*** KeyError: 'X-GitHub-OTP'\r\n(Pdb) p Consts.headerOTP\r\n'X-GitHub-OTP'\r\n(Pdb) import pprint\r\n(Pdb) pprint.pprint(headers)\r\n{'access-control-allow-origin': '*',\r\n 'access-control-expose-headers': 'ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type',\r\n 'content-length': '160',\r\n 'content-security-policy': \"default-src 'none'\",\r\n 'content-type': 'application/json; charset=utf-8',\r\n 'date': 'Mon, 04 Mar 2019 05:03:04 GMT',\r\n 'referrer-policy': 'origin-when-cross-origin, strict-origin-when-cross-origin',\r\n 'server': 'GitHub.com',\r\n 'status': '401 Unauthorized',\r\n 'strict-transport-security': 'max-age=31536000; includeSubdomains; preload',\r\n 'x-content-type-options': 'nosniff',\r\n 'x-frame-options': 'deny',\r\n 'x-github-media-type': 'github.v3; format=json',\r\n 'x-github-otp': 'required; app',\r\n 'x-github-request-id': 'ACEE:29A3:6BF31F:12E65BD:5C7CB188',\r\n 'x-ratelimit-limit': '60',\r\n 'x-ratelimit-remaining': '57',\r\n 'x-ratelimit-reset': '1551679384',\r\n 'x-xss-protection': '1; mode=block'}\r\n(Pdb) n\r\n> /home/yoh/proj/misc/PyGithub/github/Requester.py(295)__createException()\r\n-> elif status == 401 and Consts.headerOTP in headers and re.match(r'.*required.*', headers[Consts.headerOTP]):\r\n(Pdb) n\r\n```"}}, {"doc": {"_id": 1055, "title": "Exception raised during get_api_status() ", "content": "Calling `get_api_status()` raises exception:\r\n```\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/mchrusci/venv3/lib/python3.5/site-packages/github/MainClass.py\", line 718, in get_api_status_messages\r\n    DEFAULT_STATUS_URL + \"/api/messages.json\"\r\n  File \"/home/mchrusci/venv3/lib/python3.5/site-packages/github/Requester.py\", line 264, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, self.__customConnection(url)))\r\n  File \"/home/mchrusci/venv3/lib/python3.5/site-packages/github/Requester.py\", line 275, in __check\r\n    raise self.__createException(status, responseHeaders, output)\r\ngithub.GithubException.GithubException: 404 {'data': '<h1>Not Found</h1>'}\r\n```\r\n\r\nstatus.github.com says it has been deprecated:\r\n![image](https://user-images.githubusercontent.com/29942462/53645048-53023700-3c38-11e9-8e6e-9584840a66b9.png)\r\n"}}, {"doc": {"_id": 1054, "title": "Missing \"parent\" field from Teams", "content": "I would like to query the information about GitHub nested teams.  The \"parent\" field on a Team resource seems to be missing: \r\nhttps://developer.github.com/v3/teams/"}}, {"doc": {"_id": 1053, "title": "Add new dismiss() method on PullRequestReview", "content": "The GitHub v3 API has the ability to dismiss reviews, export it by way\r\nof a new dismiss() method on PullRequestReview.\r\n\r\nCloses #1050"}}, {"doc": {"_id": 1052, "title": "How to do a 'git diff' between commits using PyGithub?", "content": "I can't find any documentation on how i can do a `git diff` between commits. How would i go about doing this and what does it return?"}}, {"doc": {"_id": 1051, "title": "[FEATURE REQUEST]: complete a set of methods and properties for PullRequestReview", "content": "E.g. there is no way to access existing `PullRequestComments` in https://github.com/PyGithub/PyGithub/blob/6a89eb645dc219b8c2cab6eeb283e05d3f279616/github/PullRequestReview.py#L142. \r\n\r\nFor newly created reviews, these are supplied in https://github.com/PyGithub/PyGithub/blob/b51227681df37d056415a237746e68c18c05c786/github/PullRequest.py#L439.\r\n\r\nXREF: https://github.com/PyGithub/PyGithub/issues/941, https://github.com/PyGithub/PyGithub/issues/645\r\n"}}, {"doc": {"_id": 1050, "title": "dismiss a PR review?", "content": "Am I reading the docs correctly and understanding that there is no support for [dismissing a PR review](https://developer.github.com/v3/pulls/reviews/#dismiss-a-pull-request-review)?"}}, {"doc": {"_id": 1049, "title": "[BUG] get_access_token uses hardcoded github URL", "content": "It should use `base_url` supplied by the user. Otherwise, it's unusable with GitHub Enterprise."}}, {"doc": {"_id": 1048, "title": "How do I get github.py?", "content": ""}}, {"doc": {"_id": 1047, "title": "Repository.get_git_ref doesn't handle prefix matches", "content": "### Description\r\n\r\n**Version**: 1.43.5\r\n\r\nThe `get_git_ref` function doesn't handle the case where `ref` is not found, but other refs prefixed by `ref` exist. The `get_git_ref` function should either return a list of `GitRefs` in this case or raise `UnknownObjectException`.\r\n\r\nFrom the [documentation](https://developer.github.com/v3/git/refs/):\r\n\r\n> If the ref doesn't exist in the repository, but existing refs start with ref they will be returned as an array. For example, a call to get the data for a branch named feature, which doesn't exist, would return head refs including featureA and featureB which do.\r\n\r\n### Demonstration\r\n\r\nSingle object returned when ref exists, as expected:\r\n```py\r\nIn [23]: ref = repo.get_git_ref('tags/bar')\r\n\r\nIn [24]: ref\r\nOut[24]: GitRef(ref=\"refs/tags/bar\")\r\n\r\nIn [25]: ref._rawData\r\nOut[25]:\r\n{'node_id': 'MDM6UmVmNTE5NjI3MzpiYXI=',\r\n 'object': {'sha': '70ed626e0fec6d033b5066a322ce77565e67f0ff',\r\n  'type': 'commit',\r\n  'url': 'https://api.github.com/repos/repo/www/git/commits/70ed626e0fec6d033b5066a322ce77565e67f0ff'},\r\n 'ref': 'refs/tags/bar',\r\n 'url': 'https://api.github.com/repos/repo/www/git/refs/tags/bar'}\r\n```\r\n\r\n\"Null\" ref returned when ref not found, but multiple prefix matches found:\r\n\r\n```py\r\nIn [26]: ref = repo.get_git_ref('heads/bar')\r\n\r\nIn [27]: ref\r\nOut[27]: GitRef(ref=None)\r\n\r\nIn [28]: ref._rawData\r\nOut[28]:\r\n[{'node_id': 'MDM6UmVmNTE5NjI3MzpiYXJfMQ==',\r\n  'object': {'sha': '70ed626e0fec6d033b5066a322ce77565e67f0ff',\r\n   'type': 'commit',\r\n   'url': 'https://api.github.com/repos/repo/www/git/commits/70ed626e0fec6d033b5066a322ce77565e67f0ff'},\r\n  'ref': 'refs/heads/bar_1',\r\n  'url': 'https://api.github.com/repos/repo/www/git/refs/heads/bar_1'},\r\n {'node_id': 'MDM6UmVmNTE5NjI3MzpiYXJfMg==',\r\n  'object': {'sha': 'baf8b0ebbe4c9974a6a255557efd61f2c51751e3',\r\n   'type': 'commit',\r\n   'url': 'https://api.github.com/repos/repo/www/git/commits/baf8b0ebbe4c9974a6a255557efd61f2c51751e3'},\r\n  'ref': 'refs/heads/bar_2',\r\n  'url': 'https://api.github.com/repos/repo/www/git/refs/heads/bar_2'}]\r\n```\r\n### Conclusion\r\nI understand this is an edge case, but most people probably don't expect to ever receive a \"null\" ref in this case. The least surprising thing to do here may be to raise `UnknownObjectException` if there is no exact match for `ref`. Additionally, there may be value in providing a flag to return prefix match results instead of throwing an exception.\r\n"}}, {"doc": {"_id": 1046, "title": "Allow indexing in PaginatedList _Slice objects", "content": "I just got an error `TypeError: '_Slice' object does not support indexing` when I tried to\r\n\r\n```python3\r\ntags = repo.get_tags()[:25]\r\ntags[0]\r\n```"}}, {"doc": {"_id": 1045, "title": "Getting files from issue comments", "content": "So, I have a list of issues and there are some links there for files that attaches. I can not find out a direct method to capture the files in a specific comments of an issue."}}, {"doc": {"_id": 1044, "title": "Satsuki, project using PyGithub, updated URL", "content": "Fixed by #1043 \r\n\r\nURL of Satsuki, a project using PyGithub, has changed. "}}, {"doc": {"_id": 1043, "title": "Update link/description in docs of project using PyGithub", "content": "Fixes #1044\r\n\r\nProject ownership has changed. This PR updates link/description appropriately."}}, {"doc": {"_id": 1042, "title": "Fix get_access_token()", "content": "resolves #1023 "}}, {"doc": {"_id": 1041, "title": "fixed: comment of ProjectColumn.create_card", "content": ""}}, {"doc": {"_id": 1040, "title": "No .close() command", "content": "It seems there is no cleanup function for releasing old connections.\r\n\r\nResourceWarning: unclosed <ssl.SSLSocket fd=464, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=0, laddr=('192.168.....8', 53250), raddr=('192.30.....', 443)>\r\n\r\nAm I wrong?"}}, {"doc": {"_id": 1039, "title": "Fix Organization.add_to_members() role passing", "content": "Change parameters to be a JSON Payload instead should fix #1030 "}}, {"doc": {"_id": 1038, "title": "[WIP] Replace broken edit_user|team_push_restrictions with full implementation of the API", "content": "[Here is the relevant Github API documentation](https://developer.github.com/v3/repos/branches/#list-team-restrictions-of-protected-branch).\r\n\r\nAs can be seen from the docs, `edit_*_push_restrictions` is a misnomer. In the current API, [POST will only *add*, never remove](https://developer.github.com/v3/repos/branches/#add-team-restrictions-of-protected-branch). This commit adds a more fine-grained API:\r\n\r\n* `add_user|team_push_restrictions` (`POST`)\r\n* `replace_user|team_push_restrictions` (`PUT`)\r\n* `remove_user|team_push_restrictions` (`DELETE`)\r\n\r\n`replace_user|team_push_restriction` could also be called `edit_user|team_push_restriction` but I find the name slightly misleading. It also can't safely replace the old `edit_user|team_push_restriction` functions as those would have only ever added users or teams.\r\n\r\nThe way this PR is built right now, it's a breaking change. Advice and opinions on alternative approaches are welcome."}}, {"doc": {"_id": 1037, "title": "Test2", "content": "dsd"}}, {"doc": {"_id": 1036, "title": "Test2", "content": "sdsd"}}, {"doc": {"_id": 1035, "title": "Test2", "content": "sdsd"}}, {"doc": {"_id": 1034, "title": "PyGithub Organization Example docs", "content": ""}}, {"doc": {"_id": 1033, "title": "Retreive commits in ref in parent child order", "content": "I'm using pyGithub to automate building of a testing branch from outstanding PRs marked as ready for testing.\r\n\r\nTo do that I query all the commits in the ref associated with the PR and build a pick list of commits to cherry-pick on to the upstream base.\r\n\r\nIn general its working great, however the commits in the commit list of a PR come seem to be listed in the same order that github shows them in.  This is ordered by commit date instead of by parent child (a \"feature\" I really don't like BTW)\r\n\r\nBecause of this my tool will build a cherry-pick list of commits in the wrong order which causes merge conflicts. \r\n\r\nIs there a way to get the list of commits associated with the PR in parent child order instead of date? "}}, {"doc": {"_id": 1032, "title": "Fixed File.last_modified attribute", "content": "This attribute now contains the correct last modification date for the file in question (and not the repository as a whole).\r\nFixes #629."}}, {"doc": {"_id": 1031, "title": "Updated setup.py to exclude tests", "content": "# Problem #\r\nThe `.whl` available on PyPi for this repository contains its entire `tests` submodule. \r\n\r\nThe total size of the `pygithub` module is less than `1mb` without tests and `>23mb` with. \r\n\r\nPrevious discussions on this topic indicated the removal of tests would be accepted if someone created a pull request to do so: https://github.com/PyGithub/PyGithub/issues/672 \r\n\r\nThis is that pull request! \ud83d\ude04\r\n\r\n# Solution/Implementation # \r\n\r\n- Moved \"tests\" to root of the repository ( outside the package ) \r\n    - Added `tests.` module path to the imports in `AllTests.py`\r\n- Updated `setup.py`\r\n    - Removed `package_data` from product\r\n    - Removed \"tests\" from packages definition\r\n    - Repointed `test_suite` to new location\r\n- Updated `travis.yml`\r\n    - Added conditional ( if not `py2.7` ) conversion of code to `py3`\r\n\r\n_... apologies for all the failed build spam below - new to working with Travis CI / had some gotcha moments!_\r\n"}}, {"doc": {"_id": 1030, "title": "Organization.add_to_members() doesn't pass role correctly", "content": "https://pygithub.readthedocs.io/en/latest/github_objects/Organization.html#github.Organization.Organization.add_to_members passes the role as part of the query string: https://github.com/PyGithub/PyGithub/blob/master/github/Organization.py#L316\r\n\r\nBut Github expects it as a JSON payload. As a result, all new members are created as `member` (not as `admin`), and you can't update an organization member to `admin` with PyGithub."}}, {"doc": {"_id": 1029, "title": "add has_organization_projects and has_repository_projects", "content": "These are just two missing booleans from https://developer.github.com/v3/orgs/#get-an-organization"}}, {"doc": {"_id": 1028, "title": "Travis CI: Add Python 3.7 to the testing", "content": "Also:\r\n* Python 3.4 reaches its end of life in 44 days so let's remove it from the testing.  https://devguide.python.org/#branchstatus\r\n* [Travis are now recommending removing the __sudo__ tag](https://blog.travis-ci.com/2018-11-19-required-linux-infrastructure-migration)."}}, {"doc": {"_id": 1027, "title": "Add six to requirements.txt and setup.py", "content": "https://github.com/PyGithub/PyGithub/blob/master/setup.py#L105 relies on the setuptools __use_2to3__ \"feature\" that is no longer recommended. The Setuptools docs https://setuptools.readthedocs.io/en/latest/python3.html say _Setuptools provides a facility to invoke 2to3 on the code as a part of the build process, by setting the keyword parameter __use_2to3__ to True, but the Setuptools project strongly recommends instead developing a unified codebase using __six__, __future__, or another compatibility library._\r\n\r\nThis PR adds the broadly used Python 2 and 3 compatibility library [__six__](https://pypi.org/project/six/) to requirements.txt.  This will allow the use of [__six.text_type__](https://six.readthedocs.io/#six.string_types) as an effective replacement for __unicode__ which was removed in Python 3 and [__six.string_types__](https://six.readthedocs.io/#six.string_types) as an effective replacement for __basestring__ (or __(str, unicode)__) which was removed in Python 3."}}, {"doc": {"_id": 1026, "title": "01 is a syntax error in Python 3", "content": "@sfdye Can I please get your help in closing these syntax error?\r\n\r\n$ __python3 -c \"01\"__  # --> SyntaxError: invalid token\r\n* https://docs.python.org/3/whatsnew/3.0.html?highlight=octal%20literals#integers\r\n\r\nIn Python 3:\r\n* __1__ is decimal one\r\n* __0o1__ is octal one\r\n* __01__ is a syntax error"}}, {"doc": {"_id": 1025, "title": "Old style exceptions --> new style for Python 3", "content": "@sfdye Can I please get your help in closing these __syntax errors__? Old style exceptions are syntax errors in Python 3 but new style exceptions work as expected in both Python 2 and Python 3."}}, {"doc": {"_id": 1024, "title": "Use print() function in both Python 2 and Python 3", "content": "@sfdye Can I please get your help in closing these syntax errors?  Legacy __print__ statements are syntax errors in Python 3 but __print()__ function works as expected in both Python 2 and Python 3."}}, {"doc": {"_id": 1023, "title": "get_access_token is broken >= 1.43.3", "content": "Looks like the fix in #1010 only fixed a part of the problem(s) introduced in 1.43.4. With 1.43.5 I get:\r\n\r\n```\r\nFile \"/.tox/test/lib/python3.7/site-packages/github/MainClass.py\", line 790, in get_access_token\r\nresponse_text = response_text.decode('utf-8')\r\nAttributeError: 'str' object has no attribute 'decode'\r\n```\r\n"}}, {"doc": {"_id": 1022, "title": "PUT /orgs/:org/memberships/:username requires role parameter to be in the body", "content": "The documentation doesn't make it clear, but it seems that the `role` parameter must be part of the JSON PUT body instead of the URL parameters. With the current code, it's not possible to change a user's role to an admin because the URL parameter gets ignored.\r\n\r\nThis behavior was observed with GitHub Enterprise 2.14.10 and seems to appear in the replay data in this repo too: https://github.com/PyGithub/PyGithub/blob/f0e0762a0d286dab47146f9357b06714a86d3c25/github/tests/ReplayData/Organization.testAddMembersAdminRole.txt#L23-L32"}}, {"doc": {"_id": 1021, "title": "Implement OAuth for apps", "content": "This PR adds support for:\r\n* Getting OAuth login URL for apps\r\n* Getting access tokens for apps\r\n* Listing app installations that are accessible to a user\r\n\r\nRelated to #828"}}, {"doc": {"_id": 1020, "title": "added method to get all user's invitations", "content": "i need ability to accept automatically all invitations, there is method to accept invitation, but method to get invitations for acceptance is absent  "}}, {"doc": {"_id": 1019, "title": "get_issues() since=date gets older issues", "content": "Hi all, i tried to get closed issues of PyGithub since 1st January 2019 with this simple code\r\n```\r\nPyGit = client.get_repo(\"PyGithub/PyGithub\")\r\n\r\ndate = datetime(2019, 1, 1, 0, 0)\r\nissues = PyGit.get_issues(state=\"closed\", since=date, sort=\"closed-desc\")\r\nfor issue in issues:\r\n\tprint(issue, issue.closed_at)\r\n```\r\nbut what i get is this\r\n\r\n> Issue(title=\"Github App unable to invite to org\", number=1018) 2019-01-16 15:37:19\r\n> Issue(title=\"dummy issue #911\", number=1017) 2019-01-15 08:29:21\r\n> Issue(title=\"GithubException: Repository access blocked\", number=1015) 2019-01-15 19:50:33\r\n> Issue(title=\"Add missing import to PullRequest\", number=1007) 2019-01-04 14:28:54\r\n> Issue(title=\"get_review_comments() method fails due to missing import\", number=1004) 2019-01-04 14:28:54\r\n> Issue(title=\"user.node_id missing\", number=1001) 2019-01-10 12:49:53\r\n> Issue(title=\"user.node_id missing \", number=999) 2019-01-10 12:50:52\r\n> Issue(title=\"raise BadCredentialException when using Github enterprise\", number=950) 2019-01-01 13:21:15\r\n> Issue(title=\"BadCredentialsException not raised on GitHub enterprise\", number=934) 2019-01-15 22:53:42\r\n> Issue(title=\"create PullRequest between forked repo to original\", number=792) 2018-05-18 02:52:21\r\n> Issue(title=\"Implement `__len__` (and/or `__bool__`) on PaginatedList\", number=579) 2019-01-15 22:53:41\r\n> Issue(title=\"GitHub integrations support\", number=449) 2017-01-27 16:34:41\r\n\r\nhow is this possible if I specified date with \"since\" option?"}}, {"doc": {"_id": 1018, "title": "Github App unable to invite to org", "content": "Python 3.6\r\nCode I'm using:\r\n``` \r\nfrom github import GithubIntegration, Github\r\n\r\nprivate_key = open('pem.pem').read()\r\n\r\nintegration_id = XXX\r\ninstallation_id = YYY\r\n\r\nintegration = GithubIntegration(integration_id, private_key)\r\nauth = integration.get_access_token(installation_id)\r\ng = Github(auth.token)\r\n\r\norg = g.get_organization('<org-name>')\r\n\r\norg.invite_user(email=\"email@email.com\")\r\n```\r\n\r\nI'm unable to invite a user/email, I get the following error:\r\n`{\r\n    \"message\": \"Validation Failed\",\r\n    \"errors\": [\r\n        {\r\n            \"resource\": \"OrganizationInvitation\",\r\n            \"code\": \"unprocessable\",\r\n            \"field\": \"data\",\r\n            \"message\": \"Inviter must be an organization admin\"\r\n        }\r\n    ],\r\n    \"documentation_url\": \"https://developer.github.com/v3/orgs/members/#create-organization-invitation\"\r\n}`\r\n\r\nUsing that token though I'm able to list teams within the org, list repos, etc. Only thing I'm unable to do is invite users, which is what this whole app is meant to do.\r\n\r\nEDIT: Wanted to add that I'm an admin/owner in the org, and I'm the one who created and added the Github App to the Org.\r\n\r\nThe App has the following permissions:\r\nOrganization members : Read & Write"}}, {"doc": {"_id": 1017, "title": "dummy issue #911", "content": "please ignore"}}, {"doc": {"_id": 1016, "title": "Add assignee addition/removal support for Pull Requests", "content": "Fixes #1009 \r\n\r\nThis is my first contribution here, so please let me know if I am missing anything. I added a test case, but since I don't have access to this repo to add/remove assignees, I wasn't able to completely run the test with the users specified. \ud83e\udd1e I used the examples already written for the same function in [Issue.py](https://github.com/PyGithub/PyGithub/blob/master/github/tests/Issue.py).\r\n\r\nNote: Since the [Assignees](https://developer.github.com/v3/issues/assignees/) API uses issues as a shared endpoint for PRs and Issues, the PR object must be converted to an Issue by using `as_issue()` before assignees can be added or removed from a PR.\r\n\r\nUsage:\r\n```\r\nuser = github_api.get_user('user')\r\nrepo = user.get_repo('repo')\r\npr = repo.get_pull(1)\r\npr_issue = pr.as_issue()\r\npr_issue.add_to_assignees('assignee1', 'assignee2')\r\npr_issue.remove_from_assignees('assignee1', 'assignee2')\r\n```"}}, {"doc": {"_id": 1015, "title": "GithubException: Repository access blocked", "content": "Hi everybody, I get this error when I try to retrieve all public repositories on Github (not single user) with `get_repos() `function:\r\n`\r\ngithub.GithubException.GithubException: 403 {'message': 'Repository access blocked', 'block': {'reason': 'unavailable', 'created_at': '2014-01-31T22:32:14Z', 'html_url': 'https://github.com/tos'}}`\r\n"}}, {"doc": {"_id": 1014, "title": "The number of contributors not correct using PyGithub", "content": "I am using following code to get the number of contributors of a repository\r\n\r\n```\r\nfrom github import Github\r\ng = Github(\"*****github Access token****\")\r\nrepo = g.get_repo('mui-org/material-ui')\r\ncontributors_count = repo.get_contributors().totalCount\r\n```\r\nIt is giving number of contributors as **443**, however, the correct number of contributors on the github website is **1077**.\r\n\r\nCan some one tell why am I getting different values?\r\n\r\nAlso, is there any other function in PyGithub to get correct number of contributors?\r\n\r\n"}}, {"doc": {"_id": 1013, "title": "Allow unicode type in PullRequest.create_review", "content": "`create_review` method of `PeullRequest` asserts `body` to be a type of\r\n`str`. Let's allow to have `unicode` there as well."}}, {"doc": {"_id": 1012, "title": "fix request got an unexpected keyword argument body", "content": "Resolves #1010"}}, {"doc": {"_id": 1011, "title": "how to create \"lightweight\" tag?", "content": "There are \"lightweight tag\" and \"annotated tag\".\r\n\r\nThe tag `0.3.6` was created in the app as \"lightweight\". (Git Extensions app)\r\nThe tag `4.0.0`, I believe, is marked as annotated with `[...]` string. \r\n\r\n![](https://i.imgur.com/1wcjhJt.png)\r\n\r\n\r\nThe tag `4.0.0` was created as:\r\n``` py\r\nsha = repo.get_commits()[0].sha\r\nt = repo.create_git_tag(tag=\"4.0.0\", message=\"Test\", object=sha, type=\"commit\")\r\nrepo.create_git_ref('refs/tags/{}'.format(t.tag), t.sha)\r\n```\r\nHow to create a \"lightweight\" tag?\r\n\r\n------------\r\nUPD.\r\nAnswer:\r\n``` py\r\nsha = repo.get_commits()[0].sha\r\nrepo.create_git_ref('refs/tags/{}'.format(\"4.0.0\"), sha)\r\n```\r\n"}}, {"doc": {"_id": 1010, "title": "GithubIntegrations get_access_token: TypeError: request() got an unexpected keyword argument 'body'", "content": "hey everyone!\r\n\r\nI am trying to use GithubIntegration and get the access token:\r\n\r\n```\r\ngi.get_access_token(\r\n    installation_id=app_installations[0]['id']\r\n)\r\n```\r\n\r\nbut it is raising this error:\r\n\r\n```\r\n...\r\n/mnt/sda1/storage/miniconda/envs/openteam/lib/python3.6/site-packages/requests/api.py in request(method='post', url='https://api.github.com/installations/<app_install_id>/access_tokens', **kwargs={'body': None, 'data': None, 'headers': {'Accept': 'application/vnd.github.machine-man-preview+json', 'Authorization': 'Bearer <jwt>', 'User-Agent': 'PyGithub/Python'}, 'json': None})\r\n     58     # cases, and look like a memory leak in others.\r\n     59     with sessions.Session() as session:\r\n---> 60         return session.request(method=method, url=url, **kwargs)\r\n        session.request = <bound method Session.request of <requests.sessions.Session object at 0x7fcf4f6b3080>>\r\n        method = 'post'\r\n        url = 'https://api.github.com/installations/<app_install_id>/access_tokens'\r\n        kwargs = {'data': None, 'json': None, 'headers': {'Authorization': 'Bearer <jwt>', 'Accept': 'application/vnd.github.machine-man-preview+json', 'User-Agent': 'PyGithub/Python'}, 'body': None}\r\n     61 \r\n     62 \r\n\r\nTypeError: request() got an unexpected keyword argument 'body'\r\n```\r\n\r\n** <app_install_id> and <jwt> original was replaced here\r\n\r\nusing `requests` lib directly works fine.\r\n\r\nany thoughts?\r\n\r\n---\r\n\r\nPKG INFO:\r\n\r\nPyGithub                  1.43.4                    < pip >\r\nrequests                  2.21.0                py36_1000    conda-forge"}}, {"doc": {"_id": 1009, "title": "How to assign a user to a pull request recently created?", "content": "![image](https://user-images.githubusercontent.com/5332158/50737362-54bafb80-11af-11e9-8dad-74ab04d8dcae.png)\r\n\r\n```python\r\nfork_user = github_api.get_user('user')\r\nfork_repo = fork_user.get_repo('repo')\r\n\r\nfork_pullrequest = fork_repo.create_pull(\"Title\", \"Body\", 'master', \r\n          '{}:{}'.format('otheruser', 'master'), False)\r\n```\r\n\r\nAfter running this code, I got the pull_request object. Looking over its documentation at:\r\n1. https://pygithub.readthedocs.io/en/latest/github_objects/PullRequest.html\r\n\r\nI could not find a method to assign a user to the pull request like:\r\n```python\r\nfork_pullrequest.assign(fork_user)\r\n```\r\n\r\n"}}, {"doc": {"_id": 1008, "title": "No longer blindly mask JSON parsing errors", "content": "If the JSON returned fails to parse *for whatever reason*, it is wrapped\r\nin a dictionary and blindly passed on. Where, for example, PaginatedList\r\nthen returns a mostly unpopulated object and raises an URL exception\r\nwhen attempting to complete it. This has wasted my time for the last\r\ntime. Clean up all of the unparseble JSON in the replay data (which is\r\nonly fair, since I added most of it), and only wrap the data if it\r\nstarts with a <html> tag to deal with 503 errors and the like."}}, {"doc": {"_id": 1007, "title": "Add missing import to PullRequest", "content": "PullRequest.get_review_comments() works with no arguments passed due to\r\nif short circuiting, but as soon as you pass since, you get an exception\r\nsince datetime wasn't imported. Import it, and add a test case for good\r\nmeasure.\r\n\r\nCloses #1004"}}, {"doc": {"_id": 1006, "title": "PaginatedList.totalCount KeyError: 'page' with large results", "content": "When using get_repo().totalCount on a small result set (only my own repositories) totalCount returns the repository count correctly. When querying my enterprise Github for a complete list of repositories, the following error occurs:\r\n\r\n```bash\r\nTraceback (most recent call last):\r\n  File \"./test-repo-list.py\", line 9, in <module>\r\n    print(\"Found %s repositories.\" % full_repo_list.totalCount)\r\n  File \"/usr/local/lib/python3.7/dist-packages/github/PaginatedList.py\", line 175, in totalCount\r\n    self.__totalCount = int(parse_qs(lastUrl)['page'][0])\r\nKeyError: 'page'\r\n````\r\n\r\nI am using Python 3.7.1 and the pip-installed version 1.43.4 of PyGithub with a Github Enterprise version 2.14.7.\r\n\r\nThis is the code I have used to test this:\r\n\r\n```python\r\n#!/usr/bin/env python3.7\r\nfrom github import Github\r\nimport os\r\n\r\napi_token = os.getenv('GITHUB_TOKEN', None)\r\ng = Github(base_url=\"https://mygithubhost.lads\", login_or_token=api_token)\r\n\r\nfull_repo_list = g.get_repos()\r\nprint(\"Found %s repositories.\" % full_repo_list.totalCount)\r\n```\r\n\r\nI did notice, after some skimming of PaginatedList.py, that the Link headers differ between the two tests. When collecting just my own repositories, I see the \"last\" link returned in the link header, but when querying for all repositories I only see \"next\" and \"first\" links returned.\r\n\r\ng.get_user().get_repos():\r\n```json\r\n'link':'<https://mygithubhost.lads/api/v3/user/repos?per_page=1&page=2>; rel=\"next\", <https://mygithubhost.lads/api/v3/user/repos?per_page=1& \r\npage=10>; rel=\"last\"'`\r\n```\r\n\r\ng.get_repos():\r\n```json\r\n'link':'<https://mygithubhost.lads/api/v3/repositories?per_page=1&since=112>; rel=\"next\", <https://mygithubhost.lads/api/v3/repositories{?since}>; rel=\"first\"'\r\n```\r\n\r\nI don't know what's causing this difference in behavior, though.\r\n\r\nIf I don't try to get totalCount from the object, it works as expected, but totalCount specifically seems to fail."}}, {"doc": {"_id": 1005, "title": "Question: Topics Preview on search repositories", "content": "Understanding of the preview state here, opening this up more as a question and open to alternative implementation (e.g. an opt-in flag).  Would this approach be merged in directly?\r\n\r\nIn relation to:\r\n\r\n> Note: The topics property for repositories on GitHub is currently available for developers to preview. To view the topics property in calls that return repository results, you must provide a custom media type in the Accept header: `application/vnd.github.mercy-preview+json`\r\n\r\nhttps://developer.github.com/v3/search/#search-repositories\r\n"}}, {"doc": {"_id": 1004, "title": "get_review_comments() method fails due to missing import", "content": "Specifically this line:\r\nhttps://github.com/PyGithub/PyGithub/blob/master/github/PullRequest.py#L552\r\nrequires that the `datetime` module be loaded. It isn't.\r\n\r\nAdding a \r\n```python\r\nimport datetime\r\n```\r\nat the top of `github/PullRequest.py` fixes this bug.\r\n\r\nI checked the test coverage and indeed there doesn't seem to be a test of this method.\r\n"}}, {"doc": {"_id": 1003, "title": "add: create project column card route", "content": "Add the missing route to create cards for projects columns\r\nTest written and passing locally."}}, {"doc": {"_id": 1002, "title": "Adding communications Retry functionality into requests via urllib3 retry object.", "content": "This is a continuation of the work started by @allevin on https://github.com/PyGithub/PyGithub/pull/860.\r\n\r\nI have refactored the testing Framework to use the `httpretty` library in order to use the urllib3 retry feature and therefore be able to test it.\r\n\r\nPlease refer to https://github.com/PyGithub/PyGithub/pull/860 for additional context.\r\n\r\ncc: @allevin @mfonville @jrouquie @sfdye\r\n\r\nCloses #757 \r\nCloses #860 \r\n"}}, {"doc": {"_id": 1001, "title": "user.node_id missing", "content": "'node_id' attribute was missing. Hence added the attribute using add_attribute script in AuthorizedUser  and NamedUser classes. \r\nThis fixes issue #999 .\r\n\r\n"}}, {"doc": {"_id": 1000, "title": "add_attribute.py raises TypeError with Python 3", "content": "```\r\nF:\\sourcecode\\github.com\\PyGithub\\PyGithub (master -> origin)\r\n\u03bb python scripts/add_attribute.py NamedUser node_id string\r\nTraceback (most recent call last):\r\n  File \"scripts/add_attribute.py\", line 141, in <module>\r\n    f.write(line + \"\\n\")\r\nTypeError: a bytes-like object is required, not 'str'\r\n\r\nF:\\sourcecode\\github.com\\PyGithub\\PyGithub (master -> origin)\r\n\u03bb python --version\r\nPython 3.7.0\r\n\r\nF:\\sourcecode\\github.com\\PyGithub\\PyGithub (master -> origin)\r\n\u03bb git log -n 1\r\ncommit 4a6daf6b9f78c8119841e825c36cb2739bca44dc (HEAD -> master, tag: v1.43.4, origin/master, origin/HEAD)\r\nAuthor: Wan Liuyang <tsfdye@gmail.com>\r\nDate:   Fri Dec 21 17:29:21 2018 +0800\r\n\r\n    Publish version 1.43.4\r\n```"}}, {"doc": {"_id": 999, "title": "user.node_id missing ", "content": "https://api.github.com/users api has `node_id` but when I get user detail, miss it, why? please be sure all attrs from list can be contained on get user detail, thanks!"}}, {"doc": {"_id": 998, "title": "Drop httplib for requests to finish work of #664", "content": "#664 got rid of most of httplib and replaced it with requests.\r\nThis is the last place it was used. It makes a more coherent code base I think.\r\n\r\nTests are ok locally."}}, {"doc": {"_id": 997, "title": "search_repositories: sporadically missing some repositories during search request", "content": "I am having some issues while using the github.search_repository API. During a search_repository call, it sometime returns all repositories which is fine, and few minutes later it return a list with some repositories missing.\r\nHere is a log output to be able to visualize where issue lies:\r\n\r\n```\r\n10:02:44  Iterate through all github repositories found with query: github.search_repository(query_string)\r\n\r\n10:02:45 github repository list  ['si_test2', 'si_test3', 'si_github', 'si_ece', **'si_test1'**, 'si_test5', 'si_circleci-automate', 'si_ece-ami-factory', 'si_aws-sam-skeleton', 'si_training_account_mgmt']\r\n\r\n10:04:44 Iterate through all github repositories found with query: github.search_repository(query_string)\r\n\r\n10:04:45 github repository list ['si_test3', 'si_test2', 'si_test5', 'si_circleci-automate', 'si_aws-sam-skeleton', 'si_ece-ami-factory', 'si_training_account_mgmt']\r\n\r\n10:06:44 Iterate through all github repositories found with query: github.search_repository(query_string)\r\n\r\n10:06:44 github repository list ['si_test2', 'si_test3', 'si_github', 'si_ece', **'si_test1'**, 'si_test5', 'si_circleci-automate', 'si_ece-ami-factory', 'si_aws-sam-skeleton', 'si_training_account_mgmt']\r\n```\r\n\r\nNotice that at \r\n10:02:45 si_test1 repository was found in the returned list.\r\n10:04:45 si_test1 repository not found in the list\r\n10:06:44 si_test1 was again found in the list\r\n\r\nAs i mentioned, this happens sporadically and si_test1 repository was never deleted during the 3 api calls.\r\nCould someone help me understand this? Or is there a better was to search for repositories and get a consistent set of result.\r\n"}}, {"doc": {"_id": 996, "title": "[WIP] Supporting the nested teams preview API (vnd.github.hellcat-preview+json)", "content": "This is missing tests, but since it requires an org to be set up with a nested team, I don't think I can add those tests without help.\r\n\r\nAnyway, this PR is trying to add support for:\r\nhttps://developer.github.com/changes/2017-08-30-preview-nested-teams/\r\n\r\nThings I am unsure about:\r\n  * `Organization.create_team` in this PR takes a `parent_team_id` parameter, which is what the API expects. Should this be `parent_team` and take a `Team` object? I feel like developers shouldn't have to create a `Team` instance just to set the parent id. However,\r\n  * There are plenty examples for one or the other. On the same method the parameter `repo_names`, which by name kind of implies `Sequence[str]` is then asserted to be of type `Sequence[Repository]`.\r\n  * immediately below it, `delete_hook` takes an `int` id as its parameter and not a `Hook` object.\r\n\r\nI could use some opinions or guidance on that."}}, {"doc": {"_id": 995, "title": "Add \"create repository project\" and \"create project column\" methods", "content": "Added the two methods:\r\n - Create a project for a given repo\r\n - Create a column for a given project \r\n\r\nTests are basics but done :)"}}, {"doc": {"_id": 994, "title": "get_user() method returns AuthenticatedUser(login=None) although the user is authenticated", "content": "fixes #992 The issue was because, `self._login.value` was being printed without fetching from the API."}}, {"doc": {"_id": 993, "title": "Adding support for pending team invitations", "content": "fixes #823 \r\n@sfdye can you please review it? :smiley: "}}, {"doc": {"_id": 992, "title": "get_user() method returns AuthenticatedUser(login=None) although the user is authenticated.", "content": "Although the user is being authenticated by using access token or (username, password), get_user() method returns `AuthenticatedUser(login=None)`. I think the required behavior should be `AuthenticatedUser(login=<username>)`\r\n\r\nExample\r\n```python\r\nfrom github import Github\r\n>>> client = Github(ACCESS_TOKEN)\r\n>>> client.get_user()\r\nAuthenticatedUser(login=None)"}}, {"doc": {"_id": 991, "title": "`AttributeError: 'IssueEvent' object has no attribute '_label'` for very few events", "content": "This strongly relates to https://github.com/PyGithub/PyGithub/issues/653 and shows that https://github.com/PyGithub/PyGithub/pull/857 did not entirely fix #653.\r\n\r\nCC @allevin \r\n\r\nI am processing events. Fetched them with `pr.as_issue().get_events()` where `pr` is a `PullRequest` object. I am then filtering `labeled` events, and want to look up the label name.\r\n\r\nSo I use `event.label.name` where `event` is an `IssueEvent` object.\r\n\r\nWith PyGithub 1.43.3 for hundreds of events this goes fine. For a small number of events in the same repository this raises an `AttributeError`:\r\n\r\n```\r\n  File \"/home/xxx/lib/python3.6/site-packages/github/IssueEvent.py\", line 125, in label\r\n    self._completeIfNotSet(self._label)\r\nAttributeError: 'IssueEvent' object has no attribute '_label'\r\n```\r\n\r\nNotably, with 1.40.x this failed for most (all?) of the events. So, things vastly improved in release 1.43.3, but seemingly pull/857 might not have addressed all edge cases.\r\n\r\nI looked at the raw data, at the raw HTTP response, but could not find the decisive difference between \"good\" events and \"bad\" events. However, for those events where the `event.label.name` lookup fails the raw data is actually *good*, and I could work around the problem by using `event._rawData['label']['name']`. Which suggests that this is actually a bug in the code.\r\n\r\nFor an example for a \"bad\" event, I hope to have the relevant details here:\r\n`pprint(vars(event))` yields:\r\n```\r\n{'_CompletableGithubObject__completed': False,\r\n '_actor': <github.GithubObject._ValuedAttribute object at 0x7f8147b19a58>,\r\n '_commit_id': <github.GithubObject._ValuedAttribute object at 0x7f8147b21320>,\r\n '_created_at': <github.GithubObject._ValuedAttribute object at 0x7f8147b21358>,\r\n '_event': <github.GithubObject._ValuedAttribute object at 0x7f8147b213c8>,\r\n '_headers': {'access-control-allow-origin': '*',\r\n              'access-control-expose-headers': 'ETag, Link, Location, '\r\n                                               'Retry-After, X-GitHub-OTP, '\r\n                                               'X-RateLimit-Limit, '\r\n                                               'X-RateLimit-Remaining, '\r\n                                               'X-RateLimit-Reset, '\r\n                                               'X-OAuth-Scopes, '\r\n                                               'X-Accepted-OAuth-Scopes, '\r\n                                               'X-Poll-Interval, '\r\n                                               'X-GitHub-Media-Type',\r\n              'cache-control': 'private, max-age=60, s-maxage=60',\r\n              'content-encoding': 'gzip',\r\n              'content-security-policy': \"default-src 'none'\",\r\n              'content-type': 'application/json; charset=utf-8',\r\n              'date': 'Mon, 10 Dec 2018 17:57:41 GMT',\r\n              'etag': 'W/\"893019cad2bd8f15c85852166424be95\"',\r\n              'referrer-policy': 'origin-when-cross-origin, '\r\n                                 'strict-origin-when-cross-origin',\r\n              'server': 'GitHub.com',\r\n              'status': '200 OK',\r\n              'strict-transport-security': 'max-age=31536000; '\r\n                                           'includeSubdomains; preload',\r\n              'transfer-encoding': 'chunked',\r\n              'vary': 'Accept, Authorization, Cookie, X-GitHub-OTP',\r\n              'x-accepted-oauth-scopes': 'repo',\r\n              'x-content-type-options': 'nosniff',\r\n              'x-frame-options': 'deny',\r\n              'x-github-media-type': 'github.v3; format=json',\r\n              'x-github-request-id': 'D1CE:1F6C:7612C6:119A43C:5C0EA915',\r\n              'x-oauth-scopes': 'repo',\r\n              'x-ratelimit-limit': '5000',\r\n              'x-ratelimit-remaining': '4638',\r\n              'x-ratelimit-reset': '1544468192',\r\n              'x-xss-protection': '1; mode=block'},\r\n '_id': <github.GithubObject._ValuedAttribute object at 0x7f8147b21438>,\r\n '_issue': NotSet,\r\n '_rawData': {'actor': {'avatar_url': 'https://avatars3.githubusercontent.com/u/22822961?v=4',\r\n                        'events_url': 'https://api.github.com/users/mesosphere-mergebot/events{/privacy}',\r\n                        'followers_url': 'https://api.github.com/users/mesosphere-mergebot/followers',\r\n                        'following_url': 'https://api.github.com/users/mesosphere-mergebot/following{/other_user}',\r\n                        'gists_url': 'https://api.github.com/users/mesosphere-mergebot/gists{/gist_id}',\r\n                        'gravatar_id': '',\r\n                        'html_url': 'https://github.com/mesosphere-mergebot',\r\n                        'id': 22822961,\r\n                        'login': 'mesosphere-mergebot',\r\n                        'node_id': 'MDQ6VXNlcjIyODIyOTYx',\r\n                        'organizations_url': 'https://api.github.com/users/mesosphere-mergebot/orgs',\r\n                        'received_events_url': 'https://api.github.com/users/mesosphere-mergebot/received_events',\r\n                        'repos_url': 'https://api.github.com/users/mesosphere-mergebot/repos',\r\n                        'site_admin': False,\r\n                        'starred_url': 'https://api.github.com/users/mesosphere-mergebot/starred{/owner}{/repo}',\r\n                        'subscriptions_url': 'https://api.github.com/users/mesosphere-mergebot/subscriptions',\r\n                        'type': 'User',\r\n                        'url': 'https://api.github.com/users/mesosphere-mergebot'},\r\n              'commit_id': None,\r\n              'commit_url': None,\r\n              'created_at': '2018-11-07T22:44:52Z',\r\n              'event': 'labeled',\r\n              'id': 1952934725,\r\n              'label': {'color': 'c5def5', 'name': 'Work In Progress'},\r\n              'node_id': 'MDEyOkxhYmVsZWRFdmVudDE5NTI5MzQ3MjU=',\r\n              'url': 'https://api.github.com/repos/dcos/dcos/issues/events/1952934725'},\r\n '_requester': <github.Requester.Requester object at 0x7f815b6689e8>,\r\n '_url': <github.GithubObject._ValuedAttribute object at 0x7f8147b21470>}\r\n```\r\n\r\nAs can be seen above the event is publicly visible through GitHub at https://api.github.com/repos/dcos/dcos/issues/events/1952934725, and at least to me it looks sane; and definitely has `'label': {'color': 'c5def5', 'name': 'Work In Progress'}` set."}}, {"doc": {"_id": 990, "title": "Replaced calls to str with calls to unicode", "content": "When logging responses from github, sometimes \"output\" will contain unicode characters that are not ascii encodable.\r\n\r\nThe resulting `Exception: UnicodeEncodeError` will often mask other underlying issues or problems.\r\n\r\nReplacing calls to `str(` with calls to `unicode(` should resolve the problem"}}, {"doc": {"_id": 989, "title": "[Snippet] Get all your downloads", "content": "```py\r\nfrom github import Github, GithubException\r\nusername = \"\"; password = \"\"; token = \"\"\r\n# from credentials import username, password, token\r\nheaders = { 'Authorization': \"Bearer %s\"%token,'Cache-Control': \"no-cache\" }\r\n\r\ng = Github(username, password)\r\n# g = Github(token)\r\n\r\nrepos = 0\r\nprocessed = 0\r\n# referrers = {}\r\nme = g.get_user()\r\nfor repo in me.get_repos():\r\n    repos += 1\r\n    failed = False\r\n    repo_str = \"Repository: %s [repo_dl]\"%repo.full_name\r\n    repo_downloads = 0\r\n    releases = repo.get_releases()\r\n    try:\r\n        for release in releases:\r\n            repo_str += \"\\n\\tRelease: %s (%s) [release_dl]\"%(release.title, release.tag_name)\r\n            assets = release.get_assets()\r\n            release_downloads = 0\r\n            for asset in assets:\r\n                release_downloads += asset.download_count\r\n                repo_str += \"\\n\\t\\tAsset: %s [%s]\" % (asset.name, asset.download_count)\r\n            repo_str = repo_str.replace(\"release_dl\", str(release_downloads))\r\n            repo_downloads += release_downloads\r\n    except GithubException:\r\n        failed = True\r\n        pass\r\n    repo_str = repo_str.replace(\"repo_dl\", str(repo_downloads))\r\n    print(repo_str)\r\n    if not failed: processed += 1\r\nprint(\"Repositories processed: %s / %s\"%(processed, repos))\r\n```"}}, {"doc": {"_id": 988, "title": "[Snippet] Get top overall referrers", "content": "```py\r\nfrom github import Github, GithubException\r\nfrom requests import request\r\nfrom collections import OrderedDict\r\nfrom json import dumps\r\ntoken = \"\"\r\n# from credentials import token\r\nheaders = { 'Authorization': \"Bearer %s\"%token,'Cache-Control': \"no-cache\" }\r\n\r\ng = Github(token)\r\n\r\nrepos = 0\r\nreferrers = {}\r\nme = g.get_user()\r\nfor repo in me.get_repos():\r\n    repos += 1\r\n    referers_ = request(\"GET\", \"https://api.github.com/repos/%s/%s/traffic/popular/referrers\"%(me.name, repo.name), headers=headers).json()\r\n    if not isinstance(referers_, list):\r\n        continue\r\n    for referrer in referers_:\r\n        name = referrer['referrer']\r\n        if not name in referrers.keys():\r\n            referrers[name] = 0\r\n        referrers[name] += referrer['count']\r\n        print(referrers)\r\n    # if repos > 3: break\r\nprint(\"Repositories processed:\",repos)\r\nasdict = OrderedDict(sorted(referrers.items()))\r\nprint(asdict)\r\nasjson = dumps(asdict)\r\nprint(asjson)\r\n```"}}, {"doc": {"_id": 987, "title": "[Snippet] Unprivate Repos (In case you plan to switch to github free)", "content": "```py\r\nfrom github import Github\r\nusername = \"\"\r\npassword = \"\"\r\ntoken = \"\"\r\n\r\ng = Github(username, password)\r\n# g = Github(token)\r\n\r\nrepos = 0\r\nprocessed = 0\r\nme = g.get_user()\r\nfor repo in me.get_repos():\r\n    repos += 1\r\n    failed = False\r\n    try:\r\n        repo.edit(private=False)\r\n        print(repo.name,\"is now public\")\r\n    except:\r\n        failed = True\r\n        print(\"Failed to make\",repo.full_name,\"public!\")\r\n    if not failed: processed += 1\r\nprint(\"Repositories processed: %s / %s\"%(processed, repos))\r\n```"}}, {"doc": {"_id": 986, "title": "[Snippet] Sub, Watch, Start all your repos", "content": "```py\r\nfrom github import Github, GithubException\r\nusername = \"\"\r\npassword = \"\"\r\ntoken = \"\"\r\n\r\ng = Github(username, password)\r\n# g = Github(token)\r\n\r\nrepos = 0\r\nprocessed = 0\r\nme = g.get_user()\r\nfor repo in me.get_repos():\r\n    repos += 1\r\n    failed = False\r\n    str = \"\"\r\n    try:\r\n        me.add_to_starred(repo)\r\n        str += \"Starred, \"\r\n    except:\r\n        failed = True\r\n        str += \"Failed to star, \"\r\n    try:\r\n        me.add_to_subscriptions(repo)\r\n        str += \"Subscribed, \"\r\n    except:\r\n        failed = True\r\n        str += \"Failed to subscribe, \"\r\n    try:\r\n        me.add_to_watched(repo)\r\n        str += \"Watched, \"\r\n    except:\r\n        failed = True\r\n        str += \"Failed to watch, \"\r\n    print(repo.full_name, \":\", str )\r\n    if not failed: processed += 1\r\nprint(\"Repositories processed: %s / %s\"%(processed, repos))\r\n```"}}, {"doc": {"_id": 985, "title": "Get issues I created across all visible repositories + owned + member", "content": "I've been trying for 20 minutes to do a simple thing: get the list of all issues I created. Just like what you get at https://github.com/issues.\r\n\r\nSo, it should be something like:\r\n\r\n```\r\nfrom github import Github\r\ng = Github('my_token')\r\nuser = g.get_user()\r\nissues = list(user.get_issues(state='all', filter='created'))\r\n```\r\n...right?\r\n\r\nExcept with this I get only the issues for the repositories I own or I am a member of. I don't get the issues I created on visible repositories I don't own or am not a member of.\r\n\r\nAm I missing something? I quote the docs from GitHub API:\r\n\r\n> List all issues assigned to the authenticated user across all visible repositories including owned repositories, member repositories, and organization repositories.\r\n\r\nIt seems that what I get is the result of `GET /user/issues`, not `GET /issues`."}}, {"doc": {"_id": 984, "title": "Timeout on reading file contents from repo.  Retry option?", "content": "I have a context started and sometimes we have a slow network going to our Github Enterprise installation.  So 95% of the time the following code is fine but I will hit an error on occasion:\r\n\r\n    The read operation timed out\r\n\r\nThe code is very simple \r\n\r\n\r\n```python     \r\n# Where self.gho is my github object is connected.\r\ncontents = self.gho.get_repo(repo).get_file_contents(lookup_file, commit)\r\n```\r\n\r\nIs there any way to change the options where there is a retry, a longer timeout?   I know there is the timeout during the initial login but that doesn't help me."}}, {"doc": {"_id": 983, "title": "Support  application/vnd.github.VERSION.diff", "content": "As documented here: https://developer.github.com/v3/media/#commits-commit-comparison-and-pull-requests. \r\n\r\nRequired for determining position for creating a review comment."}}, {"doc": {"_id": 982, "title": "reversed commits (with 'since' defined) actual count and total count mismatch ", "content": "```python\r\ncommits = repo.get_commits(\"master\", since=datetime.datetime.utcnow() - datetime.timedelta(days=30)).reversed\r\n\r\n# this could be 100\r\ntotal_count = commits.totalCount\r\n\r\n# but actually during iteration, actual count does not equal to 100, most likely less\r\ncount = 0\r\nfor c in commits.reversed:\r\n    count += 1\r\n\r\n# mismatch\r\nassert total_count == count"}}, {"doc": {"_id": 981, "title": "Tests for Python 2 differ from Python 3", "content": "Various tests differ between python 2 and python 3.  Tests should not differ between python versions as it can lead to subtle errors between implementation.  Different test strategies could be used to support both with the same set of tests.\r\n\r\nFor example the following comment:\r\n\r\n```python\r\n        # In Python 3.4+, dicts are not output in the same order as in Python 2.7.\r\n        # So, logging is not deterministic and we cannot test it.\r\n```\r\n\r\nTesting `dicts` could easily be made deterministic with a little bit of thought.  For example `sorted(dictionary.items())` would result in an ordered list of key, value tuples that would retain the order regardless of Python version."}}, {"doc": {"_id": 980, "title": "Fix variable shadows a python builtin", "content": ""}}, {"doc": {"_id": 979, "title": "Fix bugs in default args", "content": "Fix mutable data structure used for argument default\r\nFix call in argument default"}}, {"doc": {"_id": 978, "title": "Eval is unsafe", "content": "Replace `eval` calls with `ast.literal_eval`"}}, {"doc": {"_id": 977, "title": "Traffic Endpoints Support", "content": "Added support for the traffic endpoints found at https://developer.github.com/v3/repos/traffic/.\r\n\r\nWe added four functions to the Repository class (one for each of the endpoints) with corresponding unit tests. \r\n\r\nFixes #926 \r\n"}}, {"doc": {"_id": 976, "title": "Archive a Github repository instead of delete.", "content": "There is an option to **archive a repository** in \"Web Interface of Github\" but I think the same is not available with the **PyGithub API.**"}}, {"doc": {"_id": 975, "title": "added raw_data to dict response example", "content": "Fix for #956 "}}, {"doc": {"_id": 974, "title": "Get all of the contents of the repository recursively", "content": "I think that in an algorithm below an error because not all files will be printed\r\n```bash\r\n>>> repo = g.get_repo(\"PyGithub/PyGithub\")\r\n>>> contents = repo.get_contents(\"\")\r\n>>> while len(contents) > 1:\r\n...     file_content = contents.pop(0)\r\n...     if file_content.type == \"dir\":\r\n...         contents.extend(repo.get_contents(file_content.path))\r\n...     else:\r\n...         print(file_content)\r\n...\r\nContentFile(path=\".gitignore\")\r\nContentFile(path=\".travis.yml\")\r\nContentFile(path=\"CONTRIBUTING.md\")\r\n...\r\nContentFile(path=\"github/tests/ReplayData/Team.testRepoPermission.txt\")\r\nContentFile(path=\"github/tests/ReplayData/Team.testRepos.txt\")\r\nContentFile(path=\"github/tests/ReplayData/UserKey.setUp.txt\")\r\n```\r\nThis fix will correct a problem, isn't it?\r\n```bash\r\n>>> while contents:\r\n...     file_content = contents.pop(0)\r\n...     if file_content.type == \"dir\":\r\n...         contents.extend(repo.get_contents(file_content.path))\r\n...     else:\r\n...         print(file_content)\r\n...\r\n```\r\n"}}, {"doc": {"_id": 973, "title": "There is no way to create a required_status_checks in a branch", "content": "On a brand new repo, for most other options, the `edit_something()` calls will enable them but `branch.edit_required_status_checks(strict=True)` is failing with a 404:\r\n\r\n```{u'documentation_url': u'https://developer.github.com/enterprise/2.14/v3/repos/branches/#update-required-status-checks-of-protected-branch', u'message': u'Required status checks not enabled'}```\r\n\r\nUsing github enterprise 2.14, API v3 and pygithub 1.43.3"}}, {"doc": {"_id": 972, "title": "This is a new issue", "content": "This is the issue body"}}, {"doc": {"_id": 971, "title": "This is a new issue", "content": "This is the issue body"}}, {"doc": {"_id": 970, "title": "Show commits, additions and deletions of a contributor in a repo", "content": ""}}, {"doc": {"_id": 969, "title": " Change type of GitRelease.author to NamedUser", "content": "Github's release object in the API response contains an `author` field having a value much more like a `NamedUser` but not `GitAuthor`.\r\n\r\ne.g. https://api.github.com/repos/edhollandAL/PyGithub/releases/1210902\r\n\r\n```\r\n{\r\n  \"id\": 1210902,\r\n  \"author\": {\r\n    \"login\": \"edhollandAL\",\r\n    \"id\": 11922660,\r\n    \"node_id\": \"MDQ6VXNlcjExOTIyNjYw\",\r\n    \"avatar_url\": \"https://avatars1.githubusercontent.com/u/11922660?v=4\",\r\n    \"gravatar_id\": \"\",\r\n    \"url\": \"https://api.github.com/users/edhollandAL\",\r\n    \"html_url\": \"https://github.com/edhollandAL\",\r\n    \"followers_url\": \"https://api.github.com/users/edhollandAL/followers\",\r\n    \"following_url\": \"https://api.github.com/users/edhollandAL/following{/other_user}\",\r\n    \"gists_url\": \"https://api.github.com/users/edhollandAL/gists{/gist_id}\",\r\n    \"starred_url\": \"https://api.github.com/users/edhollandAL/starred{/owner}{/repo}\",\r\n    \"subscriptions_url\": \"https://api.github.com/users/edhollandAL/subscriptions\",\r\n    \"organizations_url\": \"https://api.github.com/users/edhollandAL/orgs\",\r\n    \"repos_url\": \"https://api.github.com/users/edhollandAL/repos\",\r\n    \"events_url\": \"https://api.github.com/users/edhollandAL/events{/privacy}\",\r\n    \"received_events_url\": \"https://api.github.com/users/edhollandAL/received_events\",\r\n    \"type\": \"User\",\r\n    \"site_admin\": false\r\n  },\r\n  // (ignored)\r\n}\r\n```\r\n\r\n"}}, {"doc": {"_id": 968, "title": "It is a good project.", "content": ""}}, {"doc": {"_id": 967, "title": "Fix Python 3 compatibility", "content": "This fixes the following python 3 compatibility issues\r\n\r\n1. Fixes relative imports as all imports are absolute in Python 3\r\n2. Fixes unicode not available in Python 3 (All strings are unicode)\r\n3. Fixes long not available in Python 3 (All integers are long)\r\n4. Fixes iterkeys, itervalues, and iteritems not available in Python 3\r\n5. Fixes print is now a function in Python 3\r\n6. Fixes leading zeros in a non-zero decimal number invalid in Python 3\r\n7. Fixes invalid excpetion syntax\r\n\r\nAdditionally it fixes the following issues:\r\n1. Fixes missing imports\r\n2. Fixes unused imports\r\n3. Fixes duplicate property\r\n4. Fixes incorrect conditional statement\r\n\r\nFixes #965"}}, {"doc": {"_id": 966, "title": "Add transfer support", "content": "Add support for the new `transfer` endpoint `https://developer.github.com/v3/repos/#transfer-a-repository`.\r\n\r\nI do not have idea to correctly test it as it need two users or organisations and repos in it.\r\n\r\nI am using it in small script to transfer repository from an user to an organisation and seems to work well.\r\n\r\nI hope I correctly followed the contributing guidelines. "}}, {"doc": {"_id": 965, "title": "Python 3 syntax errors", "content": "https://travis-ci.org/PyGithub/PyGithub/jobs/458702933#L1517\r\n\r\n$ flake8 . --count --select=E901,E999,F822,F823 --show-source --statistics\r\n```\r\n./github/GithubObject.py:141:29: E999 SyntaxError: invalid syntax\r\n            except Exception, e:\r\n                            ^\r\n./github/Requester.py:317:30: E999 SyntaxError: invalid syntax\r\n            except ValueError, e:\r\n                             ^\r\n./github/tests/AuthenticatedUser.py:247:87: E999 SyntaxError: invalid token\r\n        self.user.mark_notifications_as_read(datetime.datetime(2018, 10, 18, 18, 20, 01, 0))\r\n                                                                                      ^\r\n./github/tests/ExposeAllAttributes.py:137:31: E999 SyntaxError: invalid syntax\r\n                print className, attrName, \"->\", repr(value)\r\n                              ^\r\n./github/tests/Framework.py:96:18: E999 SyntaxError: invalid syntax\r\n        print verb, url, input, headers,\r\n                 ^\r\n./scripts/fix_headers.py:158:50: E999 SyntaxError: invalid syntax\r\n                print \"Don't know what to do with\", filename\r\n                                                 ^\r\n6     E999 SyntaxError: invalid syntax\r\n```"}}, {"doc": {"_id": 964, "title": "Travis CI: Add flake8 tests for syntax errors and undefined names", "content": "@labrys attempted to fix these issues in #705 but those changes do not exist in the current codebase.\r\n\r\n__E901,E999,F821,F822,F823__ are the \"_showstopper_\" [flake8](http://flake8.pycqa.org) issues that can halt the runtime with a SyntaxError, NameError, etc. Most other flake8 issues are merely \"style violations\" -- useful for readability but they do not effect runtime safety.\r\n* F821: undefined name `name`\r\n* F822: undefined name `name` in `__all__`\r\n* F823: local variable name referenced before assignment\r\n* E901: SyntaxError or IndentationError\r\n* E999: SyntaxError -- failed to compile a file into an Abstract Syntax Tree"}}, {"doc": {"_id": 963, "title": "Use total_count from data in PaginatedList", "content": "When there is no link header sent, this signifies that this is the only\r\npage of results. If data is empty, or only contains a list of items, we\r\nshould count them, but this can be defeated -- if the returned data\r\ncontains a total_count key, we should use it. This also uncovered a bug\r\nin the test suite for searching topics.\r\n\r\nCloses #960"}}, {"doc": {"_id": 962, "title": "Duplicated collaborators", "content": "In building an audit reporter using pyGitHub, I found that  many \"outside\" contributors per repo.get_collaborators(affiliation=\"outside\") would also show up on affiliation=\"direct\"\r\n\r\nThese users only show as outside contributors in the github UI. My guess is this is an api problem, but I have no idea how to validate that."}}, {"doc": {"_id": 961, "title": "get_issues documentation for state", "content": "Closes #835 "}}, {"doc": {"_id": 960, "title": "PaginatedList.totalCount is broken when there are 0 results", "content": "Self-contained test:\r\n```\r\nfrom github import Github\r\n\r\ngithub = Github()\r\nrepos = github.search_repositories('shouldreturn0repos')\r\n\r\nassert repos.totalCount == 0\r\n```\r\n\r\nThe `totalCount` method has this code:\r\n```\r\n    def totalCount(self):\r\n        if not self.__totalCount:\r\n            [...]\r\n            if 'link' not in headers:\r\n                self.__totalCount = len(data) if data else 0\r\n            [...]\r\n```\r\nThe response has no `link` header but it has this data:\r\n```\r\n{\"total_count\":0,\"incomplete_results\":false,\"items\":[]}\r\n```\r\nand `totalCount` returns 3 because there are 3 items inside the data dict.\r\n\r\nI'm not sure why the `total_count` value in the response is not used directly."}}, {"doc": {"_id": 959, "title": "Add a Topic object to cover search_topics", "content": "The return value of MainClass.search_topics() was a paginated list of\r\nRepository, which is incorrect. Add a Topic class to encapuslate what is\r\nreturned.\r\n\r\nFixes #929"}}, {"doc": {"_id": 958, "title": "How to get pull request checks status?", "content": "We were using github commit combined status to check the status of pr tests. Those were travis based tests and every thing was working fine. Recently we started using github based tests and that is not working any more. Is there any way we can get the combined status of github checks. "}}, {"doc": {"_id": 957, "title": "Handle 304s in `get_file_contents`", "content": "Hopefully serves as a template for other functions to add support in an incremental fashion"}}, {"doc": {"_id": 956, "title": "Improved docstring for raw_data and raw_headers properties #144", "content": "See my comment in #144 "}}, {"doc": {"_id": 955, "title": "Get all forks of my source repos?", "content": "I can get notified of people forkinb my repos but thats not half as interesting as knowing when the actually get modified.\nIs there a way to get a iterable with all repos on github that are forked from one of my or my organisations repos?"}}, {"doc": {"_id": 954, "title": "Implemented user organization membership", "content": "For #942"}}, {"doc": {"_id": 953, "title": "Update README.md", "content": ""}}, {"doc": {"_id": 952, "title": "How to get informations about reference in issue?", "content": "Hi,\r\nI'm using PyGithub for some boring tasks automatization where I need to check for a specific issue in the repository if any of pull requests reference it. Furthermore, if true, I would like to see if referencing pull request is already merged or not.\r\n\r\nIs there any way to do that with PyGithub? I've been looking in documentation and couldn't find anything related.\r\n\r\nI will be grateful if you can send me this information."}}, {"doc": {"_id": 951, "title": "Clone repository", "content": "I couldn't find this in the examples (or I overlooked it), but I can't see if it is possible to clone the repository using PyGithub."}}, {"doc": {"_id": 950, "title": "raise BadCredentialException when using Github enterprise", "content": "Fixes #934\r\n\r\ngithub enterprise does not give the same error message. Having this catch all 401 messages."}}, {"doc": {"_id": 949, "title": "Add find organization installations API", "content": "Adding support for https://developer.github.com/v3/apps/#find-organization-installation\r\n\r\nDepends on https://github.com/PyGithub/PyGithub/pull/948"}}, {"doc": {"_id": 948, "title": "Add support for JWT authentication", "content": "APIs such as https://developer.github.com/v3/apps/#find-organization-installation use a JWT for authentication. Adding support for JWT auth."}}, {"doc": {"_id": 947, "title": "Add methods to add and remove repos from installation", "content": "Adding methods for the two APIs below:\r\n* https://developer.github.com/v3/apps/installations/#add-repository-to-installation\r\n* https://developer.github.com/v3/apps/installations/#remove-repository-from-installation\r\n\r\nTwo reasons why the methods are in `AuthenticatedUser.py` and not in `Installation.py`:\r\n1. The API endpoints start with `/user`\r\n1. The APIs require a personal access token, whereas `Installation.py` uses an installation access token."}}, {"doc": {"_id": 946, "title": "Added missing params to constructor when reversed", "content": "This PR proposes adding two missing params to constructor in `.reversed`. This preserves the `headers` as well as the `list_item` once cloned.\r\n\r\nFixes #945."}}, {"doc": {"_id": 945, "title": "PaginatedList reversed property loses http headers", "content": "In reversed(), 'headers' parameter is not passed to PaginatedList(). It makes some APIs not reversible. For example, get_stargazers_with_dates() which requires \"Accept: application/vnd.github.v3.star+json\" header in the API call."}}, {"doc": {"_id": 944, "title": "github.GithubException.UnknownObjectException", "content": "```\r\nC:\\Users\\blusc\\AppData\\Local\\Programs\\Python\\Python36\\python.exe C:/Users/blusc/PycharmProjects/github-api/main.py\r\nTraceback (most recent call last):\r\n  File \"C:/Users/blusc/PycharmProjects/github-api/main.py\", line 14, in <module>\r\n    repo.edit(private=False)\r\n  File \"C:\\Users\\blusc\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\github\\Repository.py\", line 1284, in edit\r\n    input=post_parameters\r\n  File \"C:\\Users\\blusc\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\github\\Requester.py\", line 262, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, self.__customConnection(url)))\r\n  File \"C:\\Users\\blusc\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\github\\Requester.py\", line 273, in __check\r\n    raise self.__createException(status, responseHeaders, output)\r\ngithub.GithubException.UnknownObjectException: 404 {'message': 'Not Found', 'documentation_url': 'https://developer.github.com/v3/repos/#edit'}\r\n\r\nProcess finished with exit code 1\r\n```\r\n\r\nI get this for no reason? Is the library broken?\r\n\r\n```py\r\nfrom github import Github\r\ng = Github(\"correctusername\", \"correctpassword\")\r\nrepos = 0\r\nfor repo in g.get_user().get_repos():\r\n    repo.edit(private=False)\r\n    repos += 1\r\n    print(repo.name)\r\nprint(\"Repositories processed: %s\"%repos)\r\n```"}}, {"doc": {"_id": 943, "title": "Fix unable to trigger RateLimitExceededException.", "content": "I found when authorized, the ratelimit error message is different from unauthorized.\r\n\r\nso i add this.\r\n\r\nAfter studying hard with my 2b colleagues @AnYeMoWang , we finally realized how tests wrote.\r\n\r\n\ud83d\ude38 \ud83d\ude38 \ud83d\ude38 \ud83d\ude38 \ud83d\ude38 \ud83d\ude38 \ud83d\ude38 "}}, {"doc": {"_id": 942, "title": "Endpoint \"GET /user/memberships/orgs/:org\" not implemented", "content": "\r\n\r\n\r\n\r\nI want to ask \"is the current user C a member of organization O.\"\r\n\r\nI tried using the /orgs/:org/members/:user end point and simply specifying the current user as the parameter for `named_user`.   \r\n\u2013 GET: github.Organization.Organization.has_in_members()\r\n\r\nUsing code such as:\r\n\r\n```python\r\n        g = Github(resp['access_token'])\r\n        org = g.get_organization(org_name)\r\n        named_user = g.get_user(github_userid)\r\n       isMember = org.has_in_members(named_user)\r\n```\r\n\r\nBut that isn't working for me, for reasons I can't figure out.  (I used to work, but doesn't any more).\r\nI had a similar problem in a Java app based on https://github.com/jcabi/jcabi-github ... where I got it working using the alternative endpoint:\r\n\r\n \"GET /user/memberships/orgs/:org\" from \r\n\r\nhttps://developer.github.com/v3/orgs/members/#get-your-organization-membership\r\n\r\nBut that one does not seem to be implemented in PyGithub    It wasn't implemented in https://github.com/jcabi/jcabi-github  either, but I was able to find an example of how to \"go around\" the OO interface and interact with the underlying endpoints.  I'm wondering if there is some similar code for PyGithub?  Something like the PyGithub equivalent of this? \r\n\r\n```java\r\nJsonResponse jr = github.entry()\r\n\t\t\t\t.uri().path(\"/user/memberships/orgs/\" + orgname)\r\n\t\t\t\t.back()\r\n\t\t\t\t.method(Request.GET)\r\n\t\t\t\t.fetch()\r\n\t\t\t\t.as(JsonResponse.class);\r\n\r\n\t\t\tString role = jr.json().readObject().getString(\"role\");\r\n```\r\n\r\nOr, alternatively, perhaps adding a get_org_role(org_name) method to named_user?"}}, {"doc": {"_id": 941, "title": "'raw_data' method of PullRequestReview returns Nonetype error", "content": "I was trying to use following python code to get reviews of one repository. But 'raw_data' method of PullRequestReview object returns 'NoneType' object has no attribute 'startswith' error message.\r\n\r\n`    g = Github(token, per_page=100)`\r\n`    res = g.get_repo(id).get_pull(num).get_reviews()`\r\n`    page = res.get_page(0)`\r\n`    for review in page:`\r\n`        review_json = json.dumps(review.raw_data)`"}}, {"doc": {"_id": 940, "title": "review.raw_data returns NoneType on PullRequestReviewObject", "content": "I've been trying to use below python codes to get pull request reviews of one repository. But the methods raw_data returns 'NoneType' object has no attribute 'startswith' error message.\r\n`    g = Github(token, per_page=100)`\r\n`    res = g.get_repo(int(66293963)).get_pull(46).get_reviews()`\r\n`    page = res.get_page(0)`\r\n`    for review in page:`\r\n`        review_json = json.dumps(review.raw_data)`"}}, {"doc": {"_id": 939, "title": "Added support for required signatures on protected branches", "content": "Wraps the parts of the branch protection API that allows the user to require signed commits on a branch.\r\nNew methods are :\r\n* Branch.get_required_signatures : returns true if signed commits are required\r\n* Branch.add_required_signatures : adds the requirements for signed commits on a branch\r\n* Branch.remove_required_signatures : removes the requirement for signed commits on a branch\r\n\r\nIt uses the API provided on this page : https://developer.github.com/v3/repos/branches/\r\n\r\nSince this feature is in [preview](https://developer.github.com/changes/2018-02-22-protected-branches-required-signatures/) I pass the 'Accept application/vnd.github.zzzax-preview+json' header to each request."}}, {"doc": {"_id": 938, "title": "Ability to filter repository collaborators", "content": "## Changes\r\n- Add `affiliation` parameter to `get_collaborators()` and use it to filter collaborators through the API\r\n- Resolves #937\r\n\r\n\r\nPS: Would have loved to add a simple test for this but there seems to be a problem on my end using OAuth as I'm just not able to authenticate to the API during tests."}}, {"doc": {"_id": 937, "title": "Add the ability to filter repository collaborators", "content": "The GitHub API call for retrieving repository collaborators[allows for [filtering by affiliation](https://developer.github.com/v3/repos/collaborators/#list-collaborators).\r\n\r\nThis is not possible with the current [github.Repository.Repository.get_collaborators()](https://github.com/PyGithub/PyGithub/blob/0a10d7cdf0f69ebac6d99e9699df5696cb1e9bea/github/Repository.py#L1343-L1353) function."}}, {"doc": {"_id": 936, "title": "Add some examples for Branch", "content": "In the spirit of #874, add some examples for working with Branch\r\nobjects. It doesn't add everything, but it's a start."}}, {"doc": {"_id": 935, "title": "Update Repository.rst", "content": "stargazers count attribute  is misspelled"}}, {"doc": {"_id": 934, "title": "BadCredentialsException not raised on GitHub enterprise", "content": "On Github Enterprise, the API message does not read \"Bad credentials\" when incorrect credentials are supplied. It reads \"Must authenticate to access this API.\"\r\n\r\nMight be better to just go off of the 401 code as opposed to the error message.\r\n\r\n if status == 401 and output.get(\"message\") == \"Bad credentials\":\r\n\r\nshould be\r\n if status == 401:"}}, {"doc": {"_id": 933, "title": "Couldn't get ContentFile's last_modified attribute directly", "content": "I've found a weird thing recently, I couldn't get ```last_modified``` unless I called ```update()```function. Is it a bug or something?:\r\n```\r\nIn [9]: res = g.search_code('pygithub')\r\n\r\nIn [10]: files = res.get_page(0)\r\n\r\nIn [11]: print(files[0].last_modified)\r\nNone\r\n\r\nIn [12]: files[0].update()\r\nOut[12]: True\r\n\r\nIn [13]: files[0].last_modified\r\nOut[13]: 'Thu, 25 Jan 2018 18:00:05 GMT'\r\n```\r\n"}}, {"doc": {"_id": 932, "title": "Mark notification as read", "content": "Wraps the parts of the notification API that allows the user to mark notifications as read.\r\nNew methods are : \r\n \r\n- Notification.mark_as_read : marks a single notification thread as read\r\n- Repository.mark_notifications_as_read : marks all the notifications for a given repository as read\r\n- AuthenticatedUser.mark_notifications_as_read : marks all the notifications as read\r\n\r\nAims to fix : https://github.com/PyGithub/PyGithub/issues/571 and simply uses the APIs described on this page : https://developer.github.com/enterprise/11.10.340/v3/activity/notifications/\r\n\r\nA weird thing I noticed doing this is that Repository.notifications_url doesn't seem to be usable directly. I used Repository.url + \"/notifications\" instead."}}, {"doc": {"_id": 931, "title": "Add a trailing slash to URL when updating or deleting a file (tests fixed)", "content": "Closes #877\r\nCloses #878\r\nCloses #846 \r\n\r\nAddress failing tests in https://github.com/PyGithub/PyGithub/pull/878"}}, {"doc": {"_id": 930, "title": "Example: Listen for New Events with PyGithub and Pyramid", "content": "## What does this change do?\r\nAdds a small demo implementation of how one might use webhooks to listen for\r\nnew events in a given repository.\r\n\r\n### Additions\r\n#### doc/examples/Webhook.rst\r\nAdds a new `.rst` file, `Webhook.rst`, which can be used for demonstrating the usage of Webhooks in PyGithub.\r\n\r\nThe example that I've added shows how to continually listen for events using Pyramid in conjunction with PyGithub.\r\n\r\n## Motivation\r\nThis example is in the spirit of #874. [It was asked](https://github.com/PyGithub/PyGithub/issues/874#issuecomment-429075695) that someone provide an example of how to listen to events from a repository.\r\n\r\n## How has this been tested?\r\nI've built the docs locally and made sure the HTML is generated as expected.\r\n\r\n## Screenshots\r\n![webhook1](https://user-images.githubusercontent.com/16039329/46991191-40e58900-d0db-11e8-87e4-d5cf2cc18b0a.png)\r\n![webhook2](https://user-images.githubusercontent.com/16039329/46991193-42af4c80-d0db-11e8-9b20-678f70e6baee.png)\r\n\r\n\r\n\r\n"}}, {"doc": {"_id": 929, "title": "Github.search_topics returning list of repos that throw an error when trying to fetch undefined data", "content": "Hello,\r\n\r\nI was trying to fetch a list of repositories with a specific topic and then play with the returned attributes, but the Repository objects returned in the PaginatedList throw an error when trying to fetch unknown data:\r\n```bash\r\nTraceback (most recent call last):\r\n  File \"github-crawler.py\", line 6, in <module>\r\n    print(i, repo.archive_url)\r\n  File \"/home/user/.local/lib/python3.6/site-packages/github/Repository.py\", line 2407, in get_topics\r\n    self.url + \"/topics\",\r\n  File \"/home/user/.local/lib/python3.6/site-packages/github/Repository.py\", line 745, in url\r\n    self._completeIfNotSet(self._url)\r\n  File \"/home/user/.local/lib/python3.6/site-packages/github/GithubObject.py\", line 259, in _completeIfNotSet\r\n    self._completeIfNeeded()\r\n  File \"/home/user/.local/lib/python3.6/site-packages/github/GithubObject.py\", line 263, in _completeIfNeeded\r\n    self.__complete()\r\n  File \"/home/user/.local/lib/python3.6/site-packages/github/GithubObject.py\", line 268, in __complete\r\n    self._url.value\r\n  File \"/home/user/.local/lib/python3.6/site-packages/github/Requester.py\", line 262, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, self.__customConnection(url)))\r\n  File \"/home/user/.local/lib/python3.6/site-packages/github/Requester.py\", line 278, in __customConnection\r\n    if not url.startswith(\"/\"):\r\nAttributeError: 'NoneType' object has no attribute 'startswith'\r\n```\r\n\r\nBelow is an example of the code:\r\n```python\r\nfrom github import Github\r\n\r\ng = Github(per_page=300)\r\ni = 1\r\nfor repo in g.search_topics('security'):\r\n    print(i, repo.archive_url)\r\n    i += 1\r\n```\r\n\r\nIt can be tested here: [https://repl.it/repls/LawngreenPlushBetaversion](https://repl.it/repls/LawngreenPlushBetaversion)\r\n\r\nEnvironment:\r\nLinux ubuntu 4.15.0-36-generic x86_64 GNU/Linux\r\nPython 3.6.6\r\nPyGithub 1.43.2\r\n\r\nAny help with that ?\r\nAnd thanks"}}, {"doc": {"_id": 928, "title": "Added better error handling when the server returns a 5XX status code", "content": "My Sentry recently came across an issue where the server raised a 502 server error, as this is an 'unknown' status code there's no way to handle the exception without having to catch all exceptions rather than specifically server-related errors (this caused a periodic celery task to fail, which lead to it not being run at all). \r\n\r\nThe following change ensures all status codes from 500 to 599 (`599 in range(500, 599)` results in `False`, hence the 600) are given a custom exception class in `Requester.__createException`\r\n\r\nThe error in Sentry:\r\n\r\n<img width=\"1069\" alt=\"screen shot 2018-10-09 at 21 27 50\" src=\"https://user-images.githubusercontent.com/6770124/46787883-13928700-cd39-11e8-8996-62f3185f8595.png\">\r\n\r\nThe following would be too broad of an exception handler:\r\n\r\n<img width=\"578\" alt=\"screen shot 2018-10-11 at 09 36 46\" src=\"https://user-images.githubusercontent.com/6770124/46787937-3d4bae00-cd39-11e8-9818-61e2f141ed59.png\">\r\n"}}, {"doc": {"_id": 927, "title": "Example to show How to get Commit Date", "content": "## What does this change do?\r\nAdds a small example of how to get at the date a commit took place.\r\n\r\n### Changes\r\n#### doc/examples/Commit.rst\r\nAdds a block of code that demonstrates how to get at a commit's date.\r\n\r\n## Motivation\r\nThis example is in the spirit of #874.\r\n\r\nWhen I began using PyGithub it was not readily apparent to me where the commit date was being abstracted to. Being unfamiliar with Git's API, it took some convincing for me to be satisfied that the `Commit.commit.author/committer.date` path would get me the commit date.\r\n\r\nI would hope that this would save somebody a little bit of time in the future.\r\n\r\n## How has this been tested?\r\nI've built the docs locally and made sure the HTML is generated as expected.\r\n\r\n## Screenshots\r\n![2018-10-11 3](https://user-images.githubusercontent.com/16039329/46782728-add4d980-ccfd-11e8-88dd-1e48be629eb5.png)\r\n\r\n\r\n"}}, {"doc": {"_id": 926, "title": "GitHub Repo Traffic Endpoints are Missing", "content": "Hello there,\r\n\r\nLove the work that's being done here.\r\n\r\nIt appears that there is a set of endpoints that are from the traffic endpoints.\r\n\r\nSpecifically\r\n`GET /repos/:owner/:repo/traffic/popular/referrers`\r\n`GET /repos/:owner/:repo/traffic/popular/paths`\r\n`GET /repos/:owner/:repo/traffic/views`\r\n`GET /repos/:owner/:repo/traffic/clones`\r\n\r\nThese can be found here:\r\nhttps://developer.github.com/v3/repos/traffic/\r\n\r\nWould love to see these added!\r\n\r\nKeep up the great work!"}}, {"doc": {"_id": 925, "title": "Add highlight search to search_code function", "content": "Closes #591\r\n\r\nThe original ```search_code``` function in ```MainClass.py``` dose not support highlight search, so I added highlight parameter in this function and completed it (according to [highlighting-code-search](https://developer.github.com/v3/search/#highlighting-code-search-results-1) ). \r\nNow we can call it like this~\r\n<img width=\"720\" alt=\"2018-10-10 2 46 10\" src=\"https://user-images.githubusercontent.com/10385628/46717727-83523480-cc9b-11e8-8f1b-dd66c53e5ad4.png\">"}}, {"doc": {"_id": 924, "title": "removing requirements.txt in favor of pipenv conf files", "content": ""}}, {"doc": {"_id": 923, "title": "deprecate requirements in favor of pipenv", "content": "this is more a feature request than an issue\r\npipenv is the new python packaging tool that solves different known problems using the old pip + virtualenv + requirements.txt mode\r\nwould be nice to add the configuration files to the repo and remove requirements.txt"}}, {"doc": {"_id": 922, "title": "adding suspended_at property to NamedUser", "content": "Closes #900"}}, {"doc": {"_id": 921, "title": "Improve __repr__ method of Milestone class", "content": "This commit add the title of milestone in string representation of Milestone class.\r\nThis modification improve readbility of milestone instances.\r\n\r\nBefore:\r\n```python\r\n>>> repo.get_milestone(number=1)\r\nMilestone(number=1) \r\n```\r\nAfter:\r\n```python\r\n>>> repo.get_milestone(number=1)\r\nMilestone(title='Milestone Example', number=1) \r\n```"}}, {"doc": {"_id": 920, "title": "New use examples", "content": "This PR add the follow code examples\r\n\r\n* Issue examples (get list, get specific issue, create issue)\r\n* Milestone examples (get list, get specific milestone, create milestone)\r\n\r\nRef.: https://github.com/PyGithub/PyGithub/issues/874"}}, {"doc": {"_id": 919, "title": "Timeout exception in request for PRs from a Repository", "content": "Refer #808\r\n\r\n```\r\n\r\nTraceback (most recent call last):\r\n  File \"run.py\", line 28, in <module>\r\n    if p.merged:\r\n  File \"C:\\Python34\\lib\\site-packages\\github\\PullRequest.py\", line 225, in merged\r\n    self._completeIfNotSet(self._merged)\r\n  File \"C:\\Python34\\lib\\site-packages\\github\\GithubObject.py\", line 251, in _completeIfNotSet\r\n    self._completeIfNeeded()\r\n  File \"C:\\Python34\\lib\\site-packages\\github\\GithubObject.py\", line 255, in _completeIfNeeded\r\n    self.__complete()\r\n  File \"C:\\Python34\\lib\\site-packages\\github\\GithubObject.py\", line 260, in __complete\r\n    self._url.value\r\n  File \"C:\\Python34\\lib\\site-packages\\github\\Requester.py\", line 172, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, cnx))\r\n  File \"C:\\Python34\\lib\\site-packages\\github\\Requester.py\", line 213, in requestJson\r\n    return self.__requestEncode(cnx, verb, url, parameters, headers, input, encode)\r\n  File \"C:\\Python34\\lib\\site-packages\\github\\Requester.py\", line 252, in __requestEncode\r\n    status, responseHeaders, output = self.__requestRaw(cnx, verb, url, requestHeaders, encoded_input)\r\n  File \"C:\\Python34\\lib\\site-packages\\github\\Requester.py\", line 277, in __requestRaw    requestHeaders\r\n  File \"C:\\Python34\\lib\\http\\client.py\", line 1090, in request    self._send_request(method, url, body, headers)  \r\n  File \"C:\\Python34\\lib\\http\\client.py\", line 1128, in _send_request\r\n    self.endheaders(body)\r\n  File \"C:\\Python34\\lib\\http\\client.py\", line 1086, in endheaders\r\n    self._send_output(message_body)\r\n  File \"C:\\Python34\\lib\\http\\client.py\", line 924, in _send_output\r\n    self.send(msg)\r\n  File \"C:\\Python34\\lib\\http\\client.py\", line 859, in send\r\n    self.connect()\r\n  File \"C:\\Python34\\lib\\http\\client.py\", line 1230, in connect\r\n    server_hostname=sni_hostname)\r\n  File \"C:\\Python34\\lib\\ssl.py\", line 364, in wrap_socket\r\n    _context=self)\r\n  File \"C:\\Python34\\lib\\ssl.py\", line 578, in __init__\r\n    self.do_handshake()\r\n  File \"C:\\Python34\\lib\\ssl.py\", line 805, in do_handshake\r\n    self._sslobj.do_handshake()\r\nsocket.timeout: _ssl.c:584: The handshake operation timed out\r\n\r\n```"}}, {"doc": {"_id": 918, "title": "Add examples for searching repositories (#874)", "content": ""}}, {"doc": {"_id": 917, "title": "Add examples for Repository as per #874", "content": ""}}, {"doc": {"_id": 916, "title": "Fix handling of 301 redirects", "content": "Requester.__requestRaw() was handling 301 redirects by passing the full\r\nURL to itself, when it only expects a URL path, so parse out the path,\r\nand pass that in. Add a test for this behaviour.\r\n\r\nCloses: #906"}}, {"doc": {"_id": 915, "title": "get repos missing params for authenticated users", "content": "first commit to fix issue #435 "}}, {"doc": {"_id": 914, "title": "Gists with since", "content": "The Github gists api has a since parameter for the various gist searches.  This adds that parameter to Github.get_gists(), NamedUser.get_gists() and Authenticator.get_gists().  Tests and replay data added/updated as needed.\r\n\r\nI added a Time module in the tests directory, containing just a UTCtzinfo class, which I felt I needed for one of the tests (and would probably be useful in other since/until tests).  Might not be the best name for the module but it seemed the least invasive thing to do."}}, {"doc": {"_id": 913, "title": "How to get public events?", "content": "Is there a way to do this - https://developer.github.com/v3/activity/events/#list-public-events?"}}, {"doc": {"_id": 912, "title": "GithubException: 500 None when using get_issues", "content": "Hi,\r\n\r\nWhen using ```\r\nrepo = g.get_repo(\"some/repo\")\r\nrepo.get_issues(sort='created', direction='desc', state='closed')``` it fails after a few seconds with:\r\n```\r\n---------------------------------------------------------------------------\r\nGithubException                           Traceback (most recent call last)\r\n<timed exec> in <module>()\r\n\r\n/opt/conda/lib/python3.6/site-packages/github/PaginatedList.py in __iter__(self)\r\n     62             yield element\r\n     63         while self._couldGrow():\r\n---> 64             newElements = self._grow()\r\n     65             for element in newElements:\r\n     66                 yield element\r\n\r\n/opt/conda/lib/python3.6/site-packages/github/PaginatedList.py in _grow(self)\r\n     74 \r\n     75     def _grow(self):\r\n---> 76         newElements = self._fetchNextPage()\r\n     77         self.__elements += newElements\r\n     78         return newElements\r\n\r\n/opt/conda/lib/python3.6/site-packages/github/PaginatedList.py in _fetchNextPage(self)\r\n    194             self.__nextUrl,\r\n    195             parameters=self.__nextParams,\r\n--> 196             headers=self.__headers\r\n    197         )\r\n    198         data = data if data else []\r\n\r\n/opt/conda/lib/python3.6/site-packages/github/Requester.py in requestJsonAndCheck(self, verb, url, parameters, headers, input)\r\n    260 \r\n    261     def requestJsonAndCheck(self, verb, url, parameters=None, headers=None, input=None):\r\n--> 262         return self.__check(*self.requestJson(verb, url, parameters, headers, input, self.__customConnection(url)))\r\n    263 \r\n    264     def requestMultipartAndCheck(self, verb, url, parameters=None, headers=None, input=None):\r\n\r\n/opt/conda/lib/python3.6/site-packages/github/Requester.py in __check(self, status, responseHeaders, output)\r\n    271         output = self.__structuredFromJson(output)\r\n    272         if status >= 400:\r\n--> 273             raise self.__createException(status, responseHeaders, output)\r\n    274         return responseHeaders, output\r\n    275 \r\n\r\nGithubException: 500 None\r\n```\r\nAny way to work around this?\r\n\r\nInterestingly when using `repo.get_issues(sort='created', direction='desc', state=\"open\")` it works fine.\r\n\r\nAny pointing in the right direction appreciated."}}, {"doc": {"_id": 911, "title": "get_repo crashes with UnicodeEncodeError if log level is DEBUG when GitHub response contains unicode symbol", "content": "So I've got a call to `github.MainClass.get_repo()` (repo in question is `ansible/ansible`). The error message pointed to \"mdash\" (long dash/`\u2014`) being an offender.\r\n\r\nAfter some digging I've reached call to `github.Requester.__log()` https://github.com/PyGithub/PyGithub/blob/a18eeb3/github/Requester.py#L460-L470\r\n\r\nIt became obvious that `str(output)` is trying to decode `utf-8` text using `ascii` codec, which is fine as long as there's only latin1 chars in that `unicode` string.\r\n\r\n### Workaround\r\nI explicitly lowered log level\r\n```python\r\nlogging.getLogger('github.Requester').setLevel(logging.INFO)\r\n```"}}, {"doc": {"_id": 910, "title": "Prevent .netrc from overwriting Auth header", "content": "# Problem\r\n\r\n`Authorization` header is overwritten by `.netrc` even if I set `login_or_token` in `github.Github`.\r\n\r\n## Steps to reproduce\r\n\r\n1. Add entry for github.com in `~/.netrc`\r\n2. Construct `Github` with different config than `~/.netrc`: `gh = Github(token)`\r\n3. Make any request\r\n\r\n# Cause\r\n\r\nSince v1.40, PyGithub start using [**requests**](https://github.com/requests/requests) library for http requesting (see #664).\r\n\r\nIn **requests**, `auth` attribute  of session or requests is the primary way of authenticate. If no `auth` set, `.netrc` file is used and 'Authorization' header is overwritten.\r\n\r\nHowever, PyGithub authenticates requests by simply adding 'Authorization' header in `Requester.__authenticate`, which is not the way **requests** library expected.\r\n\r\n# Solution\r\n\r\nDefined custom authentication function which uses `.netrc` file if-and-only-if `Authorization` header isn't set already.\r\n\r\n## Other possible, but declined solution\r\n\r\n### Set `trust_env=False`\r\n\r\nThis is [the official way to ignore `.netrc`](https://github.com/requests/requests/issues/2773), but it disables `.netrc` at all even when no token specified, and also disables proxy handling.\r\n\r\n### Use custom authentication to set `Authorization` header.\r\n\r\nThis seems the cleaner way when using only **requests** library.\r\n\r\nHowever, PyGithub's `Requester` support injection of http client, and the above method won't work for injected non-**requests** client."}}, {"doc": {"_id": 909, "title": "Line comments are not posted in create_review()", "content": "When `create_review()` is called with comments in the `comments` argument,\r\nthey are not actually posted in the API call."}}, {"doc": {"_id": 908, "title": "Prepare redirect url", "content": "I've hit a problem around 301 response, providing possible fix."}}, {"doc": {"_id": 907, "title": "Commit.author and Commit.committer lose information", "content": "`Commit.author` and `Commit.committer` are converted to `NamedUser`, which gives information about the GitHub account, not about the commit.\r\n\r\nIn the raw json query, something like this is returned\r\n```\r\n    ...    \r\n    \"commit\": {\r\n      \"author\": {\r\n        \"name\": \"Author Name\",\r\n        \"email\": \"author.name@institution.org\",\r\n        \"date\": \"2018-08-30T18:22:26Z\"\r\n      },\r\n     ...\r\n```\r\nwhere `date` is the time stamp the commit was made, but `Commit.author.created_at` appears to return the date the GitHub account was opened.\r\n\r\nAs a result, there appears to be no way to determine when a commit was made or repository was tagged, even though this information is trivially obtained with `git log`."}}, {"doc": {"_id": 906, "title": "InvalidURL on 301 - Moved Permanently response when getting repo", "content": "## Issue\r\n\r\nWhen I want to retrieve a repo that has been moved, the subsequent request is sent to a badly constructed url.\r\n\r\n## Reproduction\r\n\r\n```\r\nclient = Github(user, pass)\r\nclient.get_repo('protoncoin/protoncoin')  # at the time of writing\r\n```\r\n\r\n## Suspected cause\r\n\r\nThe location parameter of a 301 response returns the full URL, while the `_requestRaw` method only expects the path part which it then appends to the api host name.\r\n\r\n## Logs and trace\r\n\r\n```\r\nGET https://api.github.com/repos/protoncoin/protoncoin {'Authorization': 'Basic (login and password removed)', 'User-Agent': 'PyGithub/Python'} None ==> 301 {'server': 'GitHub.com', 'date': 'Tue, 18 Sep 2018 08:19:03 GMT', 'content-type': 'application/json; charset=utf-8', 'content-length': '155', 'status': '301 Moved Permanently', 'x-ratelimit-limit': '5000', 'x-ratelimit-remaining': '4999', 'x-ratelimit-reset': '1537262343', 'location': 'https://api.github.com/repositories/112116543', 'x-github-media-type': 'github.v3; format=json', 'access-control-expose-headers': 'ETag, Link, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval', 'access-control-allow-origin': '*', 'strict-transport-security': 'max-age=31536000; includeSubdomains; preload', 'x-frame-options': 'deny', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'referrer-policy': 'origin-when-cross-origin, strict-origin-when-cross-origin', 'content-security-policy': \"default-src 'none'\", 'x-runtime-rack': '0.058003', 'x-github-request-id': 'C726:6007:FD2DB:246691:5BA0B4F6'} {\"message\":\"Moved Permanently\",\"url\":\"https://api.github.com/repositories/112116543\",\"documentation_url\":\"https://developer.github.com/v3/#http-redirects\"}\r\nDEBUG:github.Requester:GET https://api.github.com/repos/protoncoin/protoncoin {'Authorization': 'Basic (login and password removed)', 'User-Agent': 'PyGithub/Python'} None ==> 301 {'server': 'GitHub.com', 'date': 'Tue, 18 Sep 2018 08:19:03 GMT', 'content-type': 'application/json; charset=utf-8', 'content-length': '155', 'status': '301 Moved Permanently', 'x-ratelimit-limit': '5000', 'x-ratelimit-remaining': '4999', 'x-ratelimit-reset': '1537262343', 'location': 'https://api.github.com/repositories/112116543', 'x-github-media-type': 'github.v3; format=json', 'access-control-expose-headers': 'ETag, Link, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval', 'access-control-allow-origin': '*', 'strict-transport-security': 'max-age=31536000; includeSubdomains; preload', 'x-frame-options': 'deny', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'referrer-policy': 'origin-when-cross-origin, strict-origin-when-cross-origin', 'content-security-policy': \"default-src 'none'\", 'x-runtime-rack': '0.058003', 'x-github-request-id': 'C726:6007:FD2DB:246691:5BA0B4F6'} {\"message\":\"Moved Permanently\",\"url\":\"https://api.github.com/repositories/112116543\",\"documentation_url\":\"https://developer.github.com/v3/#http-redirects\"}\r\n---------------------------------------------------------------------------\r\nLocationParseError                        Traceback (most recent call last)\r\n~/crypto-pulse/backend/.venv/lib/python3.6/site-packages/requests/models.py in prepare_url(self, url, params)\r\n    370         try:\r\n--> 371             scheme, auth, host, port, path, query, fragment = parse_url(url)\r\n    372         except LocationParseError as e:\r\n\r\n~/crypto-pulse/backend/.venv/lib/python3.6/site-packages/urllib3/util/url.py in parse_url(url)\r\n    198             if not port.isdigit():\r\n--> 199                 raise LocationParseError(url)\r\n    200             try:\r\n\r\nLocationParseError: Failed to parse: api.github.com:443https:\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nInvalidURL                                Traceback (most recent call last)\r\n<ipython-input-41-a454b5ea095e> in <module>()\r\n----> 1 prc = client.get_repo('protoncoin/protoncoin')\r\n\r\n~/crypto-pulse/backend/.venv/lib/python3.6/site-packages/github/MainClass.py in get_repo(self, full_name_or_id, lazy)\r\n    288         headers, data = self.__requester.requestJsonAndCheck(\r\n    289             \"GET\",\r\n--> 290             \"%s%s\" % (url_base, full_name_or_id)\r\n    291         )\r\n    292         return Repository.Repository(self.__requester, headers, data, completed=True)\r\n\r\n~/crypto-pulse/backend/.venv/lib/python3.6/site-packages/github/Requester.py in requestJsonAndCheck(self, verb, url, parameters, headers, input)\r\n    260 \r\n    261     def requestJsonAndCheck(self, verb, url, parameters=None, headers=None, input=None):\r\n--> 262         return self.__check(*self.requestJson(verb, url, parameters, headers, input, self.__customConnection(url)))\r\n    263 \r\n    264     def requestMultipartAndCheck(self, verb, url, parameters=None, headers=None, input=None):\r\n\r\n~/crypto-pulse/backend/.venv/lib/python3.6/site-packages/github/Requester.py in requestJson(self, verb, url, parameters, headers, input, cnx)\r\n    317             return \"application/json\", json.dumps(input)\r\n    318 \r\n--> 319         return self.__requestEncode(cnx, verb, url, parameters, headers, input, encode)\r\n    320 \r\n    321     def requestMultipart(self, verb, url, parameters=None, headers=None, input=None, cnx=None):\r\n\r\n~/crypto-pulse/backend/.venv/lib/python3.6/site-packages/github/Requester.py in __requestEncode(self, cnx, verb, url, parameters, requestHeaders, input, encode)\r\n    370         self.NEW_DEBUG_FRAME(requestHeaders)\r\n    371 \r\n--> 372         status, responseHeaders, output = self.__requestRaw(cnx, verb, url, requestHeaders, encoded_input)\r\n    373 \r\n    374         if Consts.headerRateRemaining in responseHeaders and Consts.headerRateLimit in responseHeaders:\r\n\r\n~/crypto-pulse/backend/.venv/lib/python3.6/site-packages/github/Requester.py in __requestRaw(self, cnx, verb, url, requestHeaders, input)\r\n    412 \r\n    413         if status == 301 and 'location' in responseHeaders:\r\n--> 414             return self.__requestRaw(original_cnx, verb, responseHeaders['location'], requestHeaders, input)\r\n    415 \r\n    416         return status, responseHeaders, output\r\n\r\n~/crypto-pulse/backend/.venv/lib/python3.6/site-packages/github/Requester.py in __requestRaw(self, cnx, verb, url, requestHeaders, input)\r\n    394             requestHeaders\r\n    395         )\r\n--> 396         response = cnx.getresponse()\r\n    397 \r\n    398         status = response.status\r\n\r\n~/crypto-pulse/backend/.venv/lib/python3.6/site-packages/github/Requester.py in getresponse(self)\r\n    107         verb = getattr(self.session, self.verb.lower())\r\n    108         url = \"%s://%s:%s%s\" % (self.protocol, self.host, self.port, self.url)\r\n--> 109         r = verb(url, headers=self.headers, data=self.input, timeout=self.timeout, verify=self.verify, allow_redirects=False)\r\n    110         return RequestsResponse(r)\r\n    111 \r\n\r\n~/crypto-pulse/backend/.venv/lib/python3.6/site-packages/requests/sessions.py in get(self, url, **kwargs)\r\n    519 \r\n    520         kwargs.setdefault('allow_redirects', True)\r\n--> 521         return self.request('GET', url, **kwargs)\r\n    522 \r\n    523     def options(self, url, **kwargs):\r\n\r\n~/crypto-pulse/backend/.venv/lib/python3.6/site-packages/requests/sessions.py in request(self, method, url, params, data, headers, cookies, files, auth, timeout, allow_redirects, proxies, hooks, stream, verify, cert, json)\r\n    492             hooks=hooks,\r\n    493         )\r\n--> 494         prep = self.prepare_request(req)\r\n    495 \r\n    496         proxies = proxies or {}\r\n\r\n~/crypto-pulse/backend/.venv/lib/python3.6/site-packages/requests/sessions.py in prepare_request(self, request)\r\n    435             auth=merge_setting(auth, self.auth),\r\n    436             cookies=merged_cookies,\r\n--> 437             hooks=merge_hooks(request.hooks, self.hooks),\r\n    438         )\r\n    439         return p\r\n\r\n~/crypto-pulse/backend/.venv/lib/python3.6/site-packages/requests/models.py in prepare(self, method, url, headers, files, data, params, auth, cookies, hooks, json)\r\n    303 \r\n    304         self.prepare_method(method)\r\n--> 305         self.prepare_url(url, params)\r\n    306         self.prepare_headers(headers)\r\n    307         self.prepare_cookies(cookies)\r\n\r\n~/crypto-pulse/backend/.venv/lib/python3.6/site-packages/requests/models.py in prepare_url(self, url, params)\r\n    371             scheme, auth, host, port, path, query, fragment = parse_url(url)\r\n    372         except LocationParseError as e:\r\n--> 373             raise InvalidURL(*e.args)\r\n    374 \r\n    375         if not scheme:\r\n\r\nInvalidURL: Failed to parse: api.github.com:443https:\r\n```\r\n\r\n"}}, {"doc": {"_id": 905, "title": "Calling totalCount raises TypeError", "content": "## Issue\r\n\r\nWhen I call totalCount on a PaginatedList that received a `204 No Content` response, `len(data)` call\r\non https://github.com/PyGithub/PyGithub/blob/974d1ec593ac285e0b36b3246fbd4af8b86f565f/github/PaginatedList.py#L158\r\nraises a TypeError.\r\n\r\n## Log output\r\n\r\n```\r\nGET https://api.github.com/repos/decentralizedsearch/Docs/contributors?per_page=1 {'Authorization': 'Basic (login and password removed)', 'User-Agent': 'PyGithub/Python'} None ==> 204 {'server': 'GitHub.com', 'date': 'Tue, 18 Sep 2018 07:33:14 GMT', 'content-type': 'application/octet-stream', 'status': '204 No Content', 'x-ratelimit-limit': '5000', 'x-ratelimit-remaining': '4986', 'x-ratelimit-reset': '1537257889', 'x-github-media-type': 'github.v3; format=json', 'access-control-expose-headers': 'ETag, Link, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval', 'access-control-allow-origin': '*', 'strict-transport-security': 'max-age=31536000; includeSubdomains; preload', 'x-frame-options': 'deny', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'referrer-policy': 'origin-when-cross-origin, strict-origin-when-cross-origin', 'content-security-policy': \"default-src 'none'\", 'x-runtime-rack': '0.043993', 'x-github-request-id': 'C04C:6007:D7F3B:1EFB0D:5BA0AA24'} \r\nDEBUG:github.Requester:GET https://api.github.com/repos/decentralizedsearch/Docs/contributors?per_page=1 {'Authorization': 'Basic (login and password removed)', 'User-Agent': 'PyGithub/Python'} None ==> 204 {'server': 'GitHub.com', 'date': 'Tue, 18 Sep 2018 07:33:14 GMT', 'content-type': 'application/octet-stream', 'status': '204 No Content', 'x-ratelimit-limit': '5000', 'x-ratelimit-remaining': '4986', 'x-ratelimit-reset': '1537257889', 'x-github-media-type': 'github.v3; format=json', 'access-control-expose-headers': 'ETag, Link, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval', 'access-control-allow-origin': '*', 'strict-transport-security': 'max-age=31536000; includeSubdomains; preload', 'x-frame-options': 'deny', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'referrer-policy': 'origin-when-cross-origin, strict-origin-when-cross-origin', 'content-security-policy': \"default-src 'none'\", 'x-runtime-rack': '0.043993', 'x-github-request-id': 'C04C:6007:D7F3B:1EFB0D:5BA0AA24'} \r\n```\r\n\r\n## Reproduction\r\n\r\n```\r\nclient = Github(user, pass)\r\nrepo = client.get_repo('decentralizedsearch/Docs')\r\ncontributor_count = repo.get_contributors().totalCount\r\n```"}}, {"doc": {"_id": 904, "title": "Fix Repository.edit", "content": "Allows to pass falsy values to the new arguments introduced in #844.\r\n\r\nCloses #903"}}, {"doc": {"_id": 903, "title": "Repository.edit does not let you set merge commit rule booleans to false", "content": "https://github.com/PyGithub/PyGithub/blob/master/github/Repository.py#L1250-L1252 are the offending lines.\r\n\r\nThe assertions assert that the provided booleans are set to True, so you can never set them to False :)\r\n\r\nThis is a simple fix to remove that conditional in the assertion, but maybe there was a reason for this?"}}, {"doc": {"_id": 902, "title": "Expand nature of rate limit changes in 1.43", "content": "Document breaking API changes as well as new API additions"}}, {"doc": {"_id": 901, "title": "Cache fetch responses", "content": "This pull request caches fetch responses using a static cache for the Requester class (so all objects have access to the global cache). The intent is to limit the number of requests that decrease the rate_limit. There are 3 options:\r\n\r\n1. No cache (default behaviour) which is exactly the same as the current deployment\r\n2. Aggressive cache which is a dictionary using the url as the key\r\n3. Clock Cache which is a static sized cache that picks a replacement using the 'clock' method\r\n\r\nThe responses are cached below the object level so objects have to be reconstructed from the cache"}}, {"doc": {"_id": 900, "title": "Is suspended_users for github enterprise implemented in NamedUser?", "content": "on github enterprise if you have a curl request as follows https://github/api/v3/users/MYUSER\r\n\r\none of the elements returned is either null or dateformat if they have been suspended:\r\n\r\n\"suspended_at\": \"2014-04-22T10:21:42-07:00\",\r\n\r\nIs this object implemented currently in the NamedUser section or any plans to?  \r\n\r\nThanks"}}, {"doc": {"_id": 899, "title": "Adding migration api wrapper", "content": "Closes #818 "}}, {"doc": {"_id": 898, "title": "Fix unable to trigger RateLimitExceededException.", "content": "I found when authorized, the ratelimit error message is different from unauthorized.\r\n\r\nso i add this.\r\n\r\nand run `python setup.py tests`  is ok!"}}, {"doc": {"_id": 897, "title": "Fix unable to trigger RateLimitExceededException.", "content": "When i coding. I found ubable to trigger RateLimitExceededException.\r\n\r\nWhen I looked at the code, I found that the keyword had changed\r\n\r\nso, i changed the keyword.\r\n\r\n"}}, {"doc": {"_id": 896, "title": "Can't retrieve total count of a file's commits", "content": "I am trying to retrieve a list of all previous commits for a file. While I am able to retrieve a PaginatedList using `.get_commits`, and retrieve individual pages from this list, I found the following problems:\r\n\r\n1. The PaginatedList object does not have the documented `.totalCount` attribute \r\n2. If I run `len()` on the list I am told that it has no `len()` property. \r\n\r\nI am following the instructions about the PaginatedList class on line 100 [here](https://github.com/PyGithub/PyGithub/blob/master/github/PaginatedList.py).\r\n\r\nMWE:\r\n\r\n```\r\nfrom github import Github\r\ng = Github( ... )           #  <- authentication removed\r\nuser = g.get_user('PyGithub')\r\nrepo = user.get_repo('PyGithub')\r\n\r\n### Working fine\r\nrepo.get_commits(path='README.md').get_page(0)\r\n\r\n### Returns NoneType\r\ntype(repo.get_commits(path='README.md').totalCount)\r\n\r\n### Returns \"TypeError: object of type 'PaginatedList' has no len()\"\r\nlen(repo.get_commits(path='README.md'))\r\n```"}}, {"doc": {"_id": 895, "title": "Can I get the limit for search now?", "content": "I get self.g.rate_limiting got `(4993, 5000)`\r\n\r\nBut the search limit is different, with only 30 requests per minute.\r\n\r\nExcuse me, I didn't find the corresponding document, or PyGithub does not have this function now.\r\n\r\nthanks"}}, {"doc": {"_id": 894, "title": "GitHub Checks", "content": "Is there a way to use the new feature Checks API? Specifically, to show a build output for my CI. I cannot find anything about the checks API in the documentation."}}, {"doc": {"_id": 893, "title": "Feature: Search By Topics", "content": "Closes #744 "}}, {"doc": {"_id": 892, "title": "Feature: Search By Topics", "content": "Solves #744 "}}, {"doc": {"_id": 891, "title": "Integration branch still used?", "content": "![image](https://user-images.githubusercontent.com/1016390/44890966-75f67180-ad0f-11e8-90f1-f3bf6c7b3bf5.png)\r\n\r\nBranch seems pretty outdated, the API may have changed too.\r\n\r\nping @jayfk "}}, {"doc": {"_id": 890, "title": "unknown keyword when editing an organization", "content": "This code\r\n```\r\no.edit(\r\n    company=\"Internet Engineering Task Force\",\r\n    description=\"The \" + WGNAME + \" working group\",\r\n    email=WGNAME + \"@ietf.org\"\r\n    )\r\n```\r\ngets\r\n```\r\nTraceback (most recent call last):\r\n  File \"./mk-ietf-wg\", line 74, in <module>\r\n    email=WGNAME + \"@ietf.org\"\r\nTypeError: edit() got an unexpected keyword argument 'description'\r\n```\r\nPython 2.7.10 on a Mac.  Removing the description keyword and it passes.  Any clues?\r\n"}}, {"doc": {"_id": 889, "title": "Add missing backticks to Branch Protection docs", "content": "The docstrings for the Branch Protection methods that take classes as\r\narguments were missing backticks for the class name, add them so the\r\ndocs contain proper links."}}, {"doc": {"_id": 888, "title": "Add support for required approving review count", "content": "The GitHub API currently has a beta extension to the Branch Protection\r\nAPI that allows inspection and setting of the number of required\r\napproving reviews required for a PR to be merged. Add support for it."}}, {"doc": {"_id": 887, "title": "Improve Branch Protection function docstrings", "content": "The docstrings for the edit methods for portions of Branch Protection\r\ndid not document their arguments and types, add them."}}, {"doc": {"_id": 886, "title": "totalCounts of github.PaginatedList.PaginatedList is always None", "content": "```\r\ngazers = g.get_repo(\"facebook/react\").get_stargazers()\r\nassert gazers.totalCount != None\r\n---------------------------------------------------------------------------\r\nAssertionError                            Traceback (most recent call last)\r\n<ipython-input-101-1d025116d93d> in <module>()\r\n      5 \r\n      6 gazers = g.get_repo(\"facebook/react\").get_stargazers()\r\n----> 7 assert gazers.totalCount != None\r\n\r\nAssertionError: \r\n```"}}, {"doc": {"_id": 885, "title": "Blocker: A personal access token is getting blocked after a few number of attempts", "content": "Hi Team,\r\n\r\nWe are using PyGithub module to interact with GitHub using personal access tokens.\r\n\r\nI have been observing authentication(404) related issues while performing GitHub API operations including getting repo names, getting branch names, adding a user to org, etc.. I have tried by creating a new Personal access token and performed the same operations. It has been working well up to 5 times or so and after a few numbers of attempts, the 404 issue is getting repeated. \r\n\r\nError: ```github.GithubException.UnknownObjectException: 404 {u'documentation_url': u'https://developer.github.com/v3/repos/#get', u'message': u'Not Found'}```\r\n\r\nWhat could be the reason? and what could be the fix for it?\r\n\r\nThank you,\r\nChiru"}}, {"doc": {"_id": 884, "title": "A token is getting blocked after a few number of attempts", "content": "Hi Team,\r\n\r\nWe are using PyGithub module to interact with GitHub using personal access tokens.\r\n\r\nI have been observing authentication(404) related issues while performing GitHub API operations including getting repo names, getting branch names, adding a user to org, etc.. I have tried by creating a new Personal access token and performed the same operations. It has been working well up to 5 times or so and after a few numbers of attempts, the 404 issue is getting repeated. \r\n\r\nError: ```github.GithubException.UnknownObjectException: 404 {u'documentation_url': u'https://developer.github.com/v3/repos/#get', u'message': u'Not Found'}```\r\n\r\nWhat could be the reason? and what could be the fix for it? This is a blocker for our automation modules.\r\n\r\nCould you please help us in resolving this As soon as possible.\r\n\r\nPlease reach out to me if you need more details.\r\n\r\nThank you,\r\nChiru"}}, {"doc": {"_id": 883, "title": "examples/Login.rst", "content": "basic login demo"}}, {"doc": {"_id": 882, "title": "Change MainClass.get_repo default laziness", "content": "MainClass.get_repo() used to default to lazy fetching, which is not what\r\nNamedUser.get_repo() does, so change the default. Fix the tess to pass\r\nlazy=True, so that we don't need to grow 8 ReplayData files with 11\r\nlines of the repository in question.\r\n\r\nFixes #353"}}, {"doc": {"_id": 881, "title": "Implement Repository.get_collaborator_permission", "content": "Add a method to Repository, collaborator_permission that allows users\r\nwith push access to repositories to query the permission level of\r\ncollaborators.\r\n\r\nFixes #722"}}, {"doc": {"_id": 880, "title": "Implement Organization.invite_user", "content": "Utilize the API preview for the organization invite system to allow\r\norganization owners to invite outside colloborators either via passing\r\nin the user directly, or their email address.\r\n    \r\nFixes #851"}}, {"doc": {"_id": 879, "title": "Switch remaining try/except tests to assertRaises", "content": "The BadAttributes and Enterprise tests made use of try/except to check\r\ndetails of raised exceptions, so switch to using assertRaises, much like\r\nthe github.GithubException tests[1].\r\n\r\n1: cf056883592b59e2aafe5dde7b94917868b6c315"}}, {"doc": {"_id": 878, "title": "Add a trailing slash to URL when updating or deleting a file.", "content": "solve #877 "}}, {"doc": {"_id": 877, "title": "Error when updating or deleting file from repo", "content": "On a public repository, I tried three things using PyGithub:\r\n\r\n1. Creating a new file on the master branch, but using the low-level API (ie, create a blob, then a tree, then commiting the new tree, then updating the branch's HEAD)\r\n2. Updating this file (with the `Repository.update_file()` method)\r\n3. Deleting this file (with the `Repository.delete_file()` method)\r\n\r\nThe first step, low level creation, works good. However, I receive a `404 Not found` response when trying to update or delete this file.\r\n\r\nMy first guess is that the bug comes from the way the URL is build in the `Repository.py` module. From [this line](https://github.com/PyGithub/PyGithub/blob/master/github/Repository.py#L1562) I would say that there is a trailing `/` missing after `/contents`. \r\n\r\nI'll investigate further.\r\n\r\n**EDIT**\r\nI must add that I tried updating and deleting without the library (eg, directly using `requests`) and everything worked as expected."}}, {"doc": {"_id": 876, "title": "Two fixes related to redirect", "content": "Issue 1) \r\n__log method is immediately called after receiving the response, and the method wipes out Authorization header for security reasons.  Since the same reqeustHeader is used for redirect, the redirect will fail due to bad credentials.  The fix is to hide the Authorization header on the log but not actually changing the requestHeader.\r\n\r\nIssue 2)\r\nresponseHeaders['location'] returns a fully qualified URL and requester is expecting a path, so users would get InvalidURL exception.\r\n\r\nEnsured both issues are fixed with the new code.\r\nEnsured that the tests were passing, with the exceptions of testDecodeJson, which is failing on master too. \r\n"}}, {"doc": {"_id": 875, "title": "Add Pull Request Examples", "content": "Per @sfdye request, here is an example to acquire Pull Requests."}}, {"doc": {"_id": 874, "title": "PyGithub example usage", "content": "Motivation:\r\n#862 #456 #321 #584 #762 \r\n\r\nPyGithub is a great library, however it may not be intuitive to use at the beginning. Not everyone is a Github API expert, so I am trying to provide some working examples (recipes) that will hopefully help you get started.\r\n\r\nThe skeleton has been setup [here](https://github.com/PyGithub/PyGithub/tree/master/doc/examples) and the example docs is already live on readthedocs as usual:\r\n\r\nhttps://pygithub.readthedocs.io/en/latest/examples.html\r\n\r\nNote that the list will expand and **any PR to add more examples is extremely welcome** \ud83d\ude04 \r\n\r\nIf you want to see any examples not covered here, just leave a comment."}}, {"doc": {"_id": 873, "title": "Remove custom swamp-thing-preview header", "content": "The Repository Invitation API graduated on July 17, 2017, so the custom\r\nAccept header is no longer required."}}, {"doc": {"_id": 872, "title": "Unable to publish new version to PyPI", "content": "https://api.travis-ci.org/v3/job/417794039/log.txt\r\n\r\n```\r\nHTTPError: 400 Client Error: User 'pygithubtravis' does not have a verified primary email address. Please add a verified primary email before attempting to upload to PyPI. See https://pypi.org/help/#verified-email for more information.for more information. for url: https://upload.pypi.org/legacy/\r\n\r\ntravis_fold:end:dpl.3\r\nPyGithub.egg-info/PKG-INFO already exists, no checkout\r\nPyGithub.egg-info/SOURCES.txt already exists, no checkout\r\nPyGithub.egg-info/dependency_links.txt already exists, no checkout\r\nPyGithub.egg-info/requires.txt already exists, no checkout\r\nPyGithub.egg-info/top_level.txt already exists, no checkout\r\nCould not restore untracked files from stash entry\r\nPyPI upload failed.\r\nfailed to deploy\r\n```\r\n\r\n"}}, {"doc": {"_id": 871, "title": "Remove Repository.get_protected_branch", "content": "With both the custom Accept header and the new code that supports the\r\nnew Branch Protection API, Repository.get_protected_branch() is no\r\nlonger required, and it also was never tested, so remove it."}}, {"doc": {"_id": 870, "title": "totalCount fail", "content": "```\r\n    self.printcl('[PR][%s][%d/%d]\\t\\t%s' % (self._state_to_utf[pr_state], i, prs.totalCount, repo.name))\r\n  File \"/usr/lib/python3.7/site-packages/github/PaginatedList.py\", line 137, in totalCount\r\n    self._grow()\r\n  File \"/usr/lib/python3.7/site-packages/github/PaginatedList.py\", line 70, in _grow\r\n    newElements = self._fetchNextPage()\r\n  File \"/usr/lib/python3.7/site-packages/github/PaginatedList.py\", line 172, in _fetchNextPage\r\n    headers=self.__headers\r\n  File \"/usr/lib/python3.7/site-packages/github/Requester.py\", line 260, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, self.__customConnection(url)))\r\n  File \"/usr/lib/python3.7/site-packages/github/Requester.py\", line 276, in __customConnection\r\n    if not url.startswith(\"/\"):\r\nAttributeError: 'NoneType' object has no attribute 'startswith'\r\n```"}}, {"doc": {"_id": 869, "title": "why", "content": "why in tf can you have better documentation\r\n"}}, {"doc": {"_id": 868, "title": "Fix unicode output printing in logging", "content": "The problem reproduces in python2 only:\r\n```python\r\nPython 2.7.12 (default, Dec  4 2017, 14:50:18) \r\n[GCC 5.4.0 20160609] on linux2\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> from github import Github\r\n>>> repo = Github().get_user(\"alesapin\").get_repo(\"ClickHouse\")\r\n>>> import logging\r\n>>> logging.basicConfig(level=logging.DEBUG)\r\n>>> commit = repo.get_commit(\"2583abfccf1d0e229da2eaa3203cdfb548001a1b\")\r\nDEBUG:urllib3.connectionpool:https://api.github.com:443 \"GET /repos/alesapin/ClickHouse/commits/2583abfccf1d0e229da2eaa3203cdfb548001a1b HTTP/1.1\" 200 None\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/usr/local/lib/python2.7/dist-packages/github/Repository.py\", line 1317, in get_commit\r\n    self.url + \"/commits/\" + sha\r\n  File \"/usr/local/lib/python2.7/dist-packages/github/Requester.py\", line 260, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, self.__customConnection(url)))\r\n  File \"/usr/local/lib/python2.7/dist-packages/github/Requester.py\", line 317, in requestJson\r\n    return self.__requestEncode(cnx, verb, url, parameters, headers, input, encode)\r\n  File \"/usr/local/lib/python2.7/dist-packages/github/Requester.py\", line 370, in __requestEncode\r\n    status, responseHeaders, output = self.__requestRaw(cnx, verb, url, requestHeaders, encoded_input)\r\n  File \"/usr/local/lib/python2.7/dist-packages/github/Requester.py\", line 405, in __requestRaw\r\n    self.__log(verb, url, requestHeaders, input, status, responseHeaders, output)\r\n  File \"/usr/local/lib/python2.7/dist-packages/github/Requester.py\", line 468, in __log\r\n    logger.debug(\"%s %s://%s%s %s %s ==> %i %s %s\", str(verb), self.__scheme, self.__hostname, str(url), str(requestHeaders), str(input), status, str(responseHeaders), str(output))\r\nUnicodeEncodeError: 'ascii' codec can't encode characters in position 225115-225120: ordinal not in range(128)\r\n```"}}, {"doc": {"_id": 867, "title": "Branch object is missing most attributes and methods", "content": "I'm playing around with this library with the hopes that I can automate things on our Github Enterprise.  One of the first things I need to do is to set branch protections for our repos.  However, when I initiate a Branch object from a test repository (that already had branch protections set, mind you), the only attribute it has assigned is \"name\", and most of the methods listed in the documentation don't exist on the object:\r\n\r\n```\r\nimport github\r\ngithub.enable_console_debug_logging()\r\nGithub = github.Github\r\n\r\nGithub(\"myuser\",\r\n'mycreds',\r\nbase_url=\"https://ghe.workworkwork.com/api/v3\")\r\n\r\nmaster = g.get_user(\"myuser\").get_repo('cookbook1').get_branch('master')\r\nprint master\r\nprint master.protection_url\r\n```\r\n\r\nThe output:\r\n```\r\n...\r\nGET https://ghe.workworkwork.com/api/v3/repos/myuser/cookbook1/branches/master {'Authorization': 'Basic (login and password removed)', 'User-Agent': 'PyGithub/Python'} None ==> 200 {'status': '200 OK', 'content-length': '2925', 'x-github-media-type': 'github.v3', 'x-content-type-options': 'nosniff', 'content-security-policy': \"default-src 'none'\", 'access-control-expose-headers': 'ETag, Link, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval', 'x-github-request-id': '0ec6f4e8-2355-41dc-859d-0e7076a294b1', 'strict-transport-security': 'max-age=31536000; includeSubdomains', 'vary': 'Accept, Authorization, Cookie, X-GitHub-OTP', 'server': 'GitHub.com', 'access-control-allow-origin': '*', 'etag': '\"965449c848ed3319d7e028c2a587f414\"', 'x-xss-protection': '1; mode=block', 'cache-control': 'private, max-age=60, s-maxage=60', 'date': 'Thu, 16 Aug 2018 23:41:19 GMT', 'x-frame-options': 'deny', 'x-oauth-scopes': 'admin:org_hook, admin:pre_receive_hook, admin:repo_hook, repo', 'content-type': 'application/json; charset=utf-8', 'x-accepted-oauth-scopes': ''} {\"name\":\"master\",\"commit\":{\"sha\":\"3548233b67c8ec4cad703ff947fa0ba022df7c66\",\"commit\":{\"author\":{\"name\":\"Garrett Anderson\",\"email\":\"Garrett.Anderson@workworkwork.com\",\"date\":\"2018-08-16T18:44:44Z\"},\"committer\":{\"name\":\"GitHub Enterprise\",\"email\":\"ghe-noreply@workworkwork.com\",\"date\":\"2018-08-16T18:44:44Z\"},\"message\":\"Merge pull request #8 from myuser/newfork\\n\\nwhat\",\"tree\":{\"sha\":\"44b3a300094b2ccbbfb79ea7df5f82e627c12b42\",\"url\":\"https://ghe.workworkwork.com/api/v3/repos/myuser/cookbook1/git/trees/44b3a300094b2ccbbfb79ea7df5f82e627c12b42\"},\"url\":\"https://ghe.workworkwork.com/api/v3/repos/myuser/cookbook1/git/commits/3548233b67c8ec4cad703ff947fa0ba022df7c66\",\"comment_count\":0},\"url\":\"https://ghe.workworkwork.com/api/v3/repos/myuser/cookbook1/commits/3548233b67c8ec4cad703ff947fa0ba022df7c66\",\"html_url\":\"https://ghe.workworkwork.com/myuser/cookbook1/commit/3548233b67c8ec4cad703ff947fa0ba022df7c66\",\"comments_url\":\"https://ghe.workworkwork.com/api/v3/repos/myuser/cookbook1/commits/3548233b67c8ec4cad703ff947fa0ba022df7c66/comments\",\"author\":{\"login\":\"myuser\",\"id\":593,\"avatar_url\":\"https://ghe.workworkwork.com/avatars/u/593?\",\"gravatar_id\":\"\",\"url\":\"https://ghe.workworkwork.com/api/v3/users/myuser\",\"html_url\":\"https://ghe.workworkwork.com/myuser\",\"followers_url\":\"https://ghe.workworkwork.com/api/v3/users/myuser/followers\",\"following_url\":\"https://ghe.workworkwork.com/api/v3/users/myuser/following{/other_user}\",\"gists_url\":\"https://ghe.workworkwork.com/api/v3/users/myuser/gists{/gist_id}\",\"starred_url\":\"https://ghe.workworkwork.com/api/v3/users/myuser/starred{/owner}{/repo}\",\"subscriptions_url\":\"https://ghe.workworkwork.com/api/v3/users/myuser/subscriptions\",\"organizations_url\":\"https://ghe.workworkwork.com/api/v3/users/myuser/orgs\",\"repos_url\":\"https://ghe.workworkwork.com/api/v3/users/myuser/repos\",\"events_url\":\"https://ghe.workworkwork.com/api/v3/users/myuser/events{/privacy}\",\"received_events_url\":\"https://ghe.workworkwork.com/api/v3/users/myuser/received_events\",\"type\":\"User\",\"site_admin\":true},\"committer\":null,\"parents\":[{\"sha\":\"067642113fe45ee77160ee28cafc4870f2c06b6a\",\"url\":\"https://ghe.workworkwork.com/api/v3/repos/myuser/cookbook1/commits/067642113fe45ee77160ee28cafc4870f2c06b6a\",\"html_url\":\"https://ghe.workworkwork.com/myuser/cookbook1/commit/067642113fe45ee77160ee28cafc4870f2c06b6a\"},{\"sha\":\"3a9479c605617a9035cd986a4bf77880ac5dde64\",\"url\":\"https://ghe.workworkwork.com/api/v3/repos/myuser/cookbook1/commits/3a9479c605617a9035cd986a4bf77880ac5dde64\",\"html_url\":\"https://ghe.workworkwork.com/myuser/cookbook1/commit/3a9479c605617a9035cd986a4bf77880ac5dde64\"}]},\"_links\":{\"self\":\"https://ghe.workworkwork.com/api/v3/repos/myuser/cookbook1/branches/master\",\"html\":\"https://ghe.workworkwork.com/myuser/cookbook1/tree/master\"}}\r\n\r\nBranch(name=\"master\")\r\n\r\nAttributeError: 'Branch' object has no attribute 'protection_url'\r\n```\r\n\r\nThere aren't any of the methods there either:\r\n```\r\nprint master.get_required_status_checks()\r\nOUTPUT:\r\nAttributeError: 'Branch' object has no attribute 'get_required_status_checks'\r\n```\r\n\r\nOr this attribute:\r\n```\r\nprint master.protection\r\nOUTPUT:\r\nreturn self._protected.value\r\nAttributeError: 'Branch' object has no attribute '_protected'\r\n```\r\n\r\nThe object looks like this:\r\n```\r\nprint dir(master)\r\nOUTPUT:\r\n['CHECK_AFTER_INIT_FLAG', '_GithubObject__makeSimpleAttribute', '_GithubObject__makeSimpleListAttribute', '_GithubObject__makeTransformedAttribute', '__class__', '__delattr__', '__dict__', '__doc__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_commit', '_completeIfNeeded', '_headers', '_initAttributes', '_makeBoolAttribute', '_makeClassAttribute', '_makeDatetimeAttribute', '_makeDictAttribute', '_makeDictOfStringsToClassesAttribute', '_makeIntAttribute', '_makeListOfClassesAttribute', '_makeListOfIntsAttribute', '_makeListOfListOfStringsAttribute', '_makeListOfStringsAttribute', '_makeStringAttribute', '_makeTimestampAttribute', '_name', '_parentUrl', '_rawData', '_requester', '_storeAndUseAttributes', '_useAttributes', 'commit', 'contexts', 'enforcement_level', 'etag', 'get__repr__', 'last_modified', 'name', 'protected', 'raw_data', 'raw_headers', 'setCheckAfterInitFlag']\r\n```\r\n\r\nIt looks like the object isn't being created properly."}}, {"doc": {"_id": 866, "title": "test issue to be created", "content": ""}}, {"doc": {"_id": 865, "title": "Revert \"Remove NamedUser.contributions (#774)\"", "content": "This reverts commit a519e4675a911a3f20f1ad197cbbbb14bdd1842d.\r\n\r\nNamedUser.contributions can be populated, so we should fill in the data.\r\n\r\nFixes #850"}}, {"doc": {"_id": 864, "title": "test issue for issue events", "content": ""}}, {"doc": {"_id": 863, "title": "Upload a zip file as content for InputGitTreeElement", "content": "This is a question:\r\n\r\nI am trying to upload zip files to my repo by creating a tree with a bunch of InputGitTreeElement elements. Some of these InputGitTreeElement are zip files. InputGitTreeElement only accepts 'str' for content. How can I do this? \r\n\r\nthanks!"}}, {"doc": {"_id": 862, "title": "More Examples", "content": "Add more examples to docs"}}, {"doc": {"_id": 861, "title": "Fix token auth recording so playback can work on Travis", "content": "For Token authentication when the Authorization header was recorded, it was changed in the recorded file to say \"token private_token_removed\".\r\n\r\nThis would work properly for a users playback testing on their own system.\r\n\r\nHowever, when the tests are run on Travis (which apparently uses a basic login method) the tests would fail due to Authorization mis-compares. \r\n\r\nSee #516 and #857\r\n\r\nSince the user recording data most likely does not care what gets recorded (except to ensure that the authentication data remains private), this simple change will resolve the mis-compare.  \r\n"}}, {"doc": {"_id": 860, "title": "Adding communications Retry functionality into requests via urllib3 retry object.", "content": "This PR is related to #757 and #378\r\n\r\nThis is an attempt to add a communications retry feature into PyGithub that can be user defined at the top level.\r\n\r\nThis works directly with requests and uses the low level urllib3 Retry object (already used by requests) to implement the functionality.  It is backwards compatible with the current codeset.\r\n\r\nThe user can set the retry parameter in the top level `github(<login>, retry = X)` call.  Where X can be a simple `int` to define the number of retrys or it can be an `urllib3.util.retry.Retry(...)` object.  This allows the user very fine grained control over the retry system as defined by urllib3.\r\n\r\nThe structure for the Retry object can be setup like this example:\r\n```\r\nnum_retries=3\r\nbackoff_factor=5\r\nstatus_forcelist=(500, 502, 504)\r\nretry_data = urllib3.util.retry.Retry(\r\n                                      total=num_retries,\r\n                                      read=num_retries,\r\n                                      connect=num_retries,\r\n                                      backoff_factor=backoff_factor,\r\n                                      status_forcelist=status_forcelist\r\n                                     )\r\ngserver = github(<login or token>, retry = retry_data)\r\n```\r\nThe urllib3 Retry object has many parameters, that allows the user much flexibility to configure retry's to their heart's content.\r\n\r\nThe only issue I have at the moment, is that I am completely baffled on how to add tests for this feature given the current testing infrastructure.  Any suggestions would be appreciated.\r\n\r\nCC: @mfonville @jrouquie @sfdye \r\n\r\nEDIT: The code for this PR is now stale, and is being moved forward via PR #1002.  However, the discussion is still relevant.  "}}, {"doc": {"_id": 859, "title": "Is there have some static api?", "content": "Hi, PyGithub is a great product, and I need to static some data of repository. But if I use PyGithub \r\nto collect data directly , I will get a error of timeout from github which ban my request for  frequency problem.\r\n\r\n**Is there some static api? Or I miss it?**"}}, {"doc": {"_id": 858, "title": "Add allow_redirects option", "content": "Fixes #830\r\n\r\nLatest release v1.40 has broken get_archive_link\r\nhttps://github.com/PyGithub/PyGithub/issues/830"}}, {"doc": {"_id": 857, "title": "Adding new attributes to IssueEvent", "content": "See Issue #855 \r\n\r\nThe class [IssueEvent](https://github.com/PyGithub/PyGithub/blob/master/github/IssueEvent.py) is missing a large number of attributes documented in the [API](https://developer.github.com/v3/issues/events/).\r\n\r\nThis is also commented about in #653 to a degree\r\n\r\n27 of the tests 27 known event types have tests.\r\n\r\n**Currently Tested using Issue #30**            \r\n- [x] subscribed\r\n- [x] assigned\r\n- [x] referenced               \r\n- [x] closed                   \r\n- [x] labeled                  \r\n\r\n**Currently Tested using Issue/PR #538**\r\n- [x] merged\r\n- [x] mentioned\r\n- [x] review_requested\r\n\r\n**Currently Tested using Issue/PR #857**\r\n- [x] reopened\r\n- [x] unassigned\r\n- [x] unlabeled\r\n- [x] renamed\r\n- [x] base_ref_changed\r\n- [x] head_ref_deleted \r\n- [x] head_ref_restored\r\n- [x] milestoned\r\n- [x] demilestoned\r\n- [x] locked\r\n- [x] unlocked\r\n- [x] review_dismissed\r\n- [x] review_request_removed\r\n- [x] marked_as_duplicate\r\n- [x] unmarked_as_duplicate\r\n- [x] added_to_project       \r\n- [x] moved_columns_in_project\r\n- [x] removed_from_project\r\n- [x] converted_note_to_issue - Note: this event is tied into Issue #866 \r\n\r\nThis PR is now ready to be merged\r\n\r\n"}}, {"doc": {"_id": 856, "title": "ImportError: No module named github", "content": "I'm trying to use PyGitHub and I'm getting \"ImportError: No module named github\".\r\n\r\nSetup specs:\r\nmacOS v10.13.6\r\nPython v3.7.0\r\nInstalled with pip v18.0\r\n"}}, {"doc": {"_id": 855, "title": "Improve IssueEvent Object to support all attributes", "content": "Hello, the class [IssueEvent](https://github.com/PyGithub/PyGithub/blob/master/github/IssueEvent.py) is missing a large number of attributes documented in the [API](https://developer.github.com/v3/issues/events/).\r\n\r\nThis is also commented about in #653 to a degree\r\n\r\nI have been working at addressing this and have all the attributes supported in my [branch](https://github.com/allevin/PyGithub/commit/d3afbfaf0793b40997e817163f0a8cd663736740)\r\n\r\nI have a number of tests for some of the event types, but need assistance from the project admins to test out many of the other events.  See PR #857 for more details.\r\n\r\n\r\n\r\n"}}, {"doc": {"_id": 854, "title": "Add support for projects", "content": "Initial solution for [PyGithub support for projects](https://github.com/PyGithub/PyGithub/issues/606) (#606). Adds comprehensive project querying API.\r\n\r\nCurrently does not support for modifying projects, columns or cards. (I only need this interface for reporting purposes. Of course once I'm done others are more than welcome to add additional features!)\r\n\r\nAPI that was integrated:\r\nhttps://developer.github.com/v3/projects\r\nhttps://developer.github.com/v3/projects/columns\r\nhttps://developer.github.com/v3/projects/cards\r\n\r\nNote that the Github project API is in preview mode - it requires a special header in order for requests to be processed, and the API is subject to change without notice.\r\n\r\n## Summary\r\n- new classes: Project, ProjectColumn, ProjectCard\r\n- add Organization.get_projects method\r\n- add Repository.get_projects method\r\n- add MainClass.get_project method\r\n- add test cases to exercise all new classes and methods and verify attributes are as expected; replay data is included, recorded (mostly) from my fork of PyGithub\r\n- updated add_attribute script to:\r\n  - use makeXXXAttribute API\r\n  - be able to add to the end of the current set of properties\r\n  - handle both Completable and NonCompletable class types correctly\r\n\r\n## Checklist\r\nNot to be merged until these are done:\r\n\r\n- [x] remaining Project properties\r\n- [x] remaining ProjectColumn properties\r\n- [x] remaining ProjectCard properties\r\n- [x] support for archived_state parameter when getting cards: all,archived, or not_archived\r\n- [x] get issue from card, not just pull request (\"get_content\" method?)\r\n- [x] centralize header management for \"preview\" access to projects API\r\n- [x] add test for retrieving organization projects\r\n- [x] add test for getting issue / pull request content from card\r\n"}}, {"doc": {"_id": 853, "title": "search user by created date", "content": "Hello,\r\nI run this lines of code to get info \r\ng = github.Github(\"USERNAME\", \"PASSWORD\")\r\nusers=g.search_users(\"created:2017-11-05+vishakraj25+in:login&type=Users\")\r\nfor user in users:\r\n    print(user.login)\r\n\r\nBut It show the error..\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/usr/local/lib/python2.7/dist-packages/github/PaginatedList.py\", line 58, in __iter__\r\n    newElements = self._grow()\r\n  File \"/usr/local/lib/python2.7/dist-packages/github/PaginatedList.py\", line 70, in _grow\r\n    newElements = self._fetchNextPage()\r\n  File \"/usr/local/lib/python2.7/dist-packages/github/PaginatedList.py\", line 172, in _fetchNextPage\r\n    headers=self.__headers\r\n  File \"/usr/local/lib/python2.7/dist-packages/github/Requester.py\", line 260, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, self.__customConnection(url)))\r\n  File \"/usr/local/lib/python2.7/dist-packages/github/Requester.py\", line 271, in __check\r\n    raise self.__createException(status, responseHeaders, output)\r\ngithub.GithubException.GithubException: 422 {u'documentation_url': u'https://developer.github.com/v3/search/', u'message': u'Validation Failed', u'errors': [{u'field': u'q', u'message': u'\"2017-11-05+vishakraj25+in:login&type=Users\" is not a recognized date/time format. Please provide an ISO 8601 date/time value, such as YYYY-MM-DD.', u'code': u'invalid', u'resource': u'Search'}]}\r\nHow to solve this.. Thank you"}}, {"doc": {"_id": 852, "title": "usage of suspend a github enterprise user", "content": "For Github Enterprise usage, if we need to suspend an inactive user, can we have a suspend_user function call implemented?\r\nThe only solution currently is directly making a API call? https://developer.github.com/v3/users/administration/"}}, {"doc": {"_id": 851, "title": "Inviting a user via email address using pygithub.", "content": "Hi Team,\r\nHave gone through the documentation and found solutions to invite a nameduser. I have use case where i wanted to invite an external user using his E-mail address. But could not see an option to do the same using pygithub where only nameduser is supported.\r\n\r\nKindly help. "}}, {"doc": {"_id": 850, "title": "Attributes are lost by PaginatedList", "content": "A snippet first:\r\n\r\n```\r\ng = Github()\r\nr = g.get_repo('sourcerer-io/sourcerer-app')\r\ncc = r.get_contributors()\r\nprint(cc[0].raw_data['contributions'])\r\n```\r\nThis results in an error: KeyError: 'contributions'. The API call `GET repos/sourcerer-io/sourcerer-app/contributors` returns contributions just fine. \r\n\r\nThis happens because of this line in github/PaginatedList.py:191:\r\n\r\n`self.__contentClass(self.__requester, headers, element, completed=False)`\r\n\r\nThat is, each NamedUser is created as incomplete. Whet its attributes are accessed, a new API call is made that overwrites the object, a thus loses 'contributions' attribute.\r\n\r\nI would be happy to make a pull request to set completed to True, but I am not sure what this will break since this seems to be used by pretty much everyone. It still needs to be addressed somehow because attributes are lost, and because it inflates the number of calls to the backend.\r\n"}}, {"doc": {"_id": 849, "title": "Remove bulky test data from distribution", "content": "Resolves #672"}}, {"doc": {"_id": 848, "title": "how to sort stargazers by date", "content": "get stargazers of a repo: http://developer.github.com/v3/activity/starring/#list-stargazers \r\nit seems doesn't list any sort or direction parameter.so how to sort stargazers by date or some else parameters\r\nI couldn't find it in the reference, maybe I missed it?Thanks :)"}}, {"doc": {"_id": 847, "title": "Issues in enterprise github reference while updating a new sha", "content": ">>> print(gea_qa_br.object.sha)\r\ndb9e6a0fb74d89619478a2569cc9df85b756a292\r\n>>> print(gea_qa_br.object.url)\r\nhttps://somehost:someport/api/v3/repos/Corp-GSC-GEA/GSC-GEA-SOA-test-repo/git/commits/db9e6a0fb74d89619478a2569cc9df85b756a292\r\n>>> print(gea_qa_br.object.type)\r\ncommit\r\n>>> gea_qa_br.edit(sha=hex_dig,force=True)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/sw/pkg/user_projects/python-3.7.0/lib/python3.7/site-packages/github/GitRef.py\", line 97, in edit\r\n    input=post_parameters\r\n  File \"/sw/pkg/user_projects/python-3.7.0/lib/python3.7/site-packages/github/Requester.py\", line 260, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, self.__customConnection(url)))\r\n  File \"/sw/pkg/user_projects/python-3.7.0/lib/python3.7/site-packages/github/Requester.py\", line 271, in __check\r\n    raise self.__createException(status, responseHeaders, output)\r\ngithub.GithubException.GithubException: 422 {'message': 'Object does not exist', 'documentation_url': 'https://developer.github.com/enterprise/2.13/v3/git/refs/#update-a-reference'}\r\n>>> \r\n"}}, {"doc": {"_id": 846, "title": "Creating new file in repo requires a leading /", "content": "If user calls the `create_file()` method of the `Repository` object and specifies a path to the file, and the path to the file does _not_ include a leading `/` character, the user gets an unhelpful \"404 object not found\" error, with no indication of which object can't be found (the file? the repo? the user?...)\r\n\r\n[This Stack Overflow answer](https://stackoverflow.com/a/40614406/463213) mentions that you need a preceding `/` in the file path.\r\n\r\nThis is not mentioned anywhere in the documentation ([link to `create_file()` documentation](https://pygithub.readthedocs.io/en/latest/github_objects/Repository.html#github.Repository.Repository.create_file)). I tried to update the documentation but documentation is missing? See #845.\r\n\r\nThis issue didn't take me long to track down, but this has high, high potential to drive someone nuts if they don't have black belt google-fu skills. _Please_ include this crucial piece of information in the documentation (wherever it lives)!"}}, {"doc": {"_id": 845, "title": "\"Edit on Github\" links in documentation are broken", "content": "Was looking at the Repository page: https://pygithub.readthedocs.io/en/latest/github_objects/Repository.html\r\n\r\nSaw that it was missing some information, so I clicked on the \"Edit on Github\" link: https://github.com/PyGithub/PyGithub/blob/master/doc/github_objects/Repository.rst\r\n\r\nGot Github's \"Page not found\".\r\n\r\nThis issue affects all pages in the \"Github objects\" section of the documentation."}}, {"doc": {"_id": 844, "title": "Add missing arguments to Repository.edit", "content": "As promised in https://github.com/PyGithub/PyGithub/pull/842, here's a PR to update the `edit` method so that it allows editing the newly added properties."}}, {"doc": {"_id": 843, "title": "Adding archival support for Repository.edit", "content": "Fixes #840 \r\n\r\nAdding archival support to Repository.edit\r\n\r\nNo unit tests are included for this change because while you can archive a repository via the edit API, there is no way to un-archive a repository via the edit API.  (See: https://developer.github.com/v3/repos/#edit )"}}, {"doc": {"_id": 842, "title": "Add missing properties to Repository", "content": "Closes #784\r\nCloses #785\r\n\r\nFirst commit fixes a small bug that I observed while trying to record some new test fixtures: the stringification of the headers is not correctly printed as a list of tuples, but as an `iteritems` object, so I forced the list evaluation.\r\n\r\nSecond commit adds the missing properties `allow_merge_commit`, `allow_rebase_merge`, `allow_squash_merge`, and `has_projects` to the `Repository` class.\r\n\r\nNote however that I ran into some trouble while modifying the `edit` method of the `Repository` class to make use of the new properties, specifically while writing tests, so I will fix the `edit` method in a future PR."}}, {"doc": {"_id": 841, "title": "Get the authenticated user", "content": "hi\r\nIn the file \"Github/AuthenticatedUser.py\", an AuthenticatedUser object can be created by calling ``get_user()`` on a Github object. But when calling get_user(), the function return an 'NamedUser' object, so i can not use the ``get_user_issues()``,i want to know how to get the authenticated user object?\r\n"}}, {"doc": {"_id": 840, "title": "Add archival support for Repository.edit", "content": "In November 2017, github added the ability to archive a repository via the edit REST API\r\n\r\nhttps://developer.github.com/changes/2017-11-08-archiving-repositories/\r\n\r\nThe change looks to be relatively simple - I'm just a little hung up on generating the replay file"}}, {"doc": {"_id": 839, "title": "Allow editing of Team descriptions", "content": "PR https://github.com/PyGithub/PyGithub/pull/753 added this property but forgot to make it editable. The current PR fixes this omission."}}, {"doc": {"_id": 838, "title": "Add description to Organizations", "content": "As mentioned in https://developer.github.com/v3/orgs/, an organization also has a description. This PR adds this attribute to the `Organization` class, as well as modifies its `edit` method so that it's possible to update it.\r\n\r\nI noticed too late the [`add_attribute.py` script](https://github.com/PyGithub/PyGithub/blob/8ae2bcb1e6f96beeec99fbbcf00f4af46bb38cde/scripts/add_attribute.py), so I did my modifications by hand, but I noticed that the output of the script and the style used for all the other attributes are different. I preferred the style that is prevalent in the file, rather than the output of the script."}}, {"doc": {"_id": 837, "title": "github/stale: use a stale label", "content": "Previously it was defaulting to `wontfix` which may not be the case if an issue just goes idle."}}, {"doc": {"_id": 836, "title": "repository.get_issues() since parameter doesn't seem to work.", "content": "Using this code in python below:\r\n\r\n```\r\ng = Github(\"key\")\r\nsince = datetime(2018,1,1)\r\nrepo = g.get_repo(\"facebook/react\")\r\nissues = repo.get_issues(since=since)\r\n```\r\n\r\nI should in my mind get all issues created since 1/1/2018. But instead, I get issues way past 1/1/2018. I think the since parameter is not working or I don't understand the reason for the since parameter.\r\n"}}, {"doc": {"_id": 835, "title": "Repository.get_issues() only loads state = open issues", "content": "Hi,\r\nI am loading repositories with `github.get_repo(repo_name, lazy=False)`. Then I load the issues of that repository with `get_issues()`. I did that many times and only get issues with the state of \"open\".\r\n\r\nWhen I use `get_issues(state=\"closed\")` I only get closed issues.\r\n\r\nFrom my point of view this is a bug because `get_issues()` without parameter should also get closed issues, not just open. Maybe this is the default of the Github API but then you should not default init the parameter to `NotSet` but to 'open' or at least give a hint in the API doc.\r\n\r\nCan you guys check this please? Many thanks. :-)\r\n\r\nAnd by the way: Thank you for this wonderful python lib."}}, {"doc": {"_id": 834, "title": "Add tag_name and target_commitish arguments to GitRelease.update_release", "content": "Fixes #833"}}, {"doc": {"_id": 833, "title": "Allow updating tag_name and target_commitish of GitRelease", "content": "GitHub API [allows updating](https://developer.github.com/v3/repos/releases/#edit-a-release) `tag_name` and `target_commitish` of a release, among `name`, `body`, `draft` and `prerelease`, but PyGithub API wrapper allows updating all of them but  `tag_name` and `target_commitish`:\r\n\r\nhttps://github.com/PyGithub/PyGithub/blob/e389396405146bb1b0c4587de1f6f757a9514a43/github/GitRelease.py#L178-L199\r\n\r\nCould we add `tag_name` and `target_commitish` parameters to that function?"}}, {"doc": {"_id": 832, "title": "Add support for getting / replacing topics (#634)", "content": "This is mostly @peterkline's work, just trying to replace #635 (which hasn't been updated) and adjust for some of the changes requested / discussed there.\r\n\r\nThis seems to resolves the existing test failure, and I think resolves most of the other feedback in the other PR. It also switches the input to `replace_topics()` to the expected array as discussed. Would appreciate feedback, esp. on the test case I added. Because there's no expected return from the method, I think that test is acceptable as-is? I'm not that familiar with this module's test setup, though, so let me know if I should update anything.\r\n\r\nI didn't have much luck rebasing, so I just patched, but I did retain original author on the first commit.\r\ncc @sfdye "}}, {"doc": {"_id": 831, "title": "create_issue triger github to send notification twice", "content": "Dear All.\r\n\r\nI have a hipchat room that monitor a github repo issue.\r\n\r\nwhen I create an issue via github webUI, the room will receive 'opened issue' nottificatio.\r\n\r\nBut when I try to create issue using pygithub.create_issue  , the room will receive 2 notification in sequence:\r\n1. 'edited issue', followed with\r\n2. 'opened issue'\r\n\r\nIs it standard?\r\n\r\nnote : Sorry I can't give any proof since github issue tracker do not allow attaching any screnshoot. I'll try to write simple python github webhook to get the proof.\r\n\r\n----------EDIT-------------\r\nI build simple flask script as github webhook, and here is from debug\r\n\r\n> action = opened, issue number = 26\r\n> \r\n> 127.0.0.1 - - [30/Jun/2018 09:24:39] \"POST /payload HTTP/1.1\" 200 -\r\n> action = opened, issue number = 27\r\n> \r\n> 127.0.0.1 - - [30/Jun/2018 09:31:02] \"POST /payload HTTP/1.1\" 200 -\r\n> action = labeled, issue number = 27\r\n> \r\n> 127.0.0.1 - - [30/Jun/2018 09:31:02] \"POST /payload HTTP/1.1\" 200 -\r\n> action = labeled, issue number = 27\r\n> \r\n> 127.0.0.1 - - [30/Jun/2018 09:31:02] \"POST /payload HTTP/1.1\" 200 -\r\n> action = labeled, issue number = 27\r\n> \r\n> 127.0.0.1 - - [30/Jun/2018 09:31:02] \"POST /payload HTTP/1.1\" 200 -\r\n> action = labeled, issue number = 27\r\n> \r\n> 127.0.0.1 - - [30/Jun/2018 09:31:02] \"POST /payload HTTP/1.1\" 200 -\r\n> action = labeled, issue number = 27\r\n> \r\n> 127.0.0.1 - - [30/Jun/2018 09:31:02] \"POST /payload HTTP/1.1\" 200 -\r\n> action = labeled, issue number = 27\r\n> \r\n> 127.0.0.1 - - [30/Jun/2018 09:31:02] \"POST /payload HTTP/1.1\" 200 -\r\n> action = labeled, issue number = 27\r\n> \r\n> 127.0.0.1 - - [30/Jun/2018 09:31:02] \"POST /payload HTTP/1.1\" 200 -\r\n> action = labeled, issue number = 27\r\n> \r\n> 127.0.0.1 - - [30/Jun/2018 09:31:02] \"POST /payload HTTP/1.1\" 200 -\r\n> action = edited, issue number = 27\r\n> \r\n> 127.0.0.1 - - [30/Jun/2018 09:31:02] \"POST /payload HTTP/1.1\" 200 -\r\n> \r\n\r\nhere is my flask code \r\n\r\n```\r\nfrom __future__ import print_function\r\nfrom flask import Flask, request\r\n\r\napp = Flask(__name__)\r\n\r\n\r\n@app.route(\"/payload\", methods=['POST'])\r\ndef payload():\r\n    #print('I got some JSON: {}'.format(request.json))\r\n    rdict=request.json\r\n    print(f'action = {rdict[\"action\"]}, issue number = {rdict[\"issue\"][\"number\"]}\\n')\r\n    return 'ok'\r\n\r\nif __name__ == \"__main__\":\r\n\tapp.run()\r\n\r\n```\r\n\r\nfirst issue (number 26) is created via github issue webUI.\r\nand the other one (number 27) is single request by pygithub via python shell\r\n\r\nhere from my python shell\r\n\r\n> >>> import os\r\n> >>> from github import Github\r\n> >>> \r\n> >>> g=Github(os.environ['GITTOKEN'])\r\n> >>> GITOBJ=g.get_repo(\"%s/%s\" %(os.environ['REPO_OWNER'],os.environ['REPO_NAME']))\r\n> >>> newissue=GITOBJ.create_issue('by pygithub','Created using pygithub',labels='pygithub')\r\n> \r\n\r\nSincerely\r\n-bino-"}}, {"doc": {"_id": 830, "title": "Latest release v1.40 has broken get_archive_link", "content": "Since the push of v1.40 and change to requests for HTTP instead of httplib, it has broken the get_archive_link method.\r\n\r\nSimple Test:\r\n```python\r\nimport github\r\ngit = github.Github()\r\nrepo = git.get_repo('PyGithub/PyGithub')\r\nprint(repo.get_archive_link('zipball', 'master'))\r\n``` \r\n\r\nReturns the error:\r\n```\r\n  File \"/usr/local/lib/python3.5/site-packages/github/Repository.py\", line 1219, in get_archive_link\r\n    return headers[\"location\"]\r\nKeyError: 'location'\r\n```\r\n\r\nA quick debug reveals that the requests library is following the request from `GET /repos/:owner/:repo/:archive_format/:ref`, so instead of returning the header info with an expected location, it returns the actual archive zip file:\r\n\r\n```json\r\n{'content-disposition': 'attachment; filename=PyGithub-PyGithub-v1.40-0-gd897e86.zip', 'x-content-type-options': 'nosniff', 'access-control-allow-origin': 'https://render.githubusercontent.com', 'x-geo-block-list': '', 'date': 'Thu, 28 Jun 2018 20:49:34 GMT', 'vary': 'Authorization,Accept-Encoding', 'content-length': '3232597', 'strict-transport-security': 'max-age=31536000', 'etag': '\"d897e86aa9aa6469971b3e2201ead39cf1aebb62\"', 'content-security-policy': \"default-src 'none'; style-src 'unsafe-inline'; sandbox\", 'content-type': 'application/zip', 'x-github-request-id': 'F53F:2415:309135:4E96ED:5B3549DE', 'x-frame-options': 'deny', 'x-xss-protection': '1; mode=block'}\r\n``` "}}, {"doc": {"_id": 829, "title": "NamedUser.get_repos() returning 403", "content": "I'm using the [Github-Flask](http://github-flask.readthedocs.io/en/latest/) and [PyGithub](https://pygithub.readthedocs.io/en/latest/index.html) libraries to write a GitHub app in Python. The issue that I am facing is I cannot get [PyGitHub's simple tutorial code](https://pygithub.readthedocs.io/en/latest/introduction.html) to run correctly. I will paste my code below.\r\n\r\n```python\r\n@app.route('/pygit')\r\ndef test():\r\n    pygit = Github(login_or_token=\"USER_ACCESS_TOKEN\")\r\n    user = pygit.get_user()\r\n    repos = user.get_repos()\r\n    for repo in repos:\r\n        print(repo.name)\r\n```\r\n\r\nI have replaced `USER_ACCESS_TOKEN` with a user access token, which I retrieve through the use of [Github-Flask's example code](https://github.com/cenkalti/github-flask/blob/master/example.py). When I run the above code, I am faced with the following error on the `for repo in repos` line.\r\n\r\n```shell\r\ngithub.GithubException.GithubException: 403 {'message': 'Resource not accessible by integration', 'documentation_url': 'https://developer.github.com/v3/repos/#list-all-public-repositories'}\r\n```\r\n\r\nI should note that my GitHub app is installed and authorized on the account from which I am retrieving the user access token. This error led me to believe that my app did not have the correct permissions. However, I tried giving it read & write permissions (when possible) to every element, and still I am faced with this error. **Am I perhaps passing the wrong type of token when I instantiate `pygit` or is this an issue with PyGithub?**\r\n\r\nOther methods, such as [`get_repo(\"REPO_NAME\")`](https://pygithub.readthedocs.io/en/latest/github_objects/NamedUser.html#github.NamedUser.NamedUser.get_repo), work as intended and without error. Furthermore, when I run:\r\n\r\n```python\r\nfor method in dir(user):\r\n    print(method)\r\n```\r\n\r\nI can see the `get_repos` method, so I am certain that it should be callable from this object.\r\n\r\nLet me know if I can provide any further information, and thanks in advance for any help."}}, {"doc": {"_id": 828, "title": "Support for github apps", "content": "I am trying to perform oauth using my github app and then read authenticated users repository and organization. However for queries related to \"list installations for user\", \"list repositories accessible to the user for installation\" and many other endpoints, I am not able to get the pygithub apis for the same.\r\n\r\nref link : http://pygithub.readthedocs.io/en/latest/apis.html\r\n\r\nPS. Previously I was using oauth app and was able to perform the flow, now since I also require to listen to events for which I needed to subscribe to webhooks, so I switched to github app."}}, {"doc": {"_id": 827, "title": "Unit test 809", "content": "Add testcase for PR #809"}}, {"doc": {"_id": 826, "title": "Error 404 for File.srt and ContentFile.srt", "content": "I was trying to edit the http://pygithub.readthedocs.io/en/latest/github_objects/File.html and http://pygithub.readthedocs.io/en/latest/github_objects/ContentFile.html but it says there isn't these files in this repository."}}, {"doc": {"_id": 825, "title": "How to get both closed and opened issues at a time", "content": "i am working on an project which requires all the opened and closed issues, but the current version works for only opened issues."}}, {"doc": {"_id": 824, "title": "There is a limit of 1000 results per search.", "content": "The GitHub API [limits searches to 1000 results](https://developer.github.com/v3/search/#about-the-search-api). This limit affects searches performed via PyGitHub, such as [GitHub.search_issues](https://pygithub.readthedocs.io/en/latest/github.html?highlight=search_issues).\r\n\r\nIt seems there is no indication that your search has hit this limit - there is no exception or error that I am aware of. Perhaps there should be an exception raised when this happens (if it can be detected).\r\n\r\nIt is possible to work around this limit by issuing multiple search queries, but such queries must be tailored to suit the particular goals of the query - for example iterating over search_issues by progressive date ranges - and I cannot think of a way to generalise this.\r\n\r\nAny thoughts on how to address this? Is there a general solution?\r\n\r\nNote that this issue has nothing to do with rate limiting or pagination of results."}}, {"doc": {"_id": 823, "title": "Add support for pending team invitations", "content": "Per the [docs](https://developer.github.com/v3/teams/members/#list-pending-team-invitations), it's just the following call:\r\n\r\n```\r\nGET /teams/:team_id/invitations\r\n```\r\n\r\nAs mentioned in a blog [post](https://developer.github.com/changes/2018-01-25-organization-invitation-api-preview/) earlier this year, there are two new fields added to the response:\r\n\r\n- team_count\r\n- invitation_teams_url\r\n\r\nThese new fields only appear in the response if the following header is added to the request:\r\n\r\n```\r\nAccept: application/vnd.github.dazzler-preview+json\r\n```\r\n\r\nSo I guess the only question would be whether or not to add the header? Given this is an existing endpoint, probably better to NOT include the header; then when Github moves the new \"feature\" (which includes the new fields) out of preview, it shows up in the response and PyGithub doesn't have to be changed to remove the above header."}}, {"doc": {"_id": 822, "title": "Requires authentication problem on Test", "content": "Hello everybody, \r\n\r\nI am creating a test case for the PR #809 \r\nTo do this, I created the GithubCredential.py the login and password variables with my user and password data. \r\n\r\nThen I run:\r\n_python -m github.tests PullRequest.testReviewDismiss --record_\r\n\r\nBut I have this error:\r\n```\r\n======================================================================\r\nERROR: testReviewDismiss (github.tests.PullRequest.PullRequest)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"github/tests/PullRequest.py\", line 41, in setUp\r\n    self.repo = self.g.get_user().get_repo(\"PyGithub\")\r\n  File \"github/AuthenticatedUser.py\", line 890, in get_repo\r\n    \"/repos/\" + self.login + \"/\" + name\r\n  File \"github/AuthenticatedUser.py\", line 226, in login\r\n    self._completeIfNotSet(self._login)\r\n  File \"github/GithubObject.py\", line 259, in _completeIfNotSet\r\n    self._completeIfNeeded()\r\n  File \"github/GithubObject.py\", line 263, in _completeIfNeeded\r\n    self.__complete()\r\n  File \"github/GithubObject.py\", line 268, in __complete\r\n    self._url.value\r\n  File \"github/Requester.py\", line 258, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, cnx))\r\n  File \"github/Requester.py\", line 271, in __check\r\n    raise self.__createException(status, responseHeaders, output)\r\nGithubException: 401 {u'documentation_url': u'https://developer.github.com/v3/users/#get-the-authenticated-user', u'message': u'Requires authentication'}\r\n```\r\n\r\nWhat I am doing wrong?\r\nThanks!\r\nRegards"}}, {"doc": {"_id": 821, "title": "GitRelease methods documentation", "content": "Hi, here's my small contribution to the documentation in relation to #819 \r\n\r\nFew things:\r\n* the `delete_release` method always returns `True` so not sure if the return type is truly valid - potentially a bug\r\n* I've tried generating the documentation locally to check if formatting is ok but failed - is there a guide to it?   I followed the read the docs starter guide but that didn't seem to reflect the way it's done here\r\n"}}, {"doc": {"_id": 820, "title": "Calcuate totalCount without iterating PaginatedList", "content": "This PR #596 seems stale, so I have opened up this one with the requested changes from @sfdye.\r\n\r\nThis is the code from @Tommos0's [comment][1] with some modification.\r\n\r\nThere are 2 tests failing. I think this is due to the change in the query string and the cached test data just needs to be refreshed for those tests.\r\n\r\n[1]: https://github.com/PyGithub/PyGithub/pull/596#issuecomment-315013949"}}, {"doc": {"_id": 819, "title": "Delete release operation missing", "content": "Could this be added?\r\n\r\nSide note:\r\nIt might seem odd to remove a release but I'm backfiling releases in an old project and realized that I did it incorrectly and now have to cleanup."}}, {"doc": {"_id": 818, "title": "[FR] Migration API integration", "content": "The lib is missing Migration API. It also requires custom `Accept: ` header.\r\n* https://developer.github.com/changes/2018-05-24-user-migration-api/\r\n* https://developer.github.com/v3/migrations/users/\r\n* https://developer.github.com/v3/migrations/orgs/"}}, {"doc": {"_id": 817, "title": "Unable to list issues passing milestone as parameter", "content": "Trying to get issues assigned to a milestone but says \r\n\r\n```\r\nFile \"/usr/local/lib/python3.5/dist-packages/github/Repository.py\", line 1692, in get_issues\r\n    assert milestone is github.GithubObject.NotSet or milestone == \"*\" or milestone == \"none\" or isinstance(milestone, github.Milestone.Milestone), milestone\r\n```\r\n\r\n\r\nHere's what I have now\r\n```\r\nmiles = {}\r\nfor mile_ver in repo1.get_milestones(state=\"open\"):\r\n  miles.update({mile_ver.title:mile_ver})\r\n\r\ndef issues(param1):\r\n   for issue in repo1.get_issues(milestone=param1, sort='created', direction='asc', state=\"closed\"):\r\n     <do stuff here>\r\nreturn \r\n```\r\n\r\nI am passing the milestone name into param1. If i `print(param1)` after def it shows the milestone name but doesn't pass it to get_issues()\r\n\r\nTried whats mentioned in #683 but didn't work. Any suggestions?"}}, {"doc": {"_id": 816, "title": "Fix incorrect formatting in docstrings", "content": "These issues caused sections of the documentation to be incorrectly formatted.\r\n\r\nReferences:\r\n- https://pygithub.readthedocs.io/en/latest/github_objects/CommitComment.html#github.CommitComment.CommitComment.get_reactions\r\n- https://pygithub.readthedocs.io/en/latest/github_objects/Issue.html#github.Issue.Issue.get_reactions\r\n- https://pygithub.readthedocs.io/en/latest/github_objects/IssueComment.html#github.IssueComment.IssueComment.get_reactions\r\n- https://pygithub.readthedocs.io/en/latest/github_objects/PullRequest.html#github.PullRequest.PullRequest.create_review_request\r\n- https://pygithub.readthedocs.io/en/latest/github_objects/PullRequest.html#github.PullRequest.PullRequest.delete_review_request\r\n- https://pygithub.readthedocs.io/en/latest/github_objects/PullRequest.html#github.PullRequest.PullRequest.get_comments\r\n- https://pygithub.readthedocs.io/en/latest/github_objects/PullRequestComment.html#github.PullRequestComment.PullRequestComment.get_reactions\r\n- https://pygithub.readthedocs.io/en/latest/github_objects/Repository.html#github.Repository.Repository.create_source_importcreate_source_import\r\n- https://pygithub.readthedocs.io/en/latest/github_objects/Repository.html#github.Repository.Repository.create_file\r\n- https://pygithub.readthedocs.io/en/latest/github_objects/Repository.html#github.Repository.Repository.update_file\r\n- https://pygithub.readthedocs.io/en/latest/github_objects/Repository.html#github.Repository.Repository.delete_file\r\n- https://pygithub.readthedocs.io/en/latest/github_objects/Repository.html#github.Repository.Repository.get_release"}}, {"doc": {"_id": 815, "title": "Adding project name into \"Projects using PyGithub\"", "content": ""}}, {"doc": {"_id": 814, "title": "Add check-in to projects using PyGithub", "content": ""}}, {"doc": {"_id": 813, "title": "[FR] Checks API integration", "content": "The lib is missing Checks API. If someone is up to implementing wrappers for it, I've got some example code.\r\n\r\nI wrote a CLI for this API https://pypi.org/p/check-in and here's how I hack around missing methods (+custom Accept header):\r\nhttps://github.com/webknjaz/check-in/blob/4d11a0a/check_in/github_api.py#L35-L65"}}, {"doc": {"_id": 812, "title": "Get topics of a repo?", "content": "Is there a way to get a list of topics associated with a given github repo? From here - https://pygithub.readthedocs.io/en/latest/apis.html - it doesn't seem like there's an API for that. For example, in one of my own repos - https://github.com/silburt/DeepMoon - how would I obtain: \r\n\"convnet\r\ntensorflow\r\nmoon\r\ndeep\r\nlearning\r\nastrophysics\r\nkeras\" \r\n\r\nThanks very much,\r\n\r\nAri"}}, {"doc": {"_id": 811, "title": "Project using pygithub - Cardinals", "content": "https://github.com/fga-gpp-mds/2018.1-Cardinals - a website that shows metrics for any public repository (issues, commits, pull requests etc)"}}, {"doc": {"_id": 810, "title": "Recieving False ErrCode 403 \"Rate Limit Exceeded\"", "content": "When attempting to use the api to upload a number of comments to GitHub issues, I received the following Exception \r\n`github.GithubException.GithubException: 403 {u'documentation_url': u'https://developer.github.com/v3/#abuse-rate-limits', u'message': u'You have triggered an abuse detection mechanism and have been temporarily blocked from content creation. Please retry your request again later.'}`\r\nHowever, I know I haven't actually hit my rate limit because right before the crashing line was called, I could see my Req Limit/Remaining values:\r\n`Req Limit: 5000, Req Remaining: 4868`\r\nThe ReqRemaining value was steadily decreasing, as I was only making one API call per second. Obviously something is not being outputted properly, even if I am receiving a legitimate 403 HTTP code, it is not associated with my rate limit."}}, {"doc": {"_id": 809, "title": "add Dismiss PR Reviews functionality", "content": "This PR will allow end users to dismiss pull request reviews. This is helpful in conjunction with Github webhooks to dismiss stale reviews when new commits are pushed.\r\n\r\nThis was accomplished by a 'PUT' request very similar to the functionality of the `pull_request.get_review(<id>)` that contains a body in the form of `{\"message\": \"<your message>}` and returns the dismissed review.\r\n"}}, {"doc": {"_id": 808, "title": "Timeout exception in request for Issues (created and closed) from a Repository ", "content": "Trying to receive the number of issues from a repository but the operation fails because the timeout limit was exceeded. No problems with my internet connection, the repository has 50+ issues. Any ideas?"}}, {"doc": {"_id": 807, "title": "Add remove_membership() method to Teams class", "content": "Per the Github v3 API [docs](https://developer.github.com/v3/teams/members/#deprecation-notice-2), the \"remove team member\" api is deprecated. This PR implements the new API call.\r\n\r\nDeprecated API:\r\n```\r\nDELETE /teams/:team_id/members/:username\r\n```\r\n\r\nNew API:\r\n```\r\nDELETE /teams/:team_id/memberships/:username\r\n```\r\n\r\nThis PR also adds a `deprecation` notice to the docstring of the deprecated methods."}}, {"doc": {"_id": 806, "title": "t api", "content": ""}}, {"doc": {"_id": 805, "title": "Search repository by label?", "content": "I currently have some code where a set of label strings is stored in a Python list, and a Repository object obtained through the `search_repositories` method of the `github` object; the method `repo.get_issues()` specifies that a list of `Label `objects can be passed in to limit the issues that come up.\r\n\r\nAfter some searching, I have not found a way to create a Label object from a desired string, and have resorted to creating a list comprehension:\r\n\r\n `labels = [label for label in repo.get_labels() if label.name in json_repo[\"code_labels\"]]`.\r\n\r\nIs there a better or official way to create the label objects for the search? Thank you."}}, {"doc": {"_id": 804, "title": "any plans for version 4?", "content": "Hello Guys, \r\n    Are you planning to support version 4 of GitHub APIs? I would like to contribute in the development if so.\r\n\r\nThanks,\r\n"}}, {"doc": {"_id": 803, "title": "Retry50x", "content": "The Github API (without any proxy or such) returns in some occasions a `502` error, even on a trivial operations. But it would be ridiculous to try to catch those for literally every Github API operation in programs using PyGithub. So this feature allows to specify a number of retries.\r\n\r\nIt based on the already existing PR #771 because it touches the same code and I don't want to have any regressions."}}, {"doc": {"_id": 802, "title": "search_issues: I am having issues with query parameters", "content": "This works:\r\n`curl -G -H \"Authorization: token myToken\" https://api.github.com/search/issues?q=repo:myOrg/myPrivateRepo+is:closed`\r\n\r\nBut when I do this:\r\n```python\r\ng = Github(myToken)\r\n    for i in g.search_issues('repo:myOrg/myPrivateRepo+is:closed'):\r\n        print(i.title)\r\n```\r\n\r\nI get: `'The listed users and repositories cannot be searched either because the resources do not exist or you do not have permission to view them.'`\r\n\r\n\r\nBut when I drop the `+` from query it works:\r\n```python\r\ng = Github(myToken)\r\n    for i in g.search_issues('repo:myOrg/myPrivateRepo'):\r\n        print(i.title)\r\n```"}}, {"doc": {"_id": 801, "title": "Add tests for mergeable state", "content": "As outlined in https://developer.github.com/v3/pulls/#response-1 and https://github.com/PyGithub/PyGithub/issues/256#issuecomment-51213771 `mergeable` can be `\"null\"`. I couldn't find tests that cover that behavior, so I added them in this patch."}}, {"doc": {"_id": 800, "title": "`pip install pygithub` failing", "content": "The command runs with no warnings, but `import github` subsequently complains that there is no such module.\r\n\r\nBy contrast, cloning and installing as `python setup.py develop` works fine. But it would be nice to be able to skip the cloning step.\r\n\r\nI'm on OSX 10.13.04."}}, {"doc": {"_id": 799, "title": "Fix return value in the docs", "content": ""}}, {"doc": {"_id": 798, "title": "NEW Project using PyGithub: Satsuki", "content": "Satsuki (pronounced SAHT-ski) is a Python package that helps manage GitHub releases and release assets. Satsuki is especially useful paired with Continuous Integration/Continuous Deployment (CI/CD) tools such as Travis CI and AppVeyor.\r\n\r\n[Satsuki GitHub](https://github.com/YakDriver/satsuki)\r\n[Satsuki PyPI](https://pypi.org/project/satsuki/)"}}, {"doc": {"_id": 797, "title": "Fix Team.description", "content": "fixes #796"}}, {"doc": {"_id": 796, "title": "stack overflow for Team.description ", "content": "\r\nMissing `_` means stack overflow as property accessor calls itself indefinitely.\r\n\r\nShould be `self._description.value` I suspect. \r\n\r\nDue to client open source policy I cannot submit a PR.\r\n\r\nTeam.py\r\n```python\r\n    @property\r\n    def description(self):\r\n        \"\"\"\r\n        :type: string\r\n        \"\"\"\r\n        self._completeIfNotSet(self._description)\r\n        return self.description.value\r\n```"}}, {"doc": {"_id": 795, "title": "Test Framework improvement", "content": "Hi!\r\n\r\nAs part of my app, I use this lib, and then your test Framework to record my own upper level tests. Here's some patches I had to make that I humbly think could interest you:\r\n\r\n- As stated by @kyogi14 in [this comment](https://github.com/PyGithub/PyGithub/pull/664#issuecomment-389964369), since you use `requests` recording is broken. This fixes that.\r\n- Fix some Python 3 troubles while recording\r\n- Add a `replayDataFolder` gloval class variable, to override the default place to put the recording. Otherwise, if a third party app (like mine :)) has a dependency on PyGithub and wants to use the Framework, recordings are saved in `site-packages/github/tests/ReplayData` instead of my own place.\r\n\r\nHope this helps, please let me know if I can improve the PR.\r\n\r\nThanks!"}}, {"doc": {"_id": 794, "title": "add Github.runtime_rack attribute", "content": ""}}, {"doc": {"_id": 793, "title": "increase default timeout to be > github request timeout", "content": "Github imposes a 10s limit for completion of API calls and returns an HTTP 502\r\nif when the max time is exceeded.  However, the current default 10s request\r\ntimeout in pygithub will cause the a socket timeout before an HTTP status is\r\nreceived, probably due to network latency and/or latency within the github\r\nfront-end.\r\n\r\n#693"}}, {"doc": {"_id": 792, "title": "create PullRequest between forked repo to original", "content": "is there a method to create a pull request with the original repo as the base and a forked branch as the head? \r\n\r\nI tried this line, but it threw a 'Validation Error'\r\n`repo.create_pull(\"Title\", \"Body\", '{}:{}'.format(original_repo, master), '{}:{}'.format(forked_user, feature), True)`"}}, {"doc": {"_id": 791, "title": "Handle HTTP 202 HEAD&GET with a retry", "content": "Fixes #564\r\nAfter some testing, it seems GitHub seems to be able to process the chrunching of statistics\r\nfor every repository I tested in around 2 seconds. So a delay of around 5 seconds should be\r\nplenty to be very certain that the next try should succeed.\r\nAnother option would be to put this value lower and possibly waste an extra retry on it."}}, {"doc": {"_id": 790, "title": "Update Branch Protection to current GitHub API", "content": "The Branch protection API has been radically changed by GitHub, add new\r\nmethods to Branch reflecting it. Branch protection methods are now\r\ncalled on the Branch object itself, rather than awkwardly hanging off the\r\nRepository object and requiring branch names to be passed in.\r\n\r\nThis adds an over-arching methods to get, edit and remove protection\r\nentirely, as well as fine-grained methods for getting, setting and\r\ndropping certain aspects of branch protection, as well as three new\r\nobjects to encompass querying those aspects.\r\n\r\nThis also destroys Repository.protect_branch(), the endpoint has been\r\nremoved. The old-style protection attributes on Branch have also been\r\nremoved to force users onto the new API, since they are still sent, but\r\nno longer populated.\r\n\r\nFixes #586\r\n\r\n--\r\n\r\nI'm sorry for just how large this branch is. I tried to split it up, but everything depends on the new methods in Branch, which pretty much pulls in everything ever due to the tests."}}, {"doc": {"_id": 789, "title": "[WIP] Add all branch protection features", "content": "Signed-off-by: Jeremy Phelps <jphelps@linuxfoundation.org>"}}, {"doc": {"_id": 788, "title": "Include target_commitish in GitRelease", "content": ""}}, {"doc": {"_id": 787, "title": "Fix Content-Length invalid headers exception", "content": "With requests 2.11>= it is not allowed to pass int values for the header.\r\nSo we convert the size from int to string before passing it as value for Content-Length.\r\n\r\nSee e.g. https://github.com/requests/requests/issues/3512\r\n\r\nbelow you can see a stack trace of the current problem\r\n```\r\n  File \"/home/maarten/PyGithub/build/lib/github/Requester.py\", line 261, in requestBlobAndCheck\r\n    return self.__check(*self.requestBlob(verb, url, parameters, headers, input, self.__customConnection(url)))\r\n  File \"/home/maarten/PyGithub/build/lib/github/Requester.py\", line 342, in requestBlob\r\n    return self.__requestEncode(cnx, verb, url, parameters, headers, input, encode)\r\n  File \"/home/maarten/PyGithub/build/lib/github/Requester.py\", line 365, in __requestEncode\r\n    status, responseHeaders, output = self.__requestRaw(cnx, verb, url, requestHeaders, encoded_input)\r\n  File \"/home/maarten/PyGithub/build/lib/github/Requester.py\", line 389, in __requestRaw\r\n    response = cnx.getresponse()\r\n  File \"/home/maarten/PyGithub/build/lib/github/Requester.py\", line 104, in getresponse\r\n    r = verb(url, headers=self.headers, data=self.input, timeout=self.timeout)\r\n  File \"/home/maarten/.local/lib/python3.6/site-packages/requests/sessions.py\", line 555, in post\r\n    return self.request('POST', url, data=data, json=json, **kwargs)\r\n  File \"/home/maarten/.local/lib/python3.6/site-packages/requests/sessions.py\", line 494, in request\r\n    prep = self.prepare_request(req)\r\n  File \"/home/maarten/.local/lib/python3.6/site-packages/requests/sessions.py\", line 437, in prepare_request\r\n    hooks=merge_hooks(request.hooks, self.hooks),\r\n  File \"/home/maarten/.local/lib/python3.6/site-packages/requests/models.py\", line 306, in prepare\r\n    self.prepare_headers(headers)\r\n  File \"/home/maarten/.local/lib/python3.6/site-packages/requests/models.py\", line 440, in prepare_headers\r\n    check_header_validity(header)\r\n  File \"/home/maarten/.local/lib/python3.6/site-packages/requests/utils.py\", line 872, in check_header_validity\r\n    \"bytes, not %s\" % (name, value, type(value)))\r\nrequests.exceptions.InvalidHeader: Value for header {Content-Length: 65949023} must be of type str or bytes, not <class 'int'>\r\n```"}}, {"doc": {"_id": 786, "title": "update_file doesn't add the trailing slash after contents", "content": "The path variable should be preceded by a forward slash to create a valid url for the PUT call.\r\n\r\nSteps to Reproduce:\r\ngithub.get_repo(\"my_repo\").update_file(\"README.md\", \"Updating readme.\", base64.b64encode(content), sha)\r\n\r\nResult:\r\nhttps://github.com/api/v3/repos/my_repo/contentsREADME.md\r\n\r\nExpected Result:\r\nhttps://github.com/api/v3/repos/my_repo/contents/README.md\r\n\r\nLooks like it's happening here.\r\nhttps://github.com/PyGithub/PyGithub/blob/master/github/Repository.py#L1504\r\n\r\n"}}, {"doc": {"_id": 785, "title": "adding has_projects to repository", "content": "This PR just adds the repository attribute for has_projects."}}, {"doc": {"_id": 784, "title": "add repository merge attributes", "content": "\r\nThis PR just adds repository attributes for allow_merge_commit, allow_rebase_merge, allow_squash_merge."}}, {"doc": {"_id": 783, "title": "Repository attributes: allow_merge_commit, allow_rebase_merge, allow_squash_merge", "content": "This PR just adds repository attributes for allow_merge_commit, allow_rebase_merge, allow_squash_merge."}}, {"doc": {"_id": 782, "title": "Use TestCase.assertRaises()", "content": "Now that we no longer support Python 2.6, we can use the assertRaises()\r\nmethod of TestCase as a context manager, tiding up a large amount of\r\ntechnical debt."}}, {"doc": {"_id": 781, "title": "Two Factor: How Do I Use It?", "content": "I have MFA enabled for my account.\r\n\r\ng = Github(\"my_email\", \"my_password\")\r\norg = g.get_organization('my_org')\r\n```\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/Users/foo/.virtualenvs/skippy/lib/python3.4/site-packages/github/MainClass.py\", line 198, in get_organization\r\n    \"/orgs/\" + login\r\n  File \"/Users/foo/.virtualenvs/skippy/lib/python3.4/site-packages/github/Requester.py\", line 172, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, cnx))\r\n  File \"/Users/foo/.virtualenvs/skippy/lib/python3.4/site-packages/github/Requester.py\", line 180, in __check\r\n    raise self.__createException(status, responseHeaders, output)\r\ngithub.GithubException.TwoFactorException: 401 {'documentation_url': 'https://developer.github.com/v3/auth#working-with-two-factor-authentication', 'message': 'Must specify two-factor authentication OTP code.'}\r\n```\r\n\r\nI have my phone with my 6 digits rotating number, but where do I put it?\r\nSorry for the silly question, but I'm just getting my feet wet with Two Factor Authentication.\r\n"}}, {"doc": {"_id": 780, "title": "Wrong attribute during commits search", "content": "Hi, I'm trying to search commits by:\r\n\r\n\r\n```\r\n    g = Github(\"zzz\")\r\n    a = g.search_commits(query=\"author:gnogueira\")\r\n    for x in a:\r\n        print(x.last_modified)\r\n```\r\n\r\nThe return of this function gives me a correct last_modified but when I try to access this property, None is returned.\r\n\r\nHow can I solve it?\r\n"}}, {"doc": {"_id": 779, "title": "Uploading assets to a release breaks the Repository object", "content": "I am seeing some really strange behaviour after using the ``GitRelease`` object to upload an asset to a release.  \r\n\r\nCase in point:\r\n\r\n```python\r\nimport os\r\nfrom github import Github\r\n\r\nrepo = Github(os.environ['GITHUB_ACCESS_TOKEN']).get_repo('<my-repo>')\r\nrelease = repo.get_release(id='1.0.0')\r\n\r\nrepo.get_branch(branch='release')  # works\r\n\r\nrelease.upload_asset(path='/Users/elip/asset', content_type='application/octet-stream')\r\n\r\nrepo.get_branch(branch='release')  # throws the exception\r\n\r\n```\r\n\r\nException:\r\n\r\n```python\r\nTraceback (most recent call last):\r\n  File \"pygithub_bug.py\", line 16, in <module>\r\n    repo.get_branch(branch='release')\r\n  File \"/Users/elip/.virtualenvs/pyci/lib/python2.7/site-packages/github/Repository.py\", line 1191, in get_branch\r\n    self.url + \"/branches/\" + branch\r\n  File \"/Users/elip/.virtualenvs/pyci/lib/python2.7/site-packages/github/Requester.py\", line 185, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, cnx))\r\n  File \"/Users/elip/.virtualenvs/pyci/lib/python2.7/site-packages/github/Requester.py\", line 198, in __check\r\n    raise self.__createException(status, responseHeaders, output)\r\n  File \"/Users/elip/.virtualenvs/pyci/lib/python2.7/site-packages/github/Requester.py\", line 210, in __createException\r\n    elif status == 404 and output.get(\"message\") == \"Not Found\":\r\nAttributeError: 'NoneType' object has no attribute 'get'\r\n```\r\n\r\nWorth mentioning that its not just the ``get_branch`` that breaks, every single method that needs to fetch something from Github fails with this error.\r\n\r\nAlso worth mentioning, is that sometimes, the exception is different:\r\n\r\n```python\r\nTraceback (most recent call last):\r\n  File \"pygithub_bug.py\", line 19, in <module>\r\n    repo.get_commit(sha='release')\r\n  File \"/Users/elip/.virtualenvs/pyci/lib/python2.7/site-packages/github/Repository.py\", line 1267, in get_commit\r\n    self.url + \"/commits/\" + sha\r\n  File \"/Users/elip/.virtualenvs/pyci/lib/python2.7/site-packages/github/Requester.py\", line 185, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, cnx))\r\n  File \"/Users/elip/.virtualenvs/pyci/lib/python2.7/site-packages/github/Requester.py\", line 231, in requestJson\r\n    return self.__requestEncode(cnx, verb, url, parameters, headers, input, encode)\r\n  File \"/Users/elip/.virtualenvs/pyci/lib/python2.7/site-packages/github/Requester.py\", line 275, in __requestEncode\r\n    url = self.__makeAbsoluteUrl(url)\r\n  File \"/Users/elip/.virtualenvs/pyci/lib/python2.7/site-packages/github/Requester.py\", line 343, in __makeAbsoluteUrl\r\n    assert o.hostname in [self.__hostname, \"uploads.github.com\"], o.hostname\r\nAssertionError: api.github.com\r\n```\r\n\r\nThis exception happens, when i add ``repo.default_branch`` (or i assume any property invocation that requires a REST call) just before i upload.\r\n\r\nCan someone shed some light? am i missing something here?\r\n\r\nthanks "}}, {"doc": {"_id": 778, "title": "GitReleaseAsset.uploader AttributError", "content": "Affected version: 1.39.\r\nTested in multiple repositories, example below.\r\n\r\n```python\r\nlist(github.Github().get_organization('mesonbuild').get_repo('meson').get_release('0.46.0').get_assets())[0].uploader\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/usr/lib/python3.6/site-packages/github/GitReleaseAsset.py\", line 149, in uploader\r\n    return self._uploader.value\r\nAttributeError: 'NamedUser' object has no attribute 'value'\r\n```"}}, {"doc": {"_id": 777, "title": "Support for listing a user's repository invitations", "content": "There does not seem to currently be support for listing a users currently open invitations to join a repository as described here:\r\n\r\nhttps://developer.github.com/v3/repos/invitations/#list-invitations-for-a-repository\r\n\r\nThe invitation object exists:\r\nhttp://pygithub.readthedocs.io/en/latest/github_objects/Invitation.html#github.Invitation.Invitation\r\n\r\nand there is a method to accept an invitation:\r\n\r\nhttp://pygithub.readthedocs.io/en/latest/github_objects/AuthenticatedUser.html#github.AuthenticatedUser.AuthenticatedUser.accept_invitation\r\n\r\nbut there does not seem to be a way to list which invitations are available to be accepted."}}, {"doc": {"_id": 776, "title": "Refactor Repository.get_protected_branch", "content": "The URL mentioned in the docstring for Repository.get_protected_branch\r\nno longer seems to mention useful content, so to avoid an API break,\r\njust return Repository.get_branch."}}, {"doc": {"_id": 775, "title": "Branch protection methods no longer require loki", "content": "The Branch Protection API graduated September 1, 2017, so remove use of\r\nthe loki-preview+json header."}}, {"doc": {"_id": 774, "title": "Remove NamedUser.contributions", "content": "The contributions attribute is no longer sent by Github for NamedUsers,\r\nso remove the attribute.\r\n\r\nFixes #443"}}, {"doc": {"_id": 773, "title": "Iteration over get_commits() returns wrong object properties", "content": "Here is a snippet\r\n```\r\nfrom github import Github\r\n\r\ng = Github(token)\r\nrepo = g.get_repo('PyGithub/PyGithub')\r\ncommits = repo.get_commits()\r\ni = 20\r\nfor commit in commits:\r\n     print(commit.last_modified)\r\n     i -= 1\r\n     if i < 0:\r\n             break\r\n```\r\n\r\nIt prints out only first retrieved object's date. Shouldn't it print objects actual properties?\r\n```\r\nThu, 26 Apr 2018 06:52:47 GMT\r\nThu, 26 Apr 2018 06:52:47 GMT\r\nThu, 26 Apr 2018 06:52:47 GMT\r\nThu, 26 Apr 2018 06:52:47 GMT\r\nThu, 26 Apr 2018 06:52:47 GMT\r\nThu, 26 Apr 2018 06:52:47 GMT\r\nThu, 26 Apr 2018 06:52:47 GMT\r\nThu, 26 Apr 2018 06:52:47 GMT\r\nThu, 26 Apr 2018 06:52:47 GMT\r\nThu, 26 Apr 2018 06:52:47 GMT\r\nThu, 26 Apr 2018 06:52:47 GMT\r\nThu, 26 Apr 2018 06:52:47 GMT\r\nThu, 26 Apr 2018 06:52:47 GMT\r\nThu, 26 Apr 2018 06:52:47 GMT\r\nThu, 26 Apr 2018 06:52:47 GMT\r\nThu, 26 Apr 2018 06:52:47 GMT\r\nThu, 26 Apr 2018 06:52:47 GMT\r\nThu, 26 Apr 2018 06:52:47 GMT\r\nThu, 26 Apr 2018 06:52:47 GMT\r\nThu, 26 Apr 2018 06:52:47 GMT\r\nThu, 26 Apr 2018 06:52:47 GMT\r\n```\r\n\r\n"}}, {"doc": {"_id": 772, "title": "Documentation for using Pull Request API", "content": ""}}, {"doc": {"_id": 771, "title": "Fix github API requests after asset upload", "content": "In the old code the self.__hostname would be overwritten with uploads.github.com\r\nbut it could not be correctly re-set to api.github.com after completing the upload\r\nCreate a separate connection if hostname or port differ in requestBlobAndCheck\r\n\r\nin the end this became quite a large overhaul, to also make this change generic\r\nfor e.g. connecting to status.github.com and similar methods\r\n\r\n~~not sure if tests need (more) updating, if so I will update the PR accordingly~~"}}, {"doc": {"_id": 770, "title": "repo.stargazers_count and repo.watchers_count is the same number of stars", "content": "I get the same number which is the number of stars from repo.stargazers_count and repo.watchers_count,  i    can't get the number of watchers. In the API of Github, we can get the number from the \"subscribers_count\u2018\u2019\uff0cbut in PyGithub, i find there is not the function."}}, {"doc": {"_id": 769, "title": "Please handle unexpected response codes, particularly 302", "content": "When using github enterprise, if the base_url is specified without the /api/v3 then very strange things happen, and it is hard to debug wht is happening.\r\n\r\nWhat is happening is that a 302 page is being returned, which is full of HTML, and the library accepts this, returning various objects full of None.\r\n"}}, {"doc": {"_id": 768, "title": "Fix github API requests after asset upload", "content": "In the old code the `self.__hostname` would be overwritten with `uploads.github.com`\r\nbut it could not be correctly re-set to `api.github.com` after completing the upload\r\nBy handling the situation of connections to `https://uploads.github.com` the same way\r\nwe handle `status.github.com` we can resolve this problem.\r\n\r\nThe old code results if first an `upload_asset()` and then a regular api method in the following trace:\r\n```\r\n  File \"github/Requester.py\", line 185, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, cnx))\r\n  File \"github/Requester.py\", line 234, in requestJson\r\n    return self.__requestEncode(cnx, verb, url, parameters, headers, input, encode)\r\n  File \"github/Requester.py\", line 279, in __requestEncode\r\n    url = self.__makeAbsoluteUrl(url)\r\n  File \"github/Requester.py\", line 351, in __makeAbsoluteUrl\r\n    assert o.hostname in [self.__hostname, \"uploads.github.com\"], o.hostname\r\nAssertionError: api.github.com\r\n```"}}, {"doc": {"_id": 767, "title": "Correct Repository.get_git_tree recursive use", "content": "The API docs for Repository.get_git_tree specify that the URL parameter\r\nfor fetching a tree recursively should be ?recursive=1, not a truthy\r\nvalue. To not change the API we present, check if it is True before\r\nsetting it to 1. Change another callsite of Repository.get_git_tree to\r\nspecify recursive=False to make sure it doesn't appear in the query\r\nstring.\r\n\r\nFixes #560"}}, {"doc": {"_id": 766, "title": "Correct docstring for set_labels", "content": "Both Issue and PullRequest have a set_labels method whose docstring did\r\nnot exactly describe the parameter, correct it."}}, {"doc": {"_id": 765, "title": "Re-work PullRequest reviewer request", "content": "Add create_review_request() and delete_review_request() methods to\r\nPullRequest, as well as renaming get_reviewer_requests() to\r\nget_review_requests() and cleaning up its return value to firstly respect\r\nteams, and secondly to cut out the middleman of PullRequestReviewerRequests,\r\nwhich has been removed.\r\n\r\nFixes #597"}}, {"doc": {"_id": 764, "title": "Pull Request requested reviewers can also be teams", "content": "Since the black-cat API feature was released in May 9, the API methods also support requesting reviews from teams as well as individual users. There are two issues here:\r\n\r\nFirstly, PullRequest.get_reviewer_requests() passes a list_item of 'users' in, which means any information under teams is not returned. If we drop that, it's an API break, since we will return a dict('users': PaginatedList, 'teams': PaginatedList) rather than a PaginatedList directly. We could work around that by adding PullRequest.get_team_reviewer_requests(), but then it's two methods users have to call, which feels awkward.\r\n\r\nSecondly, and more importantly, PullRequestReviewerRequest does not support teams -- the simplest solution here is to add a slug property to the class, and if slug is set, it's a team, otherwise it's a user, but this just feels awkward. We could subclass it, along with polishing the API to return the user and team object directly rather than just the identifier, but that has issues too.\r\n\r\nI wanted to get opinions on the way forward before I got too deep into writing code."}}, {"doc": {"_id": 763, "title": "Add support for team privacy", "content": "Teams contain support for privacy, by being either closed, or secret.\r\nExport the string via a property, and allow editing it via the edit\r\nmethod."}}, {"doc": {"_id": 762, "title": "Establish basis for examples", "content": "The pyGithub documentation is excellent, but interacting with the Github api for the first time can be confusing without any examples.\r\n\r\nThere have been a number of requests for more examples of how to use PyGithub.\r\n\r\nThis pull request establishes an examples.rst file which serves as a place for the community to contribute examples.\r\n\r\nThe examples file starts off with some from @pconrad showing off the basic use of PyGithub and some from me showing how to interact with pull requests as issues.\r\n\r\nThis pull request is an attempt to begin to address issue #321 "}}, {"doc": {"_id": 761, "title": "Correct PullRequest.get_reviewer_requests() rtype", "content": "The return type of PullRequest.get_reviewer_requests() is a\r\nPaginatedList containing PullRequestReviewerRequest."}}, {"doc": {"_id": 760, "title": "PullRequest review methods no longer need black cats", "content": "The preview period of the PullRequest review API ended May 9, 2017 so\r\nremove the custom Accept headers for the relevant methods."}}, {"doc": {"_id": 759, "title": "Update multiple files at once", "content": "I tried using  update_file(path, message, content, sha, branch=github.GithubObject.NotSet, committer=github.GithubObject.NotSet, author=github.GithubObject.NotSet), to update a single file in a specific GitHub repo and it works just fine. \r\nIs there a way I could similarly update multiple files at once?"}}, {"doc": {"_id": 758, "title": "Add verify option for to requests wrapper", "content": "Closes #746 "}}, {"doc": {"_id": 757, "title": "For the new \"requests\" communications engine, implement a developer controlled retry feature.", "content": "Reference comments in #539, conversation moved to this issue for discussion.\r\n\r\nRequest a feature to the new **_requests_** implementation for low level communications to implement a developer controlled retry feature when communication POST/GET fail.\r\n\r\nThe feature should allow the developer via a high level interface to control retry operations (number of retrys, time between retrys, etc.).  \r\n\r\nOur network is behind an aggressive proxy server/filter and we occasionally lose responses from Github. This causes comm exceptions that could be avoided if the low level code would just perform an (optional - user configured) retry.\r\n\r\n\r\n"}}, {"doc": {"_id": 756, "title": "repo.get_teams() + team.get_members() doesn't work", "content": "My script:\r\n```Python\r\nimport sys\r\n\r\nfrom github import Github\r\n\r\n\r\ndef main():\r\n    token = '123456' # redacted\r\n    g = Github(token)\r\n    w3c_org = g.get_organization('w3c')\r\n    wpt_org = g.get_organization('web-platform-tests')\r\n    wpt_repo = w3c_org.get_repo('web-platform-tests')\r\n\r\n    invited_users = set(wpt_org.get_members())\r\n\r\n    all_users = set(wpt_repo.get_collaborators())\r\n\r\n    # wpt_repo.get_teams() + team.members() doesn't work, but\r\n    # w3c_org.get_teams() + team.members() does, so use the first\r\n    # just to filter the second. Sigh?\r\n    wpt_team_ids = set(team.id for team in wpt_repo.get_teams())\r\n    for team in w3c_org.get_teams():\r\n        if team.id not in wpt_team_ids:\r\n            continue\r\n        print(team)\r\n        for user in team.get_members():\r\n            if user in all_users:\r\n                continue\r\n            print('User {} is team member, not repo collaborator'.format(user.login))\r\n            all_users.add(user)\r\n\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n```\r\n\r\nThe \"sight\" comment is where there seems to be a bug. Iterating over wpt_repo.get_teams() directly yields the same 4 teams as this loop, but `team.get_members()` then fails like this:\r\n```\r\nTraceback (most recent call last):\r\n  File \"invite.py\", line 40, in <module>\r\n    main()\r\n  File \"invite.py\", line 25, in main\r\n    for user in team.get_members():\r\n  File \"/usr/local/google/home/foolip/src/bikeshed-tests/env/lib/python3.5/site-packages/github/PaginatedList.py\", line 58, in __iter__\r\n    newElements = self._grow()\r\n  File \"/usr/local/google/home/foolip/src/bikeshed-tests/env/lib/python3.5/site-packages/github/PaginatedList.py\", line 70, in _grow\r\n    newElements = self._fetchNextPage()\r\n  File \"/usr/local/google/home/foolip/src/bikeshed-tests/env/lib/python3.5/site-packages/github/PaginatedList.py\", line 172, in _fetchNextPage\r\n    headers=self.__headers\r\n  File \"/usr/local/google/home/foolip/src/bikeshed-tests/env/lib/python3.5/site-packages/github/Requester.py\", line 185, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, cnx))\r\n  File \"/usr/local/google/home/foolip/src/bikeshed-tests/env/lib/python3.5/site-packages/github/Requester.py\", line 198, in __check\r\n    raise self.__createException(status, responseHeaders, output)\r\ngithub.GithubException.UnknownObjectException: 404 {'documentation_url': 'https://developer.github.com/v3/teams/members/#list-team-members', 'message': 'Not Found'}\r\n```"}}, {"doc": {"_id": 755, "title": "Make use of issue_url in PullRequest", "content": "Clean up some of the issue methods in PullRequest to make use of the\r\nissue_url property, rather than chopping pieces off the URL to replace\r\n/pulls/ with /issues/."}}, {"doc": {"_id": 754, "title": "PullRequest labels should use Issues URL", "content": "The Github API docs for PullRequests say to make use of the Issues API\r\nto add, remove, set and query labels. This means that we need to make\r\nuse of the issue_url property for the PullRequest, not its own URL."}}, {"doc": {"_id": 753, "title": "Team description added to Team.py ", "content": "Fixes #450\r\n"}}, {"doc": {"_id": 752, "title": "Support labels for PullRequests", "content": "PullRequests can also have labels attached to them, like Issues or\r\nMilestones. Extend PullRequest to also export them if they are present."}}, {"doc": {"_id": 751, "title": "How can I delete all releases of a repository?", "content": "I want to delete all releases but I dont know how to, I've been looking in docs but didint found how to.\r\n\r\nThanks. "}}, {"doc": {"_id": 750, "title": "get_latest_release() returns error 404 if there is only one release", "content": "    from github import Github\r\n\r\n    gh = Github()\r\n\r\n    organization = gh.get_organization(\"PyGithub\")\r\n    # organization = gh.get_organization(\"TurtleRover\")\r\n    repository = organization.get_repo(\"PyGithub\")\r\n    # repository = organization.get_repo(\"Turtle-Rover-Mission-Control\")\r\n    latest = repository.get_latest_release()\r\n\r\n    print (latest.tarball_url)"}}, {"doc": {"_id": 749, "title": "There seem to be no params of 'updated_at' and 'create_at' in the class of Commit ", "content": "There seem to be no params of 'updated_at' and 'create_at' in the class of Commit.\r\n\r\nBut there are these items in the official API.(https://api.github.com/repos/input-output-hk/cardano-sl/git/commits/aed0d925b06e0bd1278e26539c445274c52f4b67)"}}, {"doc": {"_id": 748, "title": "Add get_organizations()", "content": ""}}, {"doc": {"_id": 747, "title": "Add documentation to github.Repository.Repository.create_git_release()", "content": ""}}, {"doc": {"_id": 746, "title": "add ignore SSL option for github enterprise accessibility", "content": "Please provide a 'verify=False' kinda flag for accessing enterprise servers with self signed certificates."}}, {"doc": {"_id": 745, "title": "Missing zipball_url and tarball_url in python 3", "content": "I am using PyGithub version 1.38 and I am doing the following:\r\n```python\r\nfrom github import Github\r\n\r\nrepo_name = 'godotengine/godot'\r\ngithub = Github(TOKEN)\r\nrepo = github.get_repo(repo_name)\r\nreleases = repo.get_releases()\r\nfor release in releases:\r\n    print(release.zipball_url)\r\n```\r\ngives me 'GitRelease' object has no attribute 'zipball_url'. This problem is valid for python 3.6 and 3.5. On python 2.7 works just fine"}}, {"doc": {"_id": 744, "title": "Add support for searching topics", "content": "Searching by topic is a feature offered in the beta version of the API.  We need this feature in order to collect data about repositories from a topic point of view.\r\n\r\n[Searching Topics](https://help.github.com/articles/searching-topics/)\r\n[Searching Topics by API](https://developer.github.com/v3/search/#search-topics)\r\n\r\nExample of use:\r\n```\r\ng = Github()\r\n# will return all machine-learning related topics\r\ntopics = g.search_topics(query=machine-learning) \r\n\r\nfor topic in topics:\r\n    print(topic.display_name)\r\n    print(topic.featured)\r\n    print(topic.curated)\r\n```"}}, {"doc": {"_id": 743, "title": "documentation: clarify semantics of get_comments", "content": "fix #707 "}}, {"doc": {"_id": 742, "title": "SSL error using sample code", "content": "Using the sample code, when I run the code, i get 'ssl.SSLError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:645)'\r\n"}}, {"doc": {"_id": 741, "title": "Add add_to_members() and remove_from_membership()", "content": "This PR provides the code and unittests to support adding a new member to an organization. Some things to note:\r\n\r\n1. The code and unittests are not original. They were copied and slightly modified from the following PR/branches:\r\nhttps://github.com/vmagro/PyGithub/commit/dc21acfcb48a8b71cfd39a2b6ea8ff4b149f5462\r\nhttps://github.com/jwplayer/PyGithub/commit/3fb0e82d71bb112f3d4632e6b5883fd98d680866\r\nhttps://github.com/jbweston/PyGithub/commit/c1ce18a24632e8d4b0752b19ab3fec9806e54593\r\n\r\n- Closes #424 \r\n- Closes #726 \r\n- Closes #399\r\n\r\n2. The `BeaverSoftware` Github organization no longer exists. To work around this issue, I used another organization that I belong to for the purpose of testing. I am not, however, submitting the replay data that was generated locally as a result of that. The two included tests passed when run locally using the other org I belong to.\r\n\r\n3. When a new member is added to an organization, the state of their membership is set to `pending`. As a result, they are not returned in the list of members returned by the call the `/orgs/:org/members/:user` endpoint. Instead, their status can be checked by calling `/orgs/:org/memberships/:user`."}}, {"doc": {"_id": 740, "title": "Tests fail with python 3.6.4", "content": "Just to be sure it wasn't a `PYTHONPATH` issue, I also re-ran the command below after setting it.\r\n\r\n```\r\n(pygithub) [2018-04-04 11:14 mbp] (master) PyGithub $ python -m github.tests\r\nTraceback (most recent call last):\r\n  File \"/usr/local/Cellar/python/3.6.4_4/Frameworks/Python.framework/Versions/3.6/lib/python3.6/runpy.py\", line 183, in _run_module_as_main\r\n    mod_name, mod_spec, code = _get_module_details(mod_name, _Error)\r\n  File \"/usr/local/Cellar/python/3.6.4_4/Frameworks/Python.framework/Versions/3.6/lib/python3.6/runpy.py\", line 109, in _get_module_details\r\n    __import__(pkg_name)\r\n  File \"/Users/tboring/hearst/PyGithub/github/__init__.py\", line 42, in <module>\r\n    from MainClass import Github, GithubIntegration\r\nModuleNotFoundError: No module named 'MainClass'\r\n```"}}, {"doc": {"_id": 739, "title": "Support for github enterprise pre-receive-hooks", "content": "Does this lib support github enterprise, especially the pre-receive-hook apis?\r\n\r\n- https://developer.github.com/v3/repos/pre_receive_hooks\r\n- https://developer.github.com/v3/orgs/pre_receive_hooks/\r\n- https://developer.github.com/v3/enterprise-admin/pre_receive_hooks/\r\n\r\n\r\n"}}, {"doc": {"_id": 738, "title": "Labels API: support description", "content": "The description attribute handling requirement is\r\n  a custom media type in the Accept header:\r\n    [application/vnd.github.symmetra-preview+json](https://developer.github.com/v3/issues/labels/)\r\n\r\nLimitation: \r\n* FIXME: `Repository.get_labels` does not report description, possibly something has changed in the preview API.\r\n\r\n-----\r\n\r\nFollowing `Repository.get_labels`, access to label's `description` property calls to `CompletableGithubObject._completeIfNeeded` and eventually `CompletableGithubObject.__complete` which requests e.g `https://api.github.com/repos/mloskot/github-label-maker/labels/mylabel`. The response, however, does NOT include the `description`\r\n\r\n```\r\ng = github.Github(<github_token>)\r\nr = g.get_user().get_repo(<github_repo>)\r\nrepo_labels = r.get_labels()\r\ni = 0\r\nfor label in repo_labels:\r\n     if not label.description and label.description is not github.GithubObject.NotSet:\r\n          i += 1\r\nprint(i) # always zero, regardless if labels are described in the repo\r\n```\r\n\r\nI've tried various hacks to ensure the required `Accept`  header is included, but nothing helps. Perhaps, I'm hitting the missing functionality due to\r\n\r\n> [Warning](https://developer.github.com/v3/issues/labels/): The API may change without advance notice during the preview period.\r\n\r\nFYI, I'm trying out this functionality while developing https://github.com/mloskot/github-label-maker/"}}, {"doc": {"_id": 737, "title": "Get a repo from another owner", "content": "This commits adds an optional param to specify a different owner to get a repo from than the user authenticated.\r\n\r\nPrior to that, it wasn't possible to get a repository on a different organization (or owner) while the repo is actually available in the list of `get_repos()`."}}, {"doc": {"_id": 736, "title": "Branch Protection calls missing", "content": "I believe these are still missing:\r\n\r\nhttps://developer.github.com/v3/repos/branches/#get-branch-protection\r\nhttps://developer.github.com/v3/repos/branches/#update-branch-protection\r\nhttps://developer.github.com/v3/repos/branches/#remove-branch-protection\r\nhttps://developer.github.com/v3/repos/branches/#get-required-status-checks-of-protected-branch\r\nhttps://developer.github.com/v3/repos/branches/#update-required-status-checks-of-protected-branch\r\nhttps://developer.github.com/v3/repos/branches/#remove-required-status-checks-of-protected-branch\r\n\r\nAnyone willing to create a pr for these?"}}, {"doc": {"_id": 735, "title": "Sort the Github Objects", "content": "It's difficult to follow the API docs when the order isn't alphabetical. This seems like the simplest fix, and worked well locally."}}, {"doc": {"_id": 734, "title": "Implement License API", "content": "Closes #724  \r\nCloses #508 \r\nCloses #398 \r\n\r\nThis PR added all three license APIs provide by Github:\r\nhttps://developer.github.com/v3/licenses\r\n\r\nUnit tests included."}}, {"doc": {"_id": 733, "title": "Add pull request template and issue template", "content": ""}}, {"doc": {"_id": 732, "title": "Support recording test data from behind proxies", "content": "When recording test data from behind a proxy, make sure to support\r\nset_tunnel on the original connection and write out the correct\r\nsettings from the httplib connection rather than the proxy settings."}}, {"doc": {"_id": 731, "title": "Add url attribute to PullRequestReview object", "content": "To compare PullRequestReview objects, they need to have the 'url'\r\nattribute because the CompletableGithubObject expects to be able to\r\ninspect a '_url' attribute on objects when testing for equality."}}, {"doc": {"_id": 730, "title": "github.search_repositories returned empty with combined queries", "content": "**Expected behavior:**\r\n`results = g.search_repositories(query) ` returns correct results for `q=topic:cmake+language:cpp`\r\n\r\n**Error behavior:**\r\nNone results received.\r\n\r\n**Expected url**:\r\n`https://api.github.com/search/repositories?q=topic:cmake+language:cpp`\r\n\r\n**Code:**\r\n``` Python\r\nquery = 'topic:cmake+language:cpp'\r\nresults = g.search_repositories(query)\r\nfor repo in results.get_page(1):\r\n\tprint(repo.name)\r\n```\r\n**Result:** \r\n`none output`\r\n\r\n**Notes:**\r\nHere is the code that works:\r\n```` Python\r\nquery = 'topic:cmake'\r\nresults = g.search_repositories(query)\r\nfor repo in results.get_page(1):\r\n\tprint(repo.name)\r\n````\r\n\r\n**======= update =======**\r\nwith fix `topic:cmake+language:cpp` to `topic:cmake language:cpp` the code works.\r\n\r\n**Could you please add example usage to the doc?**"}}, {"doc": {"_id": 729, "title": "Add hook support for organizations", "content": "Closes #680 \r\n\r\nI noticed there was support for hooks on the repository, but nothing for organization (seen at https://developer.github.com/v3/orgs/hooks/), so I've the following calls:\r\n\r\n- create_hook,\r\n- get_hook\r\n- get_hooks\r\n- edit_hook\r\n- delete_hook\r\n\r\n"}}, {"doc": {"_id": 728, "title": "Add a Gitter chat badge to README.md", "content": "### PyGithub/PyGithub now has a Chat Room on Gitter\n\n@sfdye has just created a chat room. You can visit it here: [https://gitter.im/PyGithub/PyGithub](https://gitter.im/PyGithub/PyGithub?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&content=body_link).\n\nThis pull-request adds this badge to your README.md:\n\n\n[![Gitter](https://badges.gitter.im/PyGithub/PyGithub.svg)](https://gitter.im/PyGithub/PyGithub?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=body_badge)\n\nIf my aim is a little off, please [let me know](https://github.com/gitterHQ/readme-badger/issues).\n\nHappy chatting.\n\n\nPS: [Click here](https://gitter.im/settings/badger/opt-out) if you would prefer not to receive automatic pull-requests from Gitter in future.\n"}}, {"doc": {"_id": 727, "title": "Finished search_commits PR", "content": "This is the continuation of #648, were I just changed the `sort` parameter to be `author-date` or `committer-date` instead of `indexed`, as stated in [the documentation](https://developer.github.com/v3/search/#search-commits), and asked by @sfdye.\r\n\r\n"}}, {"doc": {"_id": 726, "title": "Add organization add_membership, remove_membersip and get_invitations\u2026", "content": "The organization API was missing a couple of calls to manage invitations to organization.\r\n"}}, {"doc": {"_id": 725, "title": "GithubIntegration with APP specific APIs", "content": "It would be nice to have the class `GithubIntegration` coming with calls like `get_installations()`, `get_installation(:installation_id).get_repos()`, etc. Currently it only serves as a credential fetching helper class, while it is still necessary to manually make app installation specific requests."}}, {"doc": {"_id": 724, "title": "Add License API", "content": "https://developer.github.com/v3/licenses/"}}, {"doc": {"_id": 723, "title": "Add a way to get a list of all public repositories on github", "content": "How do we find the list of all repositories in github. \r\n\r\nUsing the command line it is possible, see https://developer.github.com/v3/repos/#list-all-public-repositories\r\n\r\nI am not able to do it with pygithub \r\n"}}, {"doc": {"_id": 722, "title": "Support for \"Review a user's permission level\"", "content": "Support endpoint:\r\nhttps://developer.github.com/v3/repos/collaborators/#review-a-users-permission-level\r\n\r\nI'm not exactly sure what should the accessors:\r\n```python\r\nrepo.get_collaborator_permissions(\"userlogin\")\r\n```\r\n\r\nNote that it's not the same as listing collaborators and check \"permission\" node, the string content is not the same.\r\n\r\nThought? (at least on the expected Python syntax)"}}, {"doc": {"_id": 721, "title": "GPG signatures for source validation", "content": "As we all know, today more than ever before, it is crucial to be able to trust our computing environments. One of the main difficulties that package maintainers of GNU/Linux distributions face, is the difficulty to verify the authenticity and the integrity of the source code. With GPG signatures it is possible for packagers to verify source code releases quickly and easily.\r\n\r\nIn order to securely package your software I am kindly requesting GPG signatures for the source tarballs. If you are not yet familiar with secure source code signing I recommend using [GPGit](https://github.com/NicoHood/gpgit) which automates the process of secure source code signing and also has a quick start guide on GPG for learning how to use it manually.\r\n\r\nThanks in advance."}}, {"doc": {"_id": 720, "title": "Improve documentation for CONTRIBUTING.md", "content": "A lot of PRs did not have unit tests simply because contributors don't know how to write it properly for this repo. We should improve the contributing docs."}}, {"doc": {"_id": 719, "title": "Collaborator site admin", "content": "Fixes issue #713 \r\n\r\nImplemented `site_admin` for NamedUser. "}}, {"doc": {"_id": 718, "title": "Add PullRequestComment.in_reply_to_id", "content": "Fixes #717"}}, {"doc": {"_id": 717, "title": "Comments do not include reply info", "content": "assert github.Github().get_user().get_repo(\"PyGithub\").get_pull(664).get_comment(166456140).in_reply_to_id == \"166453895\"\r\n\r\nCurrently, in_reply_to_id is undefined.  This makes it impossible to understand the comment threading."}}, {"doc": {"_id": 716, "title": "Fix add_to_watched for AuthenticatedUser", "content": "The functionality was completely broken - api endpoints were wrong/didn't work. Tested by logging in as an authenticated user - verified listing watches, add watch, and remove watch."}}, {"doc": {"_id": 715, "title": "Organization Outside Collaborators", "content": "https://developer.github.com/v3/orgs/outside_collaborators/\r\n\r\nThere is no matching method for this in PyGithub. I need this to make a chatops bot that polls who in an org has 2fa enabled. \r\n\r\n--timball"}}, {"doc": {"_id": 714, "title": "Add Contributing back to doc", "content": "Left-over from #551 and 1ca7d523fb4af"}}, {"doc": {"_id": 713, "title": "Can't access site_admin from collaborator endpoint", "content": "Hello,\r\n\r\nI'm trying to determine if a collaborator is a site admin but the site_admin key does not get returned:\r\n\r\n## code\r\n\r\n```\r\nfor repo in g.get_organization('orgName').get_repos():\r\n    for collab in repo.get_collaborators():\r\n        print(collab.site_admin)\r\n```\r\n\r\n## error\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"protected_test.py\", line 27, in <module>\r\n    print(collab.site_admin)\r\nAttributeError: 'NamedUser' object has no attribute 'site_admin'\r\n```\r\n\r\nThanks"}}, {"doc": {"_id": 712, "title": "Remove gh-pages branch and old docs", "content": "It seems that the older version of docs were built on GitHub Pages but not currently maintained anymore.\r\n\r\nhttp://pygithub.github.io/PyGithub/v1/index.html\r\n\r\nThe information is out-dated on PyPI: (under Homepage)\r\nhttps://pypi.org/project/PyGithub/\r\n\r\nShall we update it?\r\n\r\n"}}, {"doc": {"_id": 711, "title": "repo.protect_branch out-of-date?", "content": "I was trying to use the above-mentioned API and get a 404 not found in return. Looking at the issued REST call it seems not to match the current API.\r\n\r\nThe following REST call is issued:\r\n\r\n```\r\nPATCH https:/<url>/api/v3/repos/<org>/<repo>/branches\r\n\r\n{'Accept': 'application/vnd.github.loki-preview+json', 'Authorization': 'token (oauth token removed)', 'User-Agent': 'PyGithub/Python', 'Content-Type': 'application/json'}\r\n\r\n{\"protection\": {\"enabled\": true, \"required_status_checks\": {\"enforcement_level\": \"non_admins\"}}}\r\n```\r\n\r\nHowever, Github's API docs look like they expect it [differently](https://developer.github.com/enterprise/2.12/v3/repos/branches/#update-branch-protection). E.g. the endpoint URL holds ``/protection`` and the data keys also seem different (no ``protection``, no ``enabled``, ...).\r\n\r\nAm I missing something or is the Python API out-of-date?\r\n\r\nThanks a lot!"}}, {"doc": {"_id": 710, "title": "Why does Branches endpoint only return name?", "content": "## Summary\r\n\r\nBranches endpoint only returns the name of the Branches.\r\n\r\n## Issue\r\n\r\nI am getting a list of Branches in my repositories, but it seems to be only returning the name of the branches instead of the plethora information provided by the API https://developer.github.com/v3/repos/branches/#get-branch\r\n\r\n## Code\r\n```\r\nfor branch in g.get_organization('orgName').get_repo('repoName').get_branches():\r\n    print (branch) \r\n```\r\n## Actual output\r\n```\r\nBranch(name=\"dev\")\r\nBranch(name=\"master\")\r\n```\r\n\r\n## Expected output\r\n\r\nSomething similar to the JSON here https://developer.github.com/v3/repos/branches/#get-branch\r\n\r\n\r\nHow would I go about this if, as an example, I want to get the author of the branch?"}}, {"doc": {"_id": 709, "title": "Enforce the Host Header When Using Proxies", "content": "I found that, when using a proxy, it was sending this value:\r\n\r\n```\r\nsend: 'CONNECT api.github.com:443 HTTP/1.0\\r\\n'\r\nsend: '\\r\\n'\r\nsend: 'GET /repos/group/repo/pulls/7 HTTP/1.1\\r\\nHost: proxy.host.name.com:3128\\r\\nAccept-Encoding: identity\\r\\nAuthorization: token REDACTED\\r\\nUser-Agent: PyGithub/Python\\r\\n\\r\\n'\r\nreply: 'HTTP/1.0 400 Bad Request\\n'\r\n```\r\n\r\nGithub did not like the `Host` header _not_ being api.github.com and would return bad things.\r\n\r\nThis patch forces the header to the correct value."}}, {"doc": {"_id": 708, "title": "Get list of protected branches", "content": ":wave: \r\n\r\nI am doing an audit of list of protected branches in my organization. Is there any way to accomplish this?\r\n\r\nHere's what I have so far\r\n\r\n```\r\ng = Github(access_token, base_url='<github-enterprise-url>/api/v3')\r\nfor repo in g.get_organization('orgName').get_repos():\r\n    print (repo.name)\r\n\r\nfor branch in g.get_organization('orgName').get_repo('puppet').get_branches():\r\n    print (branch)\r\n```\r\n\r\nI am able to get a list of my branches in specific repos. Is there any function within PyGitHub to get the protection? I dont see it in the docs"}}, {"doc": {"_id": 707, "title": "get_comments does not return the comments created with create_issue_comments", "content": "I notice that calling `get_comments` on a PR object does not return the comments created with `create_issue_comment`, it only returns the user-based comments made with the web interface. Similarly, `get_issue_comments` does not return the API-created comments.\r\n\r\nThis is quite counter-intuitive.\r\n\r\nIs that on purpose?\r\n"}}, {"doc": {"_id": 706, "title": "Add __eq__ and __hash__ to NamedUser", "content": "Resolves #608 "}}, {"doc": {"_id": 705, "title": "Fix PY3 compatibility", "content": "closes labrys/PyGithub#1\r\n\r\nFix items moved or not available in PY3:\r\n- Fix httplib not available in PY3 (use six.moves.http_client)\r\n- Fix urlparse not available in PY3 (use six.moves.urllib.parse)\r\n- Fix quote, quote_plus, urlencode moved in PY3 (use six.moves.urllib.parse)\r\n- Fix basestring not available in PY3 (use six.string_types)\r\n- Fix long not available in PY3 (use six.integer_types)\r\n- Fix unicode not available in PY3 (use six.text_type)- Fix print is a function in PY3\r\n- Fix dict.iteritems not available in py3 (use six.iteritems)\r\n- Fix dict.itervalues not available in py3 (use six.itervalues)\r\n- Fix exceptions using comma (use `except Exception as error:` style)\r\ncloses PyGithub/PyGithub#694\r\n\r\nFix imports\r\n- Fix package imports for python 3\r\n- Fix module trying to import itself\r\n- Fix unresolved references\r\n- Remove unused imports\r\n- Code style - Sort imports by category and name\r\ncloses PyGithub/PyGithub#314"}}, {"doc": {"_id": 704, "title": "make datetime objects timezone aware using UTC timezone (+tests)", "content": "Fixes #512 \r\n\r\nCurrently, datetime objects returned by PyGithub are not timezone aware, even though times returned through the APIv3 denote UTC (e.g. `2018-02-08T18:46:46Z`) - I have modified PyGithub so that it adds the necessary UTC timezone information wherever datetime is used (that I can see). As far as I can tell, all timezone information returned from the Github API using PyGithub have no timezone information in the headers, and therefore all JSON responses are in UTC, again, as far as I can tell.\r\n\r\nI have also modified the datetime comparisons in all tests so they are aware of UTC timezone as well - with these changes all tests pass with python2 and python3.\r\n\r\nI have also run `pep8 --ignore=E501 github` (with python2) as recommended in CONTRIBUTING.md (there were a couple left over from the master branch which I fixed). It should pass completely now.\r\n\r\nI have written this with the assumption that we don't want to add any other libs or modules like `pytz`, mainly because I also assumed all datetimes sent to us from github are UTC, so we don't need to rely upon a huge lib like that.\r\n\r\nFeel free to reject this if you want, I saw a #512 and figured I could help solve it :)"}}, {"doc": {"_id": 703, "title": "Add maintainer can modify flag to create pull request", "content": "Implements issue #639 \r\n\r\nDefault is None to let Github decide the default behaviour"}}, {"doc": {"_id": 702, "title": "Add team privacy parameter to create team", "content": "Implements #611 \r\n\r\nReplay data is still not correct as I was unable to to run with the record parameter leading to issues such as attempting to write a str object to a binary file. Input being None for RecordingConnection.request. Fixing the above 2 led to a 404 error. Could someone direct me on how to properly obtain the recording data?"}}, {"doc": {"_id": 701, "title": "Fix typo in Design.md", "content": "Proposed in #686 "}}, {"doc": {"_id": 700, "title": "No exception raised for trying to make public fork private?", "content": "Using the GitHub API I received a 422 when trying to privatize a public fork, but when doing so with PyGithub client it responds with no error (and no change to repository private status).  This was done with an organization.\r\n\r\nTo reproduce:\r\n```\r\nrepo = github_client.get_organization(org_name).get_repo(\"name-of-public-fork\")\r\nrepo.edit(private=True)\r\nbool(repo.private) is True\r\nFalse\r\n```"}}, {"doc": {"_id": 699, "title": "Add collaborator permission", "content": "Addresses #604 \r\nPatched #537 so that it now passes unit tests"}}, {"doc": {"_id": 698, "title": "Method create_milestone now uses datetime object", "content": "This fits better with v3 API which uses ISO8601 date/time format with timezone.\r\n\r\nDate object still allowed for backward compatibility\r\n\r\nThe problem with current implementation is it always passes UTC to the API.  So for example, if you're in the United States and pass a `date` object like `date(2018, 2, 4)`, then GitHub will interpret that as 2018-02-04T00:00:00Z which is actually 2018-02-03 in the United States.  So the due date in the milestone will be the day before the one you passed in.  This is incorrect behavior.\r\n\r\nSince GitHub API needs expects a date/time in ISO 8601 format, it would be best to pass in a `datetime` object and call `.isoformat()` on the object, than to bother with `date` objects.  This will also be more compatible with enhanced datetime libraries like [pendulum](https://pendulum.eustace.io/)."}}, {"doc": {"_id": 697, "title": "Add CodeTriage badge to pygithub/pygithub", "content": "Adds a badge showing the number of people helping this repo on CodeTriage.\n\n[![Open Source Helpers](https://www.codetriage.com/pygithub/pygithub/badges/users.svg)](https://www.codetriage.com/pygithub/pygithub)\n\n\n## What is CodeTriage?\n\nCodeTriage is an Open Source app that is designed to make contributing to Open Source projects easier. It works by sending subscribers a few open issues in their inbox. If subscribers get busy, there is an algorithm that backs off issue load so they do not get overwhelmed\n\n[Read more about the CodeTriage project](https://www.codetriage.com/what).\n\n## Why am I getting this PR?\n\nYour project was picked by the human, @schneems. They selected it from the projects submitted to https://www.codetriage.com and hand edited the PR. How did your project get added to [CodeTriage](https://www.codetriage.com/what)? Roughly 5 months ago, [@TiagoDanin](https://github.com/TiagoDanin) added this project to CodeTriage in order to start contributing. Since then, 2 people have subscribed to help this repo.\n\n## What does adding a badge accomplish?\n\nAdding a badge invites people to help contribute to your project. It also lets developers know that others are invested in the longterm success and maintainability of the project.\n\nYou can see an example of a CodeTriage badge on these popular OSS READMEs:\n\n- [![](https://www.codetriage.com/rails/rails/badges/users.svg)](https://www.codetriage.com/rails/rails) https://github.com/rails/rails\n- [![](https://www.codetriage.com/crystal-lang/crystal/badges/users.svg)](https://www.codetriage.com/crystal-lang/crystal) https://github.com/crystal-lang/crystal\n\n## Have a question or comment?\n\nWhile I am a bot, this PR was manually reviewed and monitored by a human - @schneems. My job is writing commit messages and handling PR logistics.\n\nIf you have any questions, you can reply back to this PR and they will be answered by @schneems. If you do not want a badge right now, no worries, close the PR, you will not hear from me again.\n\nThanks for making your project Open Source! Any feedback is greatly appreciated."}}, {"doc": {"_id": 696, "title": "New release?", "content": "It's been some time since the last release. I don't really want my project to depend on the master. Who needs it too?"}}, {"doc": {"_id": 695, "title": "Update Team.py to get members with role filter", "content": "Hello,\r\n\r\nI edited \"get_members\" function to query with \"role\" like the following:\r\n team.get_members(role='maintainer')"}}, {"doc": {"_id": 694, "title": "name 'unicode' is not defined error", "content": "The `asserts` that check against `(str, unicode)` throw the above exception when using python3\r\ne.g\r\n`assert description is github.GithubObject.NotSet or isinstance(description, (str, unicode)), description` when creating a repo for an organisation."}}, {"doc": {"_id": 693, "title": "Large asset upload timed out.", "content": "Trying to upload an asset of ~600 MB to a GitHub release, but getting the below error.\r\n\r\n```python\r\nTraceback (most recent call last):\r\n  File \"run_deploy.py\", line 47, in <module>\r\n    label=release_title\r\n  File \"C:\\Python27-x64\\lib\\site-packages\\github\\GitRelease.py\", line 161, in upload_asset\r\n    input=path\r\n  File \"C:\\Python27-x64\\lib\\site-packages\\github\\Requester.py\", line 177, in requestBlobAndCheck\r\n    return self.__check(*self.requestBlob(verb, url, parameters, headers, input))\r\n  File \"C:\\Python27-x64\\lib\\site-packages\\github\\Requester.py\", line 245, in requestBlob\r\n    return self.__requestEncode(None, verb, url, parameters, headers, input, encode)\r\n  File \"C:\\Python27-x64\\lib\\site-packages\\github\\Requester.py\", line 268, in __requestEncode\r\n    status, responseHeaders, output = self.__requestRaw(cnx, verb, url, requestHeaders, encoded_input)\r\n  File \"C:\\Python27-x64\\lib\\site-packages\\github\\Requester.py\", line 295, in __requestRaw\r\n    response = cnx.getresponse()\r\n  File \"C:\\Python27-x64\\lib\\httplib.py\", line 1121, in getresponse\r\n    response.begin()\r\n  File \"C:\\Python27-x64\\lib\\httplib.py\", line 438, in begin\r\n    version, status, reason = self._read_status()\r\n  File \"C:\\Python27-x64\\lib\\httplib.py\", line 394, in _read_status\r\n    line = self.fp.readline(_MAXLINE + 1)\r\n  File \"C:\\Python27-x64\\lib\\socket.py\", line 480, in readline\r\n    data = self._sock.recv(self._rbufsize)\r\n  File \"C:\\Python27-x64\\lib\\ssl.py\", line 766, in recv\r\n    return self.read(buflen)\r\n  File \"C:\\Python27-x64\\lib\\ssl.py\", line 653, in read\r\n    v = self._sslobj.read(len)\r\nssl.SSLError: ('The read operation timed out',)\r\n```\r\n\r\nAll I'm doing is ```release.upload_asset(\"/path/to/deployment.zip\")```.\r\n\r\nAm I using the library wrong somehow?"}}, {"doc": {"_id": 692, "title": "Add a member to an organization given a NamedUser", "content": "Problem: A missed endpoint from the API. `PUT /orgs/:org/memberships/:username`\r\n\r\nSolution: Add an easy method that takes a NamedUser and sends to this endpoint. An email invitation is then sent to the NamedUser account\r\n\r\nSee https://developer.github.com/v3/orgs/members/#add-or-update-organization-membership for the api docs"}}, {"doc": {"_id": 691, "title": "Remove the default \"null\" input send during GET request", "content": "**Background**\r\nI used the library for automating a process on a GHE instance. Unfortunately, simple GET requests were always rejected. After analysing the raw request, I figured out that when you use the Github API that don't need any input (/pulls, /user, /repos, etc) the string \"null\" was appended to the request, making it malformed and invalid.\r\n\r\nA quick test, the following example failed systematically\r\n\r\n```python\r\nimport github\r\ngithub.enable_console_debug_logging()\r\ngithub.Github(\"<token>\", base_url=\"https://<ghe_instance>/api/v3\").get_user().get_repos()[0]\r\n```\r\nAnd the logging showed:\r\n\r\n> GET https://<ghe_instance>/api/v3/user/repos {'Authorization': 'token (oauth token removed)', 'User-Agent': 'PyGithub/Python'} null ==> 400 {'content-type': 'text/html; ...\r\n\r\nWe can see the \"null\" value appended to the request, which is wrong ! I guess the reaction depends on the HTTP server software. At least in my company, it doesn't like it at all.\r\n\r\n**Changes**\r\n- Removed the default value for input \"null\" by None. We really want to send no input when we have nothing to send.\r\n\r\n**Test**\r\nRerun the example above, everything is fine."}}, {"doc": {"_id": 690, "title": "Updated github.PullRequestReviewerRequest", "content": "Updated github.PullRequestReviewerRequest according to the API changes: https://developer.github.com/changes/2018-01-24-end-thor-preview/\r\n\r\nAddresses issue: https://github.com/PyGithub/PyGithub/issues/687\r\n"}}, {"doc": {"_id": 689, "title": "make created_at/published_at attrs available for Release objects", "content": "The github releases api returns `created_at` and `published_at` timestamps, similar to the `updated_at` timestamps in issues, comments, etc.  I'd like to be able to access these attributes as `datetime` objects as well.\r\n\r\nEg:\r\n```\r\n>>> github.Github().get_organization(org).get_repo(repo).get_latest_release().published_at\r\ndatetime.datetime(2017, 10, 26, 1, 6, 28)\r\n```\r\n\r\nI added the `created_at` and `published_at` properties, following the style of the surrounding code and `Issue.py`'s `updated_at` property."}}, {"doc": {"_id": 688, "title": "PullRequestReviewerRequest Broken by GitHub API Change", "content": "GitHub recently released a change in the response to the `/requested_reviewers` endpoint.\r\n\r\nhttps://developer.github.com/changes/2018-01-24-end-thor-preview/\r\n\r\nThis change has broken the PullRequestReviewerRequest class. For example, attempting to iterate over the paginated list of reviewers and collect `login` attributes now returns the following error:\r\n```\r\nreturn [user.login.lower() for user in reviews]\r\nFile \"/var/task/github/PullRequestReviewerRequest.py\", line 46, in login\r\nself._completeIfNotSet(self._login)\r\nFile \"/var/task/github/GithubObject.py\", line 251, in _completeIfNotSet\r\nself._completeIfNeeded()\r\nFile \"/var/task/github/GithubObject.py\", line 255, in _completeIfNeeded\r\nself.__complete()\r\nFile \"/var/task/github/GithubObject.py\", line 260, in __complete\r\nself._url.value\r\nAttributeError: 'PullRequestReviewerRequest' object has no attribute '_url'\r\n```"}}, {"doc": {"_id": 687, "title": "PullRequestReviewerRequest should be updated", "content": "The payload of GET /repos/:owner/:repo/pulls/:number/requested_reviewers has changed:\r\nhttps://developer.github.com/changes/2018-01-24-end-thor-preview/\r\nFrom Jan.24 2018 the module raises as a result:\r\nAtributeError: PullRequestReviewerRequest has no attribute '_url'\r\n\r\nWe should either pass 'users' as list_item arg to the PullRequestReviewerRequest module or changed the entire module design."}}, {"doc": {"_id": 686, "title": "Propose a small spelling correction to Laziness ?", "content": "Hi All,\r\ndid you want to review Laziness ?\r\n\r\n```\r\ndiff --git a/doc/Design.md b/doc/Design.md\r\nindex 7863d93a..1971f3b6 100644\r\n--- a/doc/Design.md\r\n+++ b/doc/Design.md\r\n@@ -22,7 +22,7 @@ They\r\n    - may be GET-able (to ask if an object is in the list)\r\n    - may be DELETE-able (to remove an object from the list)\r\n \r\n-Lazyness\r\n+Laziness\r\n ========\r\n \r\n\r\n```\r\n"}}, {"doc": {"_id": 685, "title": "Is there a way to login using a Deploy Key?", "content": "I want to access Issues and PRs from a private repository, without making an account a collaborator (granting it push rights). One such way would be a Deploy Key.\r\n\r\nIs is possible to login using PyGithub using a Deploy Key?"}}, {"doc": {"_id": 684, "title": "How to search for a text on all issues that has a specific label on a specific repository", "content": "Hi,\r\n\r\nMy previous issue was about get a particular issue, now I'm trying to implement a search on all issues of a repo that matches a text pattern.\r\n\r\nI have this code:\r\n\r\n`ghub = Github(\"APITOKEN\")\r\nissues = ghub.search_issues(query='q=text_to_search+type:issue+repo:username/my_repo+is:open+label:my_label',sort='created')`\r\n\r\nI don't get errors but I can't get the correct results. The results returned even does not exist on my repo.\r\n"}}, {"doc": {"_id": 683, "title": "Unable to use get_issues() passing labels parameter", "content": "I'm trying to use this:\r\n\r\n`repo = ghub.get_user().get_repo('myrepo')\r\n repo.get_issues(state='open',sort='created',direction='asc',labels=['faq'])`\r\n\r\nWhen I do that I'm getting this error message:\r\n\r\n`Traceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/usr/local/lib/python3.6/site-packages/github/Repository.py\", line 1649, in get_issues\r\n    assert labels is github.GithubObject.NotSet or all(isinstance(element, github.Label.Label) for element in labels), labels\r\nAssertionError: ['faq']`\r\n\r\nI also tried this way:\r\n\r\n`repo.get_issues(state='open',sort='created',direction='asc',labels='faq')`\r\n\r\nSame error message.\r\n\r\nI'm using the PyGithub 1.35 version and Python 3.6.2"}}, {"doc": {"_id": 682, "title": "Add installation instructions to README", "content": "When I first saw this, I tried to `pip install github` (as the package is named `github` in the demo) and when that failed I ended up just installing from Github master.  I thought having the PyPi name here would be handy."}}, {"doc": {"_id": 681, "title": "Use Python 3 syntax in README", "content": "Since 2.7 supports this syntax as well, this will help not to confuse new people."}}, {"doc": {"_id": 680, "title": "Organization webhooks support?", "content": "Hi,\r\n\r\nDoes it support organization webhook to listen to repository delete event?"}}, {"doc": {"_id": 679, "title": "Separate request for requested reviewers", "content": "Hi,\r\nwhy class PullRequest cannot returns requested reviewers from json of this PR? It contains this. Instead of there is separate request for reviewers only."}}, {"doc": {"_id": 678, "title": "Add committer/author to Repository.delete_file", "content": "As per spec:\r\nhttps://developer.github.com/v3/repos/contents/#optional-parameters-2"}}, {"doc": {"_id": 677, "title": "Add new params for /users/:user/repos", "content": "Add new params for _/users/:user/repos_ endpoint and fix all pep8 coding conventions\r\n"}}, {"doc": {"_id": 676, "title": "Add permissions field to NamedUser", "content": "Add permissions field to NamedUser to be used when getting collaborators from a repository.\r\n```python\r\n>>> me = [u for u in repo.get_collaborators() if u.login == \"iraquitan\"][0]\r\n>>> me\r\n[NamedUser(login=\"iraquitan\")]\r\n>>> me.permissions\r\nPermissions(push=True, pull=True, admin=True)\r\n```"}}, {"doc": {"_id": 675, "title": "Traffic objects", "content": "This pull request is addressing https://github.com/PyGithub/PyGithub/issues/478, which wants to expand PyGithub's functionality to include [traffic](https://developer.github.com/v3/repos/traffic/). I've only included Clones and Views, to get started. Referrers and Paths haven't been implemented yet, but shouldn't be hard to add.\r\n\r\nAlso, this is my second pull request ever, so my apologies if I'm doing anything incorrectly. \r\n\r\nThanks!  "}}, {"doc": {"_id": 674, "title": "Drop support for EOL Python 2.5-2.6 and 3.2-3.3", "content": "Fixes https://github.com/PyGithub/PyGithub/issues/592.\r\n\r\nPython 2.5-2.6 and 3.2-3.3 are EOL and no longer receiving security updates.\r\n\r\n![image](https://user-images.githubusercontent.com/1324225/34214416-1a034122-e5ab-11e7-82e1-385a86691ca7.png)\r\nSource: https://en.wikipedia.org/wiki/CPython#Version_history\r\n\r\nHere's the pip installs for PyGithub from PyPI for the last month, showing nothing for 2.5 or 3.2 and very low numbers for 2.6 and 3.3.\r\n\r\n| python_version | percent | download_count |\r\n| -------------- | ------: | -------------: |\r\n| 2.7            |   82.5% |         39,240 |\r\n| 3.5            |    8.1% |          3,832 |\r\n| 3.6            |    7.0% |          3,332 |\r\n| 3.4            |    2.1% |            999 |\r\n| 2.6            |    0.2% |             86 |\r\n| 3.3            |    0.1% |             40 |\r\n| 3.7            |    0.1% |             28 |\r\n\r\nSource: `pypinfo --percent --pip --markdown PyGithub pyversion`"}}, {"doc": {"_id": 673, "title": "Source Import API", "content": "- `PUT` and `GET` for `/repos/:owner/:repo/import` according to the [preview docs](https://developer.github.com/v3/migration/source_imports/)\r\n- Recycled from #505 "}}, {"doc": {"_id": 672, "title": "Don't include tests in distribution?", "content": "One task I'm working on is sliming down a docker image and one thing that came up was `pygithub`.\r\n\r\nThe library itself is tiny, but we take a *huge* hit from the tests\r\n\r\n```console\r\n# du -hs lib/python3.6/site-packages/github/\r\n21M\tlib/python3.6/site-packages/github/\r\n# du -hs lib/python3.6/site-packages/github/tests\r\n20M\tlib/python3.6/site-packages/github/tests\r\n# rm -rf lib/python3.6/site-packages/github/tests && du -hs lib/python3.6/site-packages/github/\r\n1.3M\tlib/python3.6/site-packages/github/\r\n```\r\n\r\nWould a PR which doesn't include the tests in the distribution by default be acceptable?"}}, {"doc": {"_id": 671, "title": "Add Reactions feature", "content": "Hey, I have added the logic to create and list reactions on commits comments, issues, issue comments, pull requests review comments as described [here](https://developer.github.com/v3/reactions/).\r\n\r\nIt solves #649 \r\n\r\n\r\n"}}, {"doc": {"_id": 670, "title": "PullRequest: add support for getting a single review's comments.", "content": "Add support for the URL:\r\n/repos/:owner/:repo/pulls/:number/review/:id/comments."}}, {"doc": {"_id": 669, "title": "Add ping_url and ping to Hook", "content": "This PR adds `ping_url` attribute and the `ping` endpoint for Repository Webhook:\r\n\r\nhttps://developer.github.com/v3/repos/hooks/#get-single-hook\r\nhttps://developer.github.com/v3/repos/hooks/#ping-a-hook\r\n\r\n```\r\n{\r\n  \"id\": 1,\r\n  \"url\": \"https://api.github.com/repos/octocat/Hello-World/hooks/1\",\r\n  \"test_url\": \"https://api.github.com/repos/octocat/Hello-World/hooks/1/test\",\r\n  \"ping_url\": \"https://api.github.com/repos/octocat/Hello-World/hooks/1/pings\",\r\n  \"name\": \"web\",\r\n  \"events\": [\r\n    \"push\",\r\n    \"pull_request\"\r\n  ],\r\n  \"active\": true,\r\n  \"config\": {\r\n    \"url\": \"http://example.com/webhook\",\r\n    \"content_type\": \"json\"\r\n  },\r\n  \"updated_at\": \"2011-09-06T20:39:23Z\",\r\n  \"created_at\": \"2011-09-06T17:26:27Z\"\r\n}\r\n```"}}, {"doc": {"_id": 668, "title": "Adding unit test for tree attribute of GitCommit", "content": "Adding a simple unit test for tree attribute for GitCommit."}}, {"doc": {"_id": 667, "title": "[Documentation] Create instance from token", "content": "This PR provides the user with more options to create the Github instance, aka from access_token, for people who are unwilling to put their username and password in the code. "}}, {"doc": {"_id": 666, "title": "Repo hooks api not working", "content": "```\r\nfrom github import Github\r\ng = Github()\r\nassert len(list(g.get_repo('PyGithub/PyGithub').get_hooks())) == 0\r\n```\r\n\r\nRunning this will encounter \r\n> github.GithubException.UnknownObjectException: 404 {'message': 'Not Found', 'documentation_url': 'https://developer.github.com/v3/repos/hooks/#list-hooks'}\r\n\r\nI am just taking `PyGithub` as an example, it doesn't work for all repos, including public and private repos.\r\n\r\nSame for all the repo hooks api, like `create_hook` and `get_hook`.\r\n\r\nI just checked GitHub v3 repo hooks api:\r\nhttps://developer.github.com/v3/repos/hooks/\r\n\r\nIt seems there is an additional attribute `ping_url` and this repo is not updated for it. Not sure if this is the cause or some other changes I am not aware of."}}, {"doc": {"_id": 665, "title": "pygithub3 fails to install: ModuleNotFoundError: No module named 'github'", "content": "pygithub3 fails to install on Python 3.6.3\r\n\r\n```\r\n# mkvirtualenv test-pygithub3\r\n# pip install pygithub3\r\nCollecting pygithub3\r\n  Using cached pygithub3-0.5.1.tar.gz\r\n    Complete output from command python setup.py egg_info:\r\n    Traceback (most recent call last):\r\n      File \"<string>\", line 1, in <module>\r\n      File \"/private/var/folders/kz/lxl7qsq55tsgctldpsfnvz4r0000gn/T/pip-build-pxv7mup6/pygithub3/setup.py\", line 7, in <module>\r\n        import pygithub3\r\n      File \"/private/var/folders/kz/lxl7qsq55tsgctldpsfnvz4r0000gn/T/pip-build-pxv7mup6/pygithub3/pygithub3/__init__.py\", line 10, in <module>\r\n        from github import Github\r\n    ModuleNotFoundError: No module named 'github'\r\n\r\n    ----------------------------------------\r\nCommand \"python setup.py egg_info\" failed with error code 1 in /private/var/folders/kz/lxl7qsq55tsgctldpsfnvz4r0000gn/T/pip-build-pxv7mup6/pygithub3/\r\n```\r\n\r\nOSX 10.12.6\r\nPyEnv 1.1.5\r\nPython 3.6.3"}}, {"doc": {"_id": 664, "title": "Use 'requests' instead of 'httplib'", "content": "This is an updated version of #383 , with the following changes:\r\n* Resolves conflict in setup.py\r\n* Supports HTTP and HTTPS\r\n* Supports base_url other than github.com\r\n* Uses requests's sessions to further optimize timing\r\n* Proxies are now handled using requests' default handling. This means that the environment variables `$HTTP_PROXY`/`$HTTPS_PROXY`/`$http_proxy`/`$https_proxy` are now used (request seems to prefer the lower case version if both are defined) to specify proxies. A further PR could be added to pass this as a parameter to the calls, if required"}}, {"doc": {"_id": 663, "title": "Maintenance of this project", "content": "@adamtheturtle @jacquev6 @JPWKU @jayfk @jzelinskie @MichaelPereira @nhomar \r\n\r\nHello! First of all, *thank you* for this project. It has saved me (and many others) a ton of time.\r\n\r\nUnfortunately, this project hasn't received much love for over 5 months. Pull requests have been sitting in the queue untouched. I've had to work around many bugs that would have been fixed by some merged pull requests. I understand that it's tough to keep up with these mundane things, but as the GitHub API evolves so must this wrapper.\r\n\r\nI'd be happy to help out with maintaining this project. I'm a ruthless code reviewer, I have an interest in keeping this up-to-date, and I'd really prefer not to maintain my own fork of this. Thanks in advance!"}}, {"doc": {"_id": 662, "title": "Added option to create review for Pull request", "content": "Added option to create review for Pull request.\r\nWith this code you have the ability to create a review object and also specify the event (APPROVE, REQUIRE_CHANGES, ...) which you don't have in reviewer request."}}, {"doc": {"_id": 661, "title": "Downloading large files", "content": "Using the `.get_contents()` method to try to download a large file raises the error:\r\n\r\n```\r\n{'errors': [{'code': 'too_large', 'field': 'data',\r\n     'resource': 'Blob'}],\r\n     'message': 'This API returns blobs up to 1 MB in size. The requested blob is too large to fetch via the API, but you can use the Git Data API to request blobs up to 100 MB in size.',\r\n     'documentation_url': 'https://developer.github.com/v3/repos/contents/#get-contents'}\r\n```\r\n\r\nIs there a way of detecting this and passing over to another handler that *can* download the file?\r\n\r\nFor example, if something like this fails:\r\n```\r\ncontents = repository.get_dir_contents(urllib.parse.quote(server_path), ref=sha)\r\n\r\nfor content in contents:\r\n   if content.type != 'dir':\r\n     file_content = repository.get_contents(urllib.parse.quote(content.path), ref=sha)\r\n```\r\n\r\noptionally revert to:\r\n\r\n```\r\nfile_content = repository.get_git_blob(content.sha)\r\n```"}}, {"doc": {"_id": 660, "title": "self._url is not a valid attribute", "content": "\r\n(Pdb) for i in each_pull_request.get_reviews(): i.update()\r\n*** AttributeError: 'PullRequestReview' object has no attribute '_url'\r\n(Pdb)\r\n\r\n"}}, {"doc": {"_id": 659, "title": "get_collaborators does not return permissions information on users", "content": "When accessing the rest API, I get back an attribute called \"permissions\". This information is very valuable, and it is missing when I call get_collaborators for a repository. Instead, I get back a list of NamedUser, which doesn't contain all the information I need."}}, {"doc": {"_id": 658, "title": "get_organizations different behavior on mac vs. Linux pygithub 1.35", "content": "I have a simple code snippet that works just fine on mac:\r\n\r\n```python\r\n    def get_repos_for_org(self, org):\r\n        organization = self.gho.get_organization(org)\r\n        repo_list = []\r\n        for repo in organization.get_repos():\r\n            repo_list.append(repo.full_name)\r\n        return repo_list\r\n```\r\n\r\nSimple enough.  That same call when running on Centos 7.3 box I get the following stack.  I have updated every thing I can think of to get this to run on linux but no charm.  \r\n```java\r\n  File \"/data/jenkins/workspace/release/generate/github_tools.py\", line 69, in get_repos_for_org\r\n    for repo in organization:\r\n  File \"/usr/lib/python2.7/site-packages/github/PaginatedList.py\", line 49, in __iter__\r\n    newElements = self._grow()\r\n  File \"/usr/lib/python2.7/site-packages/github/PaginatedList.py\", line 61, in _grow\r\n    newElements = self._fetchNextPage()\r\n  File \"/usr/lib/python2.7/site-packages/github/PaginatedList.py\", line 163, in _fetchNextPage\r\n    headers=self.__headers\r\n  File \"/usr/lib/python2.7/site-packages/github/Requester.py\", line 172, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, cnx))\r\n  File \"/usr/lib/python2.7/site-packages/github/Requester.py\", line 213, in requestJson\r\n    return self.__requestEncode(cnx, verb, url, parameters, headers, input, encode)\r\n  File \"/usr/lib/python2.7/site-packages/github/Requester.py\", line 243, in __requestEncode\r\n    url = self.__makeAbsoluteUrl(url)\r\n  File \"/usr/lib/python2.7/site-packages/github/Requester.py\", line 310, in __makeAbsoluteUrl\r\n    assert o.port == self.__port\r\nAssertionError\r\n```"}}, {"doc": {"_id": 657, "title": "Add Repository.archived property", "content": "Archiving repositories was added recently. I'd like to filter out archived repos in some of my scripts, so I added an `archived` property to the `Repository` class."}}, {"doc": {"_id": 656, "title": "2FA failed in sample script", "content": "Can you fix for 2FA account?\r\nfrom github import Github\r\n\r\n# First create a Github instance:\r\ng = Github(\"user\", \"password\")\r\n\r\n# Then play with your Github objects:\r\nfor repo in g.get_user().get_repos():\r\n    print repo.name"}}, {"doc": {"_id": 655, "title": "Add support for access level for organization repo", "content": ""}}, {"doc": {"_id": 654, "title": "Add support for access level for organization repo", "content": ""}}, {"doc": {"_id": 653, "title": "Issue event object with event `labeled` doesn't have label attributes", "content": "I am trying to access the label name from a `labeled` event and looks like that attribute is missing.\r\n\r\n```\r\n\"label\": {\r\n            \"name\": \"sample-label\",\r\n            \"color\": \"fbca04\"\r\n        }\r\n```\r\n\r\n\r\n\r\nI can get this data using a REST call. Can we add that?"}}, {"doc": {"_id": 652, "title": "Accept \"page\" argument in stargazer calls", "content": "`get_stargazers` and `get_stargazers_with_dates` use endpoints that support the `page` parameter, but the functions don't accept it.\r\n\r\nI'd be happy to submit a pull request, if someone could point me a place to get started."}}, {"doc": {"_id": 651, "title": "Update api calls to loki-preview", "content": "Loki-preview is merged into master branch of API v3.\r\n\r\nClean up :) "}}, {"doc": {"_id": 649, "title": "Add a reaction to a issue comment", "content": "Is it somehow possible to add a reaction like :+1: or :-1: to a comment? I couldn't find it when looking thought the repo or docs."}}, {"doc": {"_id": 648, "title": "Add support for the Github API search/commits endpoint", "content": "The search/commits endpoint has been available since January 2017.  This PR adds support for interrogating that endpoint.  The endpoint is documented here: https://developer.github.com/v3/search/#search-commits\r\n\r\n"}}, {"doc": {"_id": 647, "title": "Fix JWT encoding with Python3", "content": "See https://github.com/PyGithub/PyGithub/pull/633"}}, {"doc": {"_id": 646, "title": "base_url private github or github enterprise ", "content": "#Hi, I really don't understand why this code:\r\n```\r\ng = Github(\"privateAccount\", \"privatePass\")\r\n\r\n        for org in g.get_user().get_orgs():\r\n            print(org.name)\r\n```\r\nworks perfectly but when I want to get the same informations from my enterprise account it doesn't works:\r\n```\r\ng = Github(\"enterpriseAccount\", \"enterprisePass\", base_url=\"https://enterprise-url-github\")\r\n\r\n        for org in g.get_user().get_orgs():\r\n            print(org.name)\r\n```\r\nAnd I get this error:\r\n```\r\n\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1997, in __call__\r\n    return self.wsgi_app(environ, start_response)\r\n  File \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1985, in wsgi_app\r\n    response = self.handle_exception(e)\r\n  File \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1540, in handle_exception\r\n    reraise(exc_type, exc_value, tb)\r\n  File \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1982, in wsgi_app\r\n    response = self.full_dispatch_request()\r\n  File \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1614, in full_dispatch_request\r\n    rv = self.handle_user_exception(e)\r\n  File \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1517, in handle_user_exception\r\n    reraise(exc_type, exc_value, tb)\r\n  File \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1612, in full_dispatch_request\r\n    rv = self.dispatch_request()\r\n  File \"/usr/local/lib/python2.7/dist-packages/flask/app.py\", line 1598, in dispatch_request\r\n    return self.view_functions[rule.endpoint](**req.view_args)\r\n  File \"/home/mflamant/Documents/bot/CiscoSparkPython/testbotforgithub/main.py\", line 44, in Main\r\n    bot.isRunnable()\r\n  File \"/home/mflamant/Documents/bot/CiscoSparkPython/testbotforgithub/utils/Compute.py\", line 48, in isRunnable\r\n    self.spark(message[0], message[1])\r\n  File \"/home/mflamant/Documents/bot/CiscoSparkPython/testbotforgithub/testbotforgithub.py\", line 33, in spark\r\n    return self.answer(details.roomId, markdown=self.gitTest(details))\r\n  File \"/home/mflamant/Documents/bot/CiscoSparkPython/testbotforgithub/testbotforgithub.py\", line 48, in gitTest\r\n    self.answer(details.roomId, markdown=org.name)\r\n  File \"/usr/local/lib/python2.7/dist-packages/PyGithub-1.35-py2.7.egg/github/Organization.py\", line 191, in name\r\n    self._completeIfNotSet(self._name)\r\n  File \"/usr/local/lib/python2.7/dist-packages/PyGithub-1.35-py2.7.egg/github/GithubObject.py\", line 251, in _completeIfNotSet\r\n    self._completeIfNeeded()\r\n  File \"/usr/local/lib/python2.7/dist-packages/PyGithub-1.35-py2.7.egg/github/GithubObject.py\", line 255, in _completeIfNeeded\r\n    self.__complete()\r\n  File \"/usr/local/lib/python2.7/dist-packages/PyGithub-1.35-py2.7.egg/github/GithubObject.py\", line 260, in __complete\r\n    self._url.value\r\n  File \"/usr/local/lib/python2.7/dist-packages/PyGithub-1.35-py2.7.egg/github/Requester.py\", line 172, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, cnx))\r\n  File \"/usr/local/lib/python2.7/dist-packages/PyGithub-1.35-py2.7.egg/github/Requester.py\", line 213, in requestJson\r\n    return self.__requestEncode(cnx, verb, url, parameters, headers, input, encode)\r\n  File \"/usr/local/lib/python2.7/dist-packages/PyGithub-1.35-py2.7.egg/github/Requester.py\", line 243, in __requestEncode\r\n    url = self.__makeAbsoluteUrl(url)\r\n  File \"/usr/local/lib/python2.7/dist-packages/PyGithub-1.35-py2.7.egg/github/Requester.py\", line 304, in __makeAbsoluteUrl\r\n    if url.startswith(\"/\"):\r\nAttributeError: 'NoneType' object has no attribute 'startswith'\r\n```\r\nHave you any idea, I think it because of the base_url, but I have to use it if not I can't get my informations..."}}, {"doc": {"_id": 645, "title": "Working with PullRequestReview", "content": "Although GitHub API v3 supports it: https://developer.github.com/v3/pulls/reviews/#submit-a-pull-request-review it seems the library does not provide functions to create/update/delete PullRequestReview (only list those).\r\n"}}, {"doc": {"_id": 644, "title": "Remove broken downloads badge", "content": "See https://github.com/badges/shields/issues/716"}}, {"doc": {"_id": 643, "title": "Add Python 3.6", "content": ""}}, {"doc": {"_id": 642, "title": "Need to update the protected branch  to allow a team to have push access", "content": "I have a protected branch which has no push access to anyone. I want to update this to have a team with push access to this branch. I want to know the function name to be called to accomplish this. "}}, {"doc": {"_id": 641, "title": "push project to github", "content": "hi every one\r\nhow to push a project from local to github repository using pygithub library ?\r\nis there any sample code ?"}}, {"doc": {"_id": 640, "title": "Deleting labels stops after 30 labels (pagination issue?)", "content": "I'm deleting all labels from a repo (it is an empty test repo, no code, no issues, no pull requests, just with labels).\r\n\r\nHere is how I do it:\r\n\r\n```python\r\ng = github.Github(token)\r\nrepo = g.get_user().get_repo('myrepo')\r\n\r\nfor label in self.repo.get_labels():\r\n    count += 1\r\n    log.info('deleting label %s (%d)', label.name, count)\r\n    label.delete()\r\n```\r\n\r\nThe removal stops after 30 lables have been deleted:\r\n\r\n```\r\npython3 delete_my_labels.py\r\n\r\nINFO:authorized to github as user \"mloskot\"\r\nINFO:rate limit=5000, remaining=4925\r\nINFO:connected to repository \"mloskot/myrepo\"\r\nINFO:deleting label R:wontfix (1)\r\nINFO:deleting label R:worksforme (2)\r\nINFO:deleting label S:blocker (3)\r\nINFO:deleting label S:critical (4)\r\n...\r\nINFO:deleting label V:1.5.1 (29)\r\nINFO:deleting label V:1.5.2 (30)\r\n```\r\n\r\nThen, I have to re-run the script to delete the remaining labels:\r\n\r\n```\r\npython3 delete_my_labels.py\r\nINFO:authorized to github as user \"mloskot\"\r\nINFO:rate limit=5000, remaining=4881\r\nINFO:connected to repository \"mloskot/myrepo\"\r\nINFO:deleting label V:1.5.3 (1)\r\nINFO:deleting label V:1.6.0 (2)\r\nINFO:deleting label V:1.6.1 (3)\r\n```\r\n\r\nIs it possibly `DELETE` action vs pagination issue?\r\n\r\n\r\nIf I remove the `label.delete()` step and just print label names:\r\n\r\n```python\r\ng = github.Github(token)\r\nrepo = g.get_user().get_repo('myrepo')\r\n\r\nfor label in self.repo.get_labels():\r\n    count += 1\r\n    log.info('deleting label %s (%d)', label.name, count)\r\n    label.delete()\r\n```\r\n\r\nall labels are printed:\r\n\r\n```\r\nINFO:authorized to github as user \"mloskot\"\r\nINFO:rate limit=5000, remaining=4938\r\nINFO:connected to repository \"mloskot/myrepo\"\r\nINFO:deleting label R:wontfix (1)\r\nINFO:deleting label R:worksforme (2)\r\nINFO:deleting label S:blocker (3)\r\nINFO:deleting label S:critical (4)\r\n...\r\nINFO:deleting label V:1.5.1 (29)\r\nINFO:deleting label V:1.5.2 (30)\r\nINFO:deleting label V:1.5.3 (31)\r\nINFO:deleting label V:1.6.0 (32)\r\nINFO:deleting label V:1.6.1 (33)\r\n```\r\n"}}, {"doc": {"_id": 639, "title": "Support for maintainer_can_modify arg with create_pull ", "content": "As defined in the github API, there is the ability to permit maintainer to modify the head branch for the PR: https://developer.github.com/v3/pulls/#create-a-pull-request\r\n\r\nCurrently, I don't see this defined:\r\nhttps://github.com/PyGithub/PyGithub/blob/3437a7030f02a1648290db581621936eb5771b69/github/Repository.py#L983"}}, {"doc": {"_id": 638, "title": "ENH: Added role parameter to Team.add_membership method", "content": "## Change Overview\r\nAdded an argument to the `Team.add_membership` method to for the team role, per https://developer.github.com/v3/orgs/teams/#add-or-update-team-membership.\r\n\r\n### New Method Behavior\r\n* Default value for `role` is `github.GithubObject.NotSet`\r\n* If no role is specified, default role permission will be `member`\r\n* Added two assert statements within method:\r\n  * to check if role is an instance of type `string` or `unicode`\r\n  * to check if role is a subset of `['member', 'maintainer']`\r\n\r\n### Test Cases\r\n* Test case that adds membership to a team and specifies `role` as a `maintainer`\r\n* Test case to raise `AssertionError` when the `role` argument is not either `member` or `maintainer`\r\n\r\n### Related Issues/PRs\r\n* Closes #616 \r\n* Builds on test-case from PR #637\r\n* Also resolves #303 \r\n\r\n### Impacted Modules\r\n* `github.Team.py`\r\n* `github/tests/ReplayData/Team.testMembers.txt`\r\n* `github/tests/Team.py`\r\n"}}, {"doc": {"_id": 637, "title": "TST: add_membership testcase", "content": "Test case for the `Team.add_membership` method for #303."}}, {"doc": {"_id": 636, "title": "A humble project to collect repos metrics", "content": "Hello! I have a small project that gathers metrics for repos on an organization, all using PyGithub.\r\nIt's under https://github.com/gomesfernanda/some-github-metrics\r\n\r\nIf it's pertinent, it could be on the documentation page under Projects using PyGithub\r\n\r\nThanks!"}}, {"doc": {"_id": 635, "title": "Add support for getting and replacing topics on a repository", "content": "Fixes #634\r\n\r\nI added the committed code and tested it by setting up a new repository and using an existing one\r\nThe get was tested by creating a github login and setting up a repository object.  I then used the get_topics function to return a list of existing topics I had created manually.  I did get back the topics that were already added.  I also used get_topics on a repository that had no topics created and it does return an empty list.\r\n\r\nTesting the replace_topics I simply created a list with a few entries and also an empty list.  Both performed as expected."}}, {"doc": {"_id": 634, "title": "Add support for getting and replacing topics on a repository", "content": "Topics are a fairly new feature within Github.  Currently this functionality is provided in the API in a beta mode.  We have a need to use these to add attributes and then consume them for automation.  Hopefully this helps others.\r\n\r\n\r\nAPI Documentation:\r\n[List topics in a repo](https://developer.github.com/v3/repos/#list-all-topics-for-a-repository)\r\n[Replace topics in a repo](https://developer.github.com/v3/repos/#replace-all-topics-for-a-repository)\r\n\r\nExamples of use:\r\n```python\r\n# Get list of topics from a repository    \r\ntopics = repo_obj.get_topics()\r\n\r\n# Replace current (if there are any) topics with list\r\nrepo_obj.replace_topics(['base', 'personal', 'playground'])\r\n```"}}, {"doc": {"_id": 633, "title": "Fix GithubIntegration in Python3", "content": "In Python2, `jwt.encode()` returns a `str` object, and in python3 it returns a `bytes` object.\r\n\r\nThis fix simply performs a `.decode('utf-8')` on the bytes object in Python3 (as described in https://github.com/PyGithub/PyGithub/issues/588). This should also address https://github.com/PyGithub/PyGithub/issues/627."}}, {"doc": {"_id": 632, "title": "Add support for changing PR head commit", "content": "Signed-off-by: Thibault Jamet <tjamet@users.noreply.github.com>"}}, {"doc": {"_id": 631, "title": "GitHub pagination issue with large PRs", "content": "NOTE: In my case this is particular to comments, but I haven't ruled out it's not an issue with their other paginated APIs.\r\n\r\nNOTE: This seems to have been a series of issues on the github back-end but I'm reporting here to warn others if this issue.  \r\n\r\nIn March of this year I noticed that in large PRs, the correct total number of comments were returned, but often many of them were duplicates.  So for example instead of getting back A, B, C, D, you'd get A, B, A, C.  Several months later this seems to have been fixed, however now the issue is that it's not returning all the comments when comparing to the total reported by the UI.  Here are a few examples:\r\n\r\n```python\r\nrepo = gh.get_repo('projecttacoma/bonnie')\r\npull = repo.get_pull(567)\r\npull.get_comments()\r\n```\r\nthis returns 434/448 comments.\r\n\r\nInterestingly this one is empty:\r\n```python\r\nrepo = gh.get_repo('alistairjcbrown/mock-repo')\r\npull = repo.get_pull(7)\r\npull.get_comments()\r\n```\r\n\r\nIt also happens in our private repository.  If anyone finds some more examples or insight please append to this issue."}}, {"doc": {"_id": 630, "title": "Added Issue.as_pull_request() and PullReqest.as_issue()", "content": "As reported in #572, there's no straightforward way to convert from `github.Issue.Issue` to `github.PullRequest.PullRequest` (when it is actually a pull request), and vice versa.\r\n\r\nA workaround is introduced there, but that is ugly and may be confusing for readers.\r\n\r\n```python\r\n>>> issue.repository.get_pull(issue.number)\r\n```\r\n\r\nTo fix this, I added `Issue.as_pull_request()` and `PullReqest.as_issue()` methods to do this.\r\nInternally it calls same api as the workaround does, but way clearer.\r\n\r\n```python\r\n>>> issue.as_pull_request()\r\n```\r\n"}}, {"doc": {"_id": 629, "title": "wrong 'last-modified'", "content": "the 'last-modified' of a file should be when the file was last updated not when the whole repo was updated"}}, {"doc": {"_id": 628, "title": "Branch protection update; due to github API v3 change.", "content": "Due to the recent Github API update [,](https://developer.github.com/changes/2017-09-06-protected-branches-preview-end/). Utilization of the protected branch functionality of loki has been deprecated and consequently broken since Sept 6th.\r\n\r\nI have updated all references to the obsolete branch to reflect the official API (v3), and updated the calls to reflect the required data for GET and PUT."}}, {"doc": {"_id": 627, "title": "pyjwt causing issues with GithubIntegration", "content": "I encountered this issue when using the GithubIntegration class:\r\n\r\n    import github\r\n    app_id = aaaa\r\n    private_key = open('key.pem').read()\r\n    installation_id = bbbbb\r\n    integration = github.GithubIntegration(app_id, private_key)\r\n    token = integration.get_access_token(installation_id)\r\n    Traceback (most recent call last):\r\n      File \"<stdin>\", line 1, in <module>\r\n      File \"/home/eddie/.local/lib/python3.6/site-packages/github/MainClass.py\", line 692, in get_access_token\r\n        data=response_text\r\n        github.GithubException.GithubException: 401 {\"message\":\"Invalid credentials\",\"documentation_url\":\"https://developer.github.com/v3\"}\r\n\r\nIn the GithubIntegration.create_jwt() function line 636:\r\nReplaced:\r\n\r\n    return jwt.encode(\r\n                payload,\r\n                key=self.private_key,\r\n                algorithm=\"RS256\"\r\n            )\r\nWith:\r\n\r\n    from jose import jwt as JWT                                                                 \r\n    return JWT.encode(payload, self.private_key, 'RS256')\r\n\r\nTrying again...\r\n\r\n    import github\r\n    app_id = aaaa\r\n    private_key = open('Downloads/test.pem').read()\r\n    installation_id = bbbbb\r\n    integration = github.GithubIntegration(app_id, private_key)\r\n    token = integration.get_access_token(installation_id)\r\n    token\r\n    InstallationAuthorization(expires_at=2017-09-12 17:11:32)\r\n\r\nNot sure what the difference is between the pyjwt and python-jose implementations are, but pyjwt doesn't seem to work for me.\r\n\r\nLooks like python-jose was the original library used for jwt tokens and that was switched to pyjwt in issue #542 on March 27th."}}, {"doc": {"_id": 626, "title": "Fork a repository into Github account ", "content": "I am trying to fork a repo using below code : \r\n\r\n```\r\nfrom github import Github\r\ng = Github(\"usr_name\", \"psw\")\r\ngithub_user = g.get_user()\r\nrepo = \"https://github.com/gregof/abc\"\r\nmyfork = github_user.create_fork(repo)\r\n```\r\n\r\nHowever I am getting following errors , looks like I am missing something. \r\n```\r\nTraceback (most recent call last):\r\n  File \"f.py\", line 5, in <module>\r\n    myfork = github_user.create_fork(repo)\r\n  File \"/usr/lib/python2.7/dist-packages/github/AuthenticatedUser.py\", line 446, in create_fork\r\n    assert isinstance(repo, github.Repository.Repository), repo\r\nAssertionError: https://github.com/gregof/abc\r\n\r\n```\r\nPlease provide comments on this .Thanks!"}}, {"doc": {"_id": 625, "title": "Added target_commitish option to Repository.create_git_release()", "content": "## Main purpose\r\n\r\nSupport `target_commitish` option on creating release\r\nhttps://developer.github.com/v3/repos/releases/#create-a-release\r\n\r\n## Changed\r\n\r\n- 8414a2c: Added `is_draft` and `is_prerelease` property to `GitRelease`\r\n- da9a285: Added `target_commitish` option to `Repository.create_git_release()`\r\n- 0217b25: Added test for `Repository.create_git_release()`\r\n\r\n## Note\r\n\r\nThe test replay data is recorded on [my repository](https://github.com/tmshn/PyGithub/releases), then replaced the repository owner's name from \"tmshn\" to \"jacquev6\" manually.\r\n\r\n"}}, {"doc": {"_id": 624, "title": "There are missing parameters from repo creation", "content": "The following parameters are missing from the create_repo methods:\r\n\r\n- has_projects\r\n- license_template\r\n- allow_squash_merge\r\n- allow_merge_commit\r\n- allow_rebase_merge\r\n\r\nAlso the organisation create_repo method accepts a Team object for the team_id, this should already be an id (int, long) not an object"}}, {"doc": {"_id": 623, "title": "Added missing parameters for repo creation", "content": "There were some missing parameters from the repo_create method\r\n\r\nThe missing ones are the following:\r\n\r\n- has_projects\r\n- license_template\r\n- allow_squash_merge\r\n- allow_merge_commit\r\n- allow_rebase_merge\r\n\r\nAlso the team_id parameter should be an id not a Team object."}}, {"doc": {"_id": 622, "title": "Contributions does not work", "content": "Contributions for named_use does not work for past year. Have this code in a try loop:\r\n\r\n`print (\"G-COMMITS IN LAST YEAR: \" + str(user.contributions))`\r\n\r\nwhere\r\n\r\n```\r\ngitTable = (data[i]['fields']['Github']).rsplit('/', 1)[-1]\r\n            print(\"GITHUB ID: \" + gitTable)\r\n            user = git.get_user(gitTable)\r\n```\r\n\r\nand it is printing the name properly, as well as getting email and followers from the name properly.\r\n\r\nIs this an issue of contributions simply not working?"}}, {"doc": {"_id": 621, "title": "Fix creating/updating binary files on Python 3", "content": "There is a bit of logic for Python 2 that detects if you're uploading string or bytes, but this was missing for Python 3."}}, {"doc": {"_id": 620, "title": "Implement affiliation parameter with get_collaborators in Repository.py", "content": "From https://developer.github.com/v3/repos/collaborators/#collaborators we see that the api call to \r\n`GET /repos/:owner/:repo/collaborators`\r\n takes a parameter \"affiliation\" which accepts three values \"outside\", \"direct\" and \"all\" and defaults to \"all.\"\r\n\r\n"}}, {"doc": {"_id": 619, "title": "github's api preview \"loki\" ending", "content": "https://developer.github.com/changes/2017-06-16-loki-preview-ending-soon/\r\n\r\nthis code needs to be fixed - https://github.com/PyGithub/PyGithub/blob/4c64b28920c8eea834e31b18e2aef6b08d1a94a0/github/Repository.py#L1120-L1132\r\nhttps://github.com/PyGithub/PyGithub/blob/4c64b28920c8eea834e31b18e2aef6b08d1a94a0/github/Repository.py#L2210-L2240\r\n\r\nhttps://github.com/PyGithub/PyGithub/search?utf8=%E2%9C%93&q=loki&type=\r\n\r\nIf i can get to the work, i will handle this. figured i would bring it up."}}, {"doc": {"_id": 618, "title": "Updated references in introduction.rst", "content": "Updated references in introduction.rst\r\nReported in #617 "}}, {"doc": {"_id": 617, "title": "Documentation page link not updated", "content": "Don't know, if it's good place to post it, but two links from [this](http://pygithub.readthedocs.io/en/latest/introduction.html#what-next)  (\"What next?\") does not work."}}, {"doc": {"_id": 616, "title": "Team add_membership should take parameter for role", "content": "The github api allows the use of this call to specify the role of the new member, https://developer.github.com/v3/orgs/teams/#add-or-update-team-membership. \r\n\r\nTeam.add_membership should allow the same."}}, {"doc": {"_id": 615, "title": "adding test file", "content": "we just tested stuff"}}, {"doc": {"_id": 614, "title": "Handle spaces and other special characters in /contents API", "content": "Fixes #613.\r\n\r\nThe only breakage is if someone is already using `urllib.quote` to work around this bug. In this case, the path will be encoded twice, resulting in an incorrect path."}}, {"doc": {"_id": 613, "title": "Cannot use get_file_contents with paths containing spaces", "content": "The following example fails because the path contains a space:\r\n\r\n```python\r\nimport github\r\ngithub.Github().get_repo('Microsoft/dotnet') \\\r\n      .get_file_contents('Documentation/compatibility/! Template.md')\r\n```\r\n\r\n```\r\n>>> import github\r\n>>> github.Github().get_repo('Microsoft/dotnet').get_file_contents('Documentation/compatibility/! Template.md')\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/usr/lib/python3.6/site-packages/github/Repository.py\", line 1256, in get_file_contents\r\n    parameters=url_parameters\r\n  File \"/usr/lib/python3.6/site-packages/github/Requester.py\", line 172, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, cnx))\r\n  File \"/usr/lib/python3.6/site-packages/github/Requester.py\", line 213, in requestJson\r\n    return self.__requestEncode(cnx, verb, url, parameters, headers, input, encode)\r\n  File \"/usr/lib/python3.6/site-packages/github/Requester.py\", line 252, in __requestEncode\r\n    status, responseHeaders, output = self.__requestRaw(cnx, verb, url, requestHeaders, encoded_input)\r\n  File \"/usr/lib/python3.6/site-packages/github/Requester.py\", line 283, in __requestRaw\r\n    output = response.read()\r\n  File \"/usr/lib/python3.6/http/client.py\", line 459, in read\r\n    s = self.fp.read()\r\n  File \"/usr/lib/python3.6/socket.py\", line 586, in readinto\r\n    return self._sock.recv_into(b)\r\n  File \"/usr/lib/python3.6/ssl.py\", line 1002, in recv_into\r\n    return self.read(nbytes, buffer)\r\n  File \"/usr/lib/python3.6/ssl.py\", line 865, in read\r\n    return self._sslobj.read(len, buffer)\r\n  File \"/usr/lib/python3.6/ssl.py\", line 625, in read\r\n    v = self._sslobj.read(len, buffer)\r\nConnectionResetError: [Errno 104] Connection reset by peer\r\n```\r\n\r\nIf the path is first `quote`d, then it works:\r\n\r\n```python\r\nimport github\r\nimport urllib.parse\r\ngithub.Github().get_repo('Microsoft/dotnet') \\\r\n      .get_file_contents(urllib.parse.quote('Documentation/compatibility/! Template.md'))\r\n```"}}, {"doc": {"_id": 612, "title": "1.35 release is not tagged", "content": "I installed PyGithub from `pip` and noticed it was revision 1.35.  I went to look at GitHub tags and noticed this project has not tagged the 1.35 release."}}, {"doc": {"_id": 611, "title": "Add ability to set visibility of organization team", "content": "When creating or managing a team, the only privacy level is \"secret\". The `Organization.create_team` API should be extended to accept `privacy` of value either `secret` (default) or `closed`.\r\n\r\nRelevant API spec: https://developer.github.com/v3/orgs/teams/#create-team"}}, {"doc": {"_id": 610, "title": "can we set branch permission ?", "content": "Hi,\r\n\r\nI was checking into the git api and pygithub on any method that we can set the branch permission with readonly where no code can be push or merged in specific branch. eg: locking master branch using pygithub.\r\n\r\nthanks"}}, {"doc": {"_id": 609, "title": "Add method to get latest release of a repository", "content": "This is a duplicate/merge of #333 and #496, both of which seem to have be abandoned. I've simply taken their code and merged them. If there's anything else that needs doing (assuming that Travis passes now) just let me know because I'd really like to get this into a release."}}, {"doc": {"_id": 608, "title": "Implement __hash__() and __eq__() on NamedUser", "content": "I have a case where I'm processing the list of reviewers on a Pull Request. When the same person does two reviews the `NamedUser` return from the `PullRequest.get_reviews()`, while they have the same `login`, `id`, and `name`, don't have the same hash value. \r\n\r\nIf you implement `__hash__()` the python docs strongly recommend implementing `__eq__()` based upon the same values. \r\n\r\nIt would be nice to have the python build in functions be able to construct the unique list of reviewers. "}}, {"doc": {"_id": 607, "title": "[WP] Add projects support", "content": "Hi,\r\nwe need projects support. I started adding it. So far you can get them, but do nothing on them. I am continue working on this PR.\r\n\r\nWork in progress."}}, {"doc": {"_id": 606, "title": "Working with projects?", "content": "Hi,\r\nis there any way to list projects, its columns, add/remove stuff to the columns etc? I kind of can't find that..."}}, {"doc": {"_id": 605, "title": "Add method to set permission level of team collaborator on Organization repository", "content": "There is currently no method in PyGithub to set the permission level of a team collaborator on a repository.\r\n\r\nAt a minimum, the method `github.Team.Team.add_to_repos` should take an optional parameter permission=str to set the permission level of a collaborator. The current default appears to be push. \r\n\r\nBased on the GitHub API, reusing the same method to update repo permissions would be correct.\r\n\r\nRelevent API reference: https://developer.github.com/v3/orgs/teams/#add-or-update-team-repository"}}, {"doc": {"_id": 604, "title": "Add method to set permission level of an organization repository collaborator", "content": "There is currently no method in PyGithub to set the permission level of a collaborator on a repository. \r\n\r\nAt a minimum, the method `github.Repository.Repository.add_to_collaborators` should take an optional parameter `permission=str` to set the permission level of a collaborator. The current default appears to be `push`.\r\n\r\nA new method to update a collaborators permission would also be helpful.\r\n\r\nRelevent API reference: https://developer.github.com/v3/repos/collaborators/#add-user-as-a-collaborator"}}, {"doc": {"_id": 603, "title": "Assertion Error", "content": "Code:\r\n```\r\n from github import *\r\n import base64\r\n pw = 'base64password='\r\n dc = str(base64.b64decode(pw))\r\n dc = dc.replace('b', '')\r\n dc = dc.replace(\"'\", \"\")\r\n login = Github(\"batuhanosmantr\", dc)\r\n y = \"https://github.com/wp-plugins/yith-woocommerce-popup\"\r\n x = AuthenticatedUser.AuthenticatedUser.create_fork(y, Repository.Repository)\r\n\r\n```\r\nError Code:\r\n```\r\nTraceback (most recent call last):\r\n  File \"a.py\", line 9, in <module>\r\n    x = AuthenticatedUser.AuthenticatedUser.create_fork(y, Repository.Repository)\r\n  File \"/usr/lib/python3.6/site-packages/github/AuthenticatedUser.py\", line 452, in create_fork\r\n    assert isinstance(repo, github.Repository.Repository), repo\r\nAssertionError: <class 'github.Repository.Repository'>\r\n\r\n```"}}, {"doc": {"_id": 602, "title": "added role parameter to add_membership function", "content": "The add_membership function did not accept the optional role parameter, to add a member as a team maintainer.  I added a keyword parameter called \"role\" that will optionally accept a string value for the desired role.  "}}, {"doc": {"_id": 601, "title": "inactive links on documenation page", "content": "On [documentation page](http://pygithub.readthedocs.io/en/latest/introduction.html#what-next) links in what-next block lead to 404 page."}}, {"doc": {"_id": 600, "title": "Wrong value for issue.closed_at", "content": "**Goal:** print issues of a repo, id and state.\r\n\r\n**Code:**\r\n\r\n```\r\nfrom github import Github\r\ng = Github(\"xxx\", \"yyyy\")\r\n\r\nfor repo in g.get_organization(\"PyGithub\").get_repos():\r\n    print (repo.name)\r\n    for issue in repo.get_issues():\r\n        data = [repo.name , issue.id, issue.title, issue.state, issue.created_at, issue.closed_at]\r\n        print (issue.id, issue.closed_at)\r\n```\r\n\r\n**Output:**\r\n(for all issues in this repo!)\r\n\r\n```\r\n93819916 None\r\n91127791 None\r\n90858230 None\r\n\r\n```\r\n**Expected output:** open etc. for open issues."}}, {"doc": {"_id": 599, "title": "Fix encoded_input null assignment to produce valid json format", "content": "Would like to set `encoded_input = None` instead of 'null' in `Requestor.py`.  This is more consistent with python NoneType usage, and produces the correct json encoded output for the http request body.  \r\n\r\nThis PR:\r\n- updates the assignment of `encoded_input` to `NoneType`\r\n- updates checks in `Framework.py` to allow for a NoneType input var\r\n- Fixes all tests for this change, largely by updating the data files from null to None, which is commonly used in test asserts.  \r\n\r\n***Additional details on the NoneType fix***\r\nExample output in my application:\r\n```\r\n>>> github_client =  github.Github(login_or_token=pat, base_url=ghe_url)\r\n>>> org = github_client.get_organization(org_name)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"github/MainClass.py\", line 198, in get_organization\r\n    \"/orgs/\" + login\r\n  File \"github/Requester.py\", line 172, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, cnx))\r\n  File \"github/Requester.py\", line 180, in __check\r\n    raise self.__createException(status, responseHeaders, output)\r\ngithub.GithubException.GithubException: 400 {'data': ****retracted****}\r\n```\r\n\r\nThe root cause of my 400 error is somewhat related to a proxy in my enterprise application checking the JSON-encoded form.  The valid json type is null, not 'null'.  \r\n\r\nSince `Requestor.py` actually uses the output of `json.dumps(encoded_input)` the default value should be NoneType, because string 'null' actually produces an extra set of quotes, e.g:\r\n\r\n```\r\n>>> out = json.dumps('null')\r\n>>> print out\r\n\"null\"\r\n>>> print out[0]\r\n\"\r\n>>> out2 = json.dumps(None)\r\n>>> print out2\r\nnull\r\n>>> print out2[0]\r\nn\r\n```"}}, {"doc": {"_id": 598, "title": "add methods to create and delete reviewer requests", "content": "see #597 and #538 \r\n\r\nI'm not sure of the best way to add tests for this, because I won't have permissions to add and remove reviewers for the main repository."}}, {"doc": {"_id": 597, "title": "Add support for creating Review Requests", "content": "I just saw the update in #538 that added support for the GET methods for review requests, but it looks like the API for review requests is out of beta now, and the [POST methods are now available](https://developer.github.com/v3/pulls/review_requests/#create-a-review-request).  It would be awesome to be able to do these through the Python API."}}, {"doc": {"_id": 596, "title": "fix: totalCount always returns None", "content": "#487\r\n#415"}}, {"doc": {"_id": 595, "title": "Accessing commit details?", "content": "Hi,\r\n\r\nCan anyone provide an example of how to access Commit details for specific repo's.\r\n\r\nThanks,\r\nPran"}}, {"doc": {"_id": 594, "title": "API for Pull Request Checks?", "content": "I'm trying to find a PR that has a **specific** failing check.\r\n\r\nIs there a way to get information of the checks for a Pull Request?\r\n\r\nHere is a screenshot:\r\n![pr_check](https://user-images.githubusercontent.com/847072/28041211-d2edfcd0-65c8-11e7-8aaf-fa6463a0f5f6.jpg)\r\n\r\nI didn't see anything obvious from the PR object:\r\n```\r\ng = Github(\"user\", \"password\")\r\nuser = g.get_user()\r\norg = g.get_organization('my_org')\r\nrepo = org.get_repo('myrepo')\r\nfor pr in repo.get_pulls():\r\n    print(pr)\r\n    for el in dir(pr):\r\n        print(el)\r\n    sys.exit()\r\n```"}}, {"doc": {"_id": 593, "title": "fixing date format for milestone creation", "content": "This change fixes the faulty time format in milestone creation."}}, {"doc": {"_id": 592, "title": "Remove Python 2.6 support?", "content": "We are still testing against Python 2.6: any objections to remove formal support for it?"}}, {"doc": {"_id": 591, "title": "Support highlighting-code-search-results?", "content": "https://developer.github.com/v3/search/#highlighting-code-search-results-1"}}, {"doc": {"_id": 590, "title": "Get organization from the team", "content": "Fixes https://github.com/PyGithub/PyGithub/issues/434"}}, {"doc": {"_id": 589, "title": "ssl.SSLError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:661)", "content": "Get SSL error for the example in README.\r\n\r\n```\r\nC:\\Python27\\python.exe J:\\github_repos\\aaa\\aaa.py\r\nTraceback (most recent call last):\r\n  File \"J:\\github_repos\\aaa\\aaa.py\", line 7, in <module>\r\n    for repo in g.get_user().get_repos():\r\n  File \"C:\\Python27\\lib\\site-packages\\github\\PaginatedList.py\", line 49, in __iter__\r\n    newElements = self._grow()\r\n  File \"C:\\Python27\\lib\\site-packages\\github\\PaginatedList.py\", line 61, in _grow\r\n    newElements = self._fetchNextPage()\r\n  File \"C:\\Python27\\lib\\site-packages\\github\\PaginatedList.py\", line 163, in _fetchNextPage\r\n    headers=self.__headers\r\n  File \"C:\\Python27\\lib\\site-packages\\github\\Requester.py\", line 172, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, cnx))\r\n  File \"C:\\Python27\\lib\\site-packages\\github\\Requester.py\", line 213, in requestJson\r\n    return self.__requestEncode(cnx, verb, url, parameters, headers, input, encode)\r\n  File \"C:\\Python27\\lib\\site-packages\\github\\Requester.py\", line 252, in __requestEncode\r\n    status, responseHeaders, output = self.__requestRaw(cnx, verb, url, requestHeaders, encoded_input)\r\n  File \"C:\\Python27\\lib\\site-packages\\github\\Requester.py\", line 277, in __requestRaw\r\n    requestHeaders\r\n  File \"C:\\Python27\\lib\\httplib.py\", line 1042, in request\r\n    self._send_request(method, url, body, headers)\r\n  File \"C:\\Python27\\lib\\httplib.py\", line 1082, in _send_request\r\n    self.endheaders(body)\r\n  File \"C:\\Python27\\lib\\httplib.py\", line 1038, in endheaders\r\n    self._send_output(message_body)\r\n  File \"C:\\Python27\\lib\\httplib.py\", line 882, in _send_output\r\n    self.send(msg)\r\n  File \"C:\\Python27\\lib\\httplib.py\", line 844, in send\r\n    self.connect()\r\n  File \"C:\\Python27\\lib\\httplib.py\", line 1263, in connect\r\n    server_hostname=server_hostname)\r\n  File \"C:\\Python27\\lib\\ssl.py\", line 363, in wrap_socket\r\n    _context=self)\r\n  File \"C:\\Python27\\lib\\ssl.py\", line 611, in __init__\r\n    self.do_handshake()\r\n  File \"C:\\Python27\\lib\\ssl.py\", line 840, in do_handshake\r\n    self._sslobj.do_handshake()\r\nssl.SSLError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:661)\r\n\r\nProcess finished with exit code 1\r\n```"}}, {"doc": {"_id": 588, "title": "Integration support does not work in python 3", "content": "The token (?) created by the jwt library is a `bytes` object in python 3 so instead of the header being `Authorization: Bearer kajshdkshkshkhd` it's `Authorization: Bearer b'kajshdkshkshkhd'`.\r\n\r\nNeed to update the function like so:\r\n\r\n    def create_jwt(self):\r\n        \"\"\"\r\n        Creates a signed JWT, valid for 60 seconds.\r\n        :return:\r\n        \"\"\"\r\n        now = int(time.time())\r\n        payload = {\r\n            \"iat\": now,\r\n            \"exp\": now + 60,\r\n            \"iss\": self.integration_id\r\n        }\r\n        encrypted = jwt.encode(\r\n            payload,\r\n            key=self.private_key,\r\n            algorithm=\"RS256\"\r\n        )\r\n        \r\n        if atLeastPython3:\r\n            encrypted = encrypted.decode('utf-8')\r\n            \r\n        return encrypted\r\n\r\nI'd make a pull request, but I'm rather confused by how the tests are supposed to be written. To have deterministic results you'd need to mock `time.time()` and you don't seem to have it as part of your test dependencies (not in stdlib in python 2)."}}, {"doc": {"_id": 587, "title": "Add closed_at property to GET /repos/:owner/:repo/milestones", "content": "As a user who wants to see all closed milestones, I expect to see the closing date and time for each milestone (as `closed_at`  response to [GET /repos/:owner/:repo/milestones](https://developer.github.com/v3/issues/milestones/#list-milestones-for-a-repository)), so I can easier identify all closed milestones for a repository."}}, {"doc": {"_id": 586, "title": "Add support for advanced branch protection APIs", "content": "It seems like the following APIs exist in github v3 (as beta?) but are not yet reflected in this library.\r\n\r\n- https://developer.github.com/v3/repos/branches/#get-pull-request-review-enforcement-of-protected-branch\r\n- https://developer.github.com/v3/repos/branches/#update-pull-request-review-enforcement-of-protected-branch\r\n- https://developer.github.com/v3/repos/branches/#get-admin-enforcement-of-protected-branch\r\n- https://developer.github.com/v3/repos/branches/#get-restrictions-of-protected-branch\r\n- and a few others....\r\n\r\nIt'd be great to have full support of this API (especially since it allows controlling PR reviews and how many are needed and by who)."}}, {"doc": {"_id": 585, "title": "Caching HTTP requests to Github", "content": "Hi Guys,\r\n\r\nI was wondering if there are means to have a cache for frequent HTTP requests to the Github API built in PyGithub. Otherwise I'll stick to a local cache server to help me out."}}, {"doc": {"_id": 584, "title": "Could I have an example of use of PyGithub", "content": ""}}, {"doc": {"_id": 583, "title": "Can't access corporate github with SSL", "content": "Our github is hosted on a server that causes a:\r\n`SSLError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:749)\r\n`\r\nError. \r\n\r\nThe api doesn't expose a way to not verify the ssl cert if I trust it. "}}, {"doc": {"_id": 582, "title": "Not an Issue", "content": "Hello!\r\nIts not an issue but rather a Thank You note for creating this Python Package.\r\n\r\n:)\r\nIt Helped me create [contributors.md](https://github.com/gabru-md/contributors.md)\r\n\r\n- gabru-md"}}, {"doc": {"_id": 581, "title": "Projects using PyGithub - gitsuggest", "content": "https://github.com/csurfer/gitsuggest : A tool to suggest github repositories based on the repositories you have shown interest in."}}, {"doc": {"_id": 580, "title": "Delete/restore branch associated with a pull request", "content": "GitHub Pull Request page provides a [Delete Branch] that invokes ..../pull/:number/cleanup\r\n\r\nNeed equivalent Pull Request methods to remove and/or restore the branch associated with the pull request"}}, {"doc": {"_id": 579, "title": "Implement `__len__` (and/or `__bool__`) on PaginatedList", "content": "From what I understand, there is no easy/efficient way to know if a PaginatedList is empty (and or to know the length of the list).\r\nThe best solution I have found is to try to access the first element and detect IndexError exceptions. This is what I have done in https://github.com/SylvainDe/CIthon/blob/master/cithon.py .\r\n(A better looking - yet potentially inefficient - way to do it would be to create a list out of the PaginatedList and call bool/len from that list).\r\n\r\nIt is quite usual for container-like object to behave as True-ish object if and only if they are non-empty. This can be done by implementing the `__bool__` special method (or even easier to implement `__len__` and let the Python magic happens).\r\n\r\nWould you reckon it would make sense and be possible to implement `__bool__` and/or `__len__` ? If that looks like a good idea, I do not mind trying to implement it myself if needed.\r\n\r\n\r\nPython References:\r\n\r\n- https://docs.python.org/3/reference/datamodel.html#object.__len__\r\n\r\n- https://docs.python.org/3/reference/datamodel.html#object.__bool__\r\n\r\n\r\nPyGithub References:\r\n\r\n- doc : http://pygithub.readthedocs.io/en/latest/utilities.html#github.PaginatedList.PaginatedList\r\n\r\n- code : https://github.com/PyGithub/PyGithub/blob/656e70e16d199232258d5ba0c3e9e126b1d7fa25/github/PaginatedList.py#L85"}}, {"doc": {"_id": 578, "title": "can you add Gitana to the list of projects using PyGitHub?", "content": "Gitana (https://github.com/SOM-Research/Gitana)  is an open source software that imports and digests the data of Git repositories, issue trackers, Q&A web-sites and Instant messaging services to a relational database in order to ease browsing and querying activities with standard SQL syntax and tools. Furthermore it also provides support to generate activity reports and perform complex network analysis.\r\n\r\nWe use PyGitHub to import GitHub issues and their related information (assignees, subscribers, etc.) to Gitana. In particular, PyGitHub is used by the GitHubQuerier (https://github.com/SOM-Research/Gitana/blob/master/importers/issue_tracker/github/querier_github.py)"}}, {"doc": {"_id": 577, "title": "Add \"since\" param to PR review comments get", "content": "Do you need tests for this?\r\nI couldn't find where this was being tested."}}, {"doc": {"_id": 576, "title": "Is there a way to get raw format of a ContentFile?", "content": "`ContentFile.content` returns the base64-encoded content from the API. The API also supports getting the [raw format of the file](https://developer.github.com/v3/repos/contents/).\r\n\r\n> These API methods let you retrieve the contents of files within a repository as Base64 encoded content. See [media types](https://developer.github.com/v3/repos/contents/#custom-media-types) for requesting the raw format or rendered HTML (when supported).\r\n\r\n> READMEs, files, and symlinks support the following custom media types:\r\n\r\n```\r\napplication/vnd.github.VERSION.raw\r\napplication/vnd.github.VERSION.html\r\n```\r\n\r\n> Use the .raw media type to retrieve the contents of the file.\r\n\r\nIs there any way to do this via the library today? If not, would you be open to adding support for it?\r\n\r\n"}}, {"doc": {"_id": 575, "title": "Can we support `ContentFile.download_url`?", "content": "`ContentFile`'s corresponding API response has `download_url`. See https://developer.github.com/v3/repos/contents/#get-contents. Can we add this to `ContentFile`? Compare http://pygithub.readthedocs.io/en/latest/github_objects/ContentFile.html"}}, {"doc": {"_id": 574, "title": "Add invite to organization", "content": "This requests exposes the API functionality for inviting a user to an organization, including a flag to set them as admin (\"owner\") on invite.\r\n\r\nIt includes the new method for Organization, unit tests and testing data fixtures.\r\n\r\n"}}, {"doc": {"_id": 573, "title": "Add invite_to_organization to Organization", "content": "There was no pre-existing functionality for sending an organizational invite. This patch adds that (+ copyright attributions) as well as tests and fixtures for the new method on Organization (Organization.invite_to_organization).\r\n\r\nThe method takes an instance of github.Github.NamedUser and an optional flag for 'admin' (since member is the default)."}}, {"doc": {"_id": 572, "title": "Is there a more direct way to get PullRequest from Issue?", "content": "Thanks for the awesome repo and work. It's made my life a lot easier.\r\n\r\nI'm writing a script to comment on all open PRs created by me in order to remind people to review them. It turns out the most direct way to list all my open PRs is to use the issue search API endpoint. [See discussion here](http://stackoverflow.com/a/43807803/553994).\r\n\r\nThis works great and is better than my original [roundabout way](http://stackoverflow.com/questions/17412809/how-to-get-my-pull-requests-from-github-api/43807803#comment74624202_17438627).\r\n\r\nUnfortunately, `Github.search_issues()` returns `Issue` and there's no easy way to get the associated `PullRequest` object. There's `Issue.pull_request`, but this returns an [`IssuePullRequest`](http://pygithub.readthedocs.io/en/latest/github_objects/IssuePullRequest.html#github.IssuePullRequest.IssuePullRequest) object which isn't helpful.\r\n\r\nMy current workaround is `Issue` -> `Repository` -> `PullRequest`.\r\n\r\n```python\r\nissue.repository.get_pull(issue.number)\r\n```\r\n\r\nIs there a better way to get the corresponding `PullRequest` from an `Issue`?"}}, {"doc": {"_id": 571, "title": "Marking notification as read from PyGithub is either missing or undocumented", "content": "It is possible to mark notifications as read in various ways through the API -- docs at https://developer.github.com/v3/activity/notifications/\r\n\r\nHowever in the docs at http://pygithub.readthedocs.io/en/latest/github_objects/Notification.html I see nothing about how to mark a notification as read. \r\n\r\nIf mark-as-read functionality exists I would expect to find it in https://github.com/PyGithub/PyGithub/blob/master/github/Notification.py or maybe in https://github.com/PyGithub/PyGithub/blob/master/github/NotificationSubject.py but I don't see it. "}}, {"doc": {"_id": 570, "title": "add read_only attribute to Deploy Keys", "content": ""}}, {"doc": {"_id": 569, "title": "Allow editing of base attribute for pull requests", "content": "Adds supports for updating the `base` of a Pull Request (docs here: https://developer.github.com/v3/pulls/#update-a-pull-request)"}}, {"doc": {"_id": 568, "title": "Set optional proxy per client object", "content": "Currently the only way to set a proxy in PyGithub is via an environment\r\nvariable, which means that the only way to use multiple proxies is\r\nrunning multiple processes.\r\n\r\nThis patch allows setting an HTTP proxy per `Github` object via an\r\noptional `http_proxy` argument, which will override the proxy set via\r\nenvironment variables."}}, {"doc": {"_id": 567, "title": "resolved spaces in directory name in path", "content": "as GitHub doesn't allow spaces in directory name GitHub API was raising an exception and hence those spaces are replaced by '-' character.\r\nRegular expression is used and lambda function to replace in all directory names is implemented"}}, {"doc": {"_id": 566, "title": "passing spaces in path string for creating a file raises an exception", "content": ""}}, {"doc": {"_id": 565, "title": "Add 'submitted at' to PullRequestReview", "content": "This field is not currently listed in the Github documentation at\r\nhttps://developer.github.com/v3/pulls/reviews/, but it's been included\r\nsince Github 2.9\r\n\r\n(I was first told about it in an email from Github support, who acknowledged that the documentation was missing the field. It even exists in the test data returned for the original PullRequestReview PR)"}}, {"doc": {"_id": 564, "title": "No HTTP status checks in statistics", "content": "For statistics such as `contributors` or `commit_activity`, there are no checks whether the API responded with 200. In a lot of cases, GitHub API responds with 202 as some statistics are computed asynchronously on demand [1]. Even if PyGithub does not perform waits, I would expect notification that I should retry after some time.\r\n\r\n[1] https://developer.github.com/v3/repos/statistics/#a-word-about-caching"}}, {"doc": {"_id": 563, "title": "What is the difference between forks and forks_count?", "content": "Hi, thanks for developing this!\r\n\r\nI was wondering what is the difference between `repo.forks` and `repo.forks_count` in `class github.Repository.Repository`? I tested them and they both seem to return the number of forks of repo..\r\n\r\nHere is an example of quick testing:\r\n\r\n```\r\ngh = Github(\"<user>\", \"<pass>\")\r\nfor repo in (gh.get_user()).get_repos():\r\n        print(repo.forks == repo.forks_count)\r\n```"}}, {"doc": {"_id": 562, "title": "Add NamedUser permissions attribute for Repository.get_collaborators()", "content": "permissions is valid as per https://developer.github.com/v3/repos/collaborators/#response"}}, {"doc": {"_id": 561, "title": "Bad link in Docstring - GitObject.py", "content": "https://github.com/PyGithub/PyGithub/blob/master/github/GitObject.py#L33 points to http://developer.github.com/v3/todo which no longer exist."}}, {"doc": {"_id": 560, "title": "Repository.get_tree_tree(sha, False) buggy", "content": "Passing `False` as the value for the `recursive` parameter in `Repository.get_git_tree()` causes the resulting URL to contain `?recursive=False`, which GitHub API treats as True. The only way to get a non-recursive tree is to not pass `recursive` at all. For that matter, passing `True` causes the resulting URL to contain `?recursive=True`, which under a strict interpretation of the API docs is also a bug (should be `?recursive=1`).\r\n\r\nFrom the console debugging logs (much omitted...):\r\n\r\n```\r\nGET https://git.MY_CORP.com/api/v3/repos/MY_USER/MY_REPO/git/trees/MY_SHA?recursive=False {'Authorization': 'token (oauth token removed)', 'User-Agent': 'PyGithub/Python'} null ==> 200 {'statu...\r\n```"}}, {"doc": {"_id": 559, "title": "ConnectionResetError: [WinError 10054] An existing connection was forcibly closed by the remote host", "content": "Traceback (most recent call last):\r\n  File \"C:/Users/moghya_s/Desktop/toGithub/test.py\", line 11, in <module>\r\n    test_upToGithub()\r\n  File \"C:/Users/moghya_s/Desktop/toGithub/test.py\", line 8, in test_upToGithub\r\n    user.cforceUpload('codeforcesUsername','codeforcesPassword')\r\n  File \"C:\\Users\\moghya_s\\Desktop\\toGithub\\upload\\uploader.py\", line 45, in cforceUpload\r\n    self.repo.create_file('/cforce/'+abc['contestId']+'/'+abc['problemName']+'/'+abc['id']+'.'+abc['ext'],'cforce solution for '+abc['problemName']+' with submissionId '+abc['id']+' is added.',abc['code'])\r\n  File \"C:\\Program Files\\Anaconda3\\lib\\site-packages\\github\\Repository.py\", line 1310, in create_file\r\n    input=put_parameters\r\n  File \"C:\\Program Files\\Anaconda3\\lib\\site-packages\\github\\Requester.py\", line 172, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, cnx))\r\n  File \"C:\\Program Files\\Anaconda3\\lib\\site-packages\\github\\Requester.py\", line 213, in requestJson\r\n    return self.__requestEncode(cnx, verb, url, parameters, headers, input, encode)\r\n  File \"C:\\Program Files\\Anaconda3\\lib\\site-packages\\github\\Requester.py\", line 252, in __requestEncode\r\n    status, responseHeaders, output = self.__requestRaw(cnx, verb, url, requestHeaders, encoded_input)\r\n  File \"C:\\Program Files\\Anaconda3\\lib\\site-packages\\github\\Requester.py\", line 283, in __requestRaw\r\n    output = response.read()\r\n  File \"C:\\Program Files\\Anaconda3\\lib\\http\\client.py\", line 458, in read\r\n    s = self.fp.read()\r\n  File \"C:\\Program Files\\Anaconda3\\lib\\socket.py\", line 575, in readinto\r\n    return self._sock.recv_into(b)\r\n  File \"C:\\Program Files\\Anaconda3\\lib\\ssl.py\", line 929, in recv_into\r\n    return self.read(nbytes, buffer)\r\n  File \"C:\\Program Files\\Anaconda3\\lib\\ssl.py\", line 791, in read\r\n    return self._sslobj.read(len, buffer)\r\n  File \"C:\\Program Files\\Anaconda3\\lib\\ssl.py\", line 575, in read\r\n    v = self._sslobj.read(len, buffer)\r\nConnectionResetError: [WinError 10054] An existing connection was forcibly closed by the remote host\r\n"}}, {"doc": {"_id": 558, "title": "create_pull() requires a GitHub.Issue, contra the API", "content": "`github.Repository.Repository.create_pull()` requires that you provide it an Issue; this is contra [the corresping API call](https://developer.github.com/v3/pulls/#create-a-pull-request), which only requires a head, base, and title."}}, {"doc": {"_id": 557, "title": "add \"integration\" install option with minimal docs", "content": "Would close #554 \r\n\r\nTested PyGithub installation locally in a blank virtualenvs (both 2.7 and 3.6) by `pip install -e .['integrations']`  and it successfully builds and installs the cryptography package as expected."}}, {"doc": {"_id": 556, "title": "I think input() and print() in python is misleading", "content": "I think `input()`  and `print()`  in python is misleading,I think `input()` should be called `keyboard()` because this function provides a keyboard interface to react keyboard thing,read most keys of keyboard excluding Enter key(Enter key is used to end keyboard input),as for `print()` ,I thinought this should be called `output()` long ago,now I think it's better to be called `screen()` because this function name implies that its argument will be shown on the screen.  `keyboard()` and `screen()` sound very hardware,they are associated with PC I/O hardware(everyone knows keyboard is a input hardware and screen is a output hardware),if `print()` be called `output()` ,it will be less misleading,but `keyboard()` and `screen()` will be more straightforward and exact.I hope python organization will see my advise,hoping they are in GITHUB"}}, {"doc": {"_id": 555, "title": "doc/changes.rst broken since 1.33", "content": "Looks like some automatic system has messed up the file :("}}, {"doc": {"_id": 554, "title": "GitHub Integration raises \"NotImplementedError Algorithm not supported\"", "content": "We have working github integration code using PyGithub v1.32 that does essentially:\r\n\r\n```python\r\nintegration = github.GithubIntegration(settings.GITHUB_INTEGRATION_ID, settings.GITHUB_INTEGRATION_PRIVATE_PEM)\r\ninst_token = integration.get_access_token(installation_id).token\r\n```\r\nAfter upgrading to v1.34 this code raises \"NotImplementedError Algorithm not supported\"\r\n\r\nI suspect it has to do with the [switch to pyjwt from python-jose](https://github.com/PyGithub/PyGithub/commit/d447eb13b9f4688a4c981ca03b1b3111fb299142)"}}, {"doc": {"_id": 553, "title": "Support search rate limit", "content": "It seems the get_rate_limit function will return what Github considers the 'core' rate limit. However, there are different rate limits for searching code. See [here](https://developer.github.com/v3/rate_limit/).\r\n\r\nRight now there isn't a way to get the search code rate limits as far as I can tell."}}, {"doc": {"_id": 552, "title": "remove_from_members stopped working", "content": "remove_from_members seems to have stopped working. \r\nCommand:\r\nimport github\r\nfrom github import Github\r\ntoken = 'github-token' # token from an org owner\r\ngithub = github.Github(token)\r\norg = github.get_organization('org-name')\r\nuser = github.get_user('test-username')\r\nprint org.has_in_members(user) # Returns True\r\norg.remove_from_members(user)\r\n\r\nDoesn't remove member for org and produces the following error:\r\nTraceback (most recent call last):\r\n  File \"github-authenticator.py\", line 51, in <module>\r\n    check_github_membership('test-username')\r\n  File \"github-authenticator.py\", line 40, in check_github_membership\r\n    org.remove_from_members(user)\r\n  File \"/Library/Python/2.7/site-packages/github/Organization.py\", line 608, in remove_from_members\r\n    self.url + \"/members/\" + member._identity\r\n  File \"/Library/Python/2.7/site-packages/github/Requester.py\", line 172, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, cnx))\r\n  File \"/Library/Python/2.7/site-packages/github/Requester.py\", line 180, in __check\r\n    raise self.__createException(status, responseHeaders, output)\r\ngithub.GithubException.UnknownObjectException: 404 {u'documentation_url': u'https://developer.github.com/v3/orgs/members/#remove-a-member', u'message': u'Not Found'}\r\n\r\nFrom the looks of other issues, this seems to happen when there's a change to the github api - is that right?"}}, {"doc": {"_id": 551, "title": "Update the docs", "content": "I just noticed that the [docs](http://pygithub.readthedocs.io/en/latest/introduction.html) linked in the readme are very outdated (e.g. the latest version in the changelog is from October 2014).\r\n\r\nWould it be possible to update them with the latest content that is currently available in master?"}}, {"doc": {"_id": 550, "title": "Error while trying to update a file using update_file()", "content": "error traceback :\r\n```\r\nTraceback (most recent call last):\r\n  File \"pygit-test.py\", line 48, in <module>\r\n    sha = sha, branch = 'master')\r\n  File \"<PROJECT_ROOT>/env/lib/python2.7/site-packages/github/Repository.py\", line 1369, in update_file\r\n    input=put_parameters\r\n  File \"<PROJECT_ROOT>/env/lib/python2.7/site-packages/github/Requester.py\", line 172, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, cnx))\r\n  File \"<PROJECT_ROOT>/env/lib/python2.7/site-packages/github/Requester.py\", line 180, in __check\r\n    raise self.__createException(status, responseHeaders, output)\r\ngithub.GithubException.UnknownObjectException: 404 {u'documentation_url': u'https://developer.github.com/v3', u'message': u'Not Found'}\r\n```\r\n\r\nI ran the following code :\r\n\r\n```python\r\nsha = repo.get_contents('test').sha\r\nrepo.update_file(\r\n\tpath = 'test', \r\n\tmessage = 'Update test using GithubAPI', \r\n\tcontent = base64.b64encode('updated test'), \r\n\tcommitter=InputGitAuthor(\"vinayakvivek\", email, \"2016-01-15T16:13:30+12:00\"),\r\n\tauthor=InputGitAuthor(\"vinayakvivek\", email, \"2016-01-15T16:13:30+12:00\"),\r\n\tsha = sha, branch = 'master')\r\n```\r\n\r\nAny help would be highly appreciated :)"}}, {"doc": {"_id": 549, "title": "Allow create_git_tag to create signed tags", "content": "`create_git_tag` and `create_git_tag_and_release` do not create GPG signed tags, even if `.gitconfig` includes entries for the following:\r\n```\r\n[user]\r\n        ...\r\n        signingKey = <your key>\r\n[commit]\r\n        gpgsign = true\r\n[tag]\r\n        forceSignAnnotated = true\r\n```\r\n\r\nMy implementation can be seen [here](https://github.com/netquity/err-github-jira-release/blob/66f270e2b925a20a9e6b7167a8e30ffd580a8ab3/release.py#L181-L198).\r\n\r\nTo check if the tag is signed, use `git tag -v <tag>`:\r\n```\r\n$ git tag -v v1.1.0\r\nobject 0c5fa0fb65be9d8df42a8b044887764594f027ac\r\ntype commit\r\ntag v1.1.0\r\ntagger foobar <foobar@mail.com> 1491420504 +0000\r\n\r\nv1.1.0error: no signature found\r\n```\r\n\r\nLinks with some explanation:\r\n- `forceSignAnnotated`: https://github.com/git/git/commit/61c2fe0c2984a7785e2ac803ce33e23663295b24\r\n- https://help.github.com/articles/signing-commits-using-gpg/"}}, {"doc": {"_id": 548, "title": "Guidelines for creating a repo", "content": "Hi,\r\n\r\nfirst thanks a lot for having developed this api, it really rocks and makes things easy to do ! The only thing i have not found in your examples is how to create a repo : i have found how to delete on but not how to create. Indeed it seems like the Github API does allow it.\r\n\r\nSo my question is : did you implement this method, ... and if yes, can you point me to a code snippet please ?\r\n\r\nThanks in advance for you help.\r\n\r\nKind Regards,\r\n\r\nAdrien\r\n"}}, {"doc": {"_id": 547, "title": "Get commits between two commits.", "content": "Hello! \r\nThis is more of a request, but we're currently looking for functionality similar to the functionality of:\r\n`git log <commit hash 1> <commit hash 2>` \r\n( or this page: https://github.com/octocat/linguist/compare/octocat:96d29b7%5E%5E%5E%5E%5E...octocat:96d29b7 ).\r\n\r\nI couldn't find any standing documentation on it for pygithub, but I was wondering if this was something that I could request? We're currently iterating over the parents of a commit, until we get the commit we want, then return all the commits during the iteration. However, this method doesn't work when the commits are on a different branch. \r\n\r\nThanks!\r\n"}}, {"doc": {"_id": 546, "title": "Issues Connecting with Github Enterprise", "content": "I am attempting to make a simple connection to my GitHub Enterprise instance but I keep getting a 502 error.  The setup is very simple so I'm a bit perplexed.  I've verified I can reach port 443 on the site address with Python socket.\r\n\r\n`TOKEN = 'abc123'\r\ng = Github(TOKEN, base_url='https://my.enterprise.github.com/api/v3\r\nprint(g.get_user().name)`\r\n\r\nResulting error:\r\n`C:\\Python27\\python.exe \"C:/project/testing.py\"\r\nTraceback (most recent call last):\r\n  File \"C:/project/testing.py\", line 18, in <module>\r\n    print(g.get_user().name)\r\n  File \"C:\\Python27\\lib\\site-packages\\github\\AuthenticatedUser.py\", line 221, in name\r\n    self._completeIfNotSet(self._name)\r\n  File \"C:\\Python27\\lib\\site-packages\\github\\GithubObject.py\", line 251, in _completeIfNotSet\r\n    self._completeIfNeeded()\r\n  File \"C:\\Python27\\lib\\site-packages\\github\\GithubObject.py\", line 255, in _completeIfNeeded\r\n    self.__complete()\r\n  File \"C:\\Python27\\lib\\site-packages\\github\\GithubObject.py\", line 260, in __complete\r\n    self._url.value\r\n  File \"C:\\Python27\\lib\\site-packages\\github\\Requester.py\", line 172, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, cnx))\r\n  File \"C:\\Python27\\lib\\site-packages\\github\\Requester.py\", line 213, in requestJson\r\n    return self.__requestEncode(cnx, verb, url, parameters, headers, input, encode)\r\n  File \"C:\\Python27\\lib\\site-packages\\github\\Requester.py\", line 252, in __requestEncode\r\n    status, responseHeaders, output = self.__requestRaw(cnx, verb, url, requestHeaders, encoded_input)\r\n  File \"C:\\Python27\\lib\\site-packages\\github\\Requester.py\", line 277, in __requestRaw\r\n    requestHeaders\r\n  File \"C:\\Python27\\lib\\httplib.py\", line 1057, in request\r\n    self._send_request(method, url, body, headers)\r\n  File \"C:\\Python27\\lib\\httplib.py\", line 1097, in _send_request\r\n    self.endheaders(body)\r\n  File \"C:\\Python27\\lib\\httplib.py\", line 1053, in endheaders\r\n    self._send_output(message_body)\r\n  File \"C:\\Python27\\lib\\httplib.py\", line 897, in _send_output\r\n    self.send(msg)\r\n  File \"C:\\Python27\\lib\\httplib.py\", line 859, in send\r\n    self.connect()\r\n  File \"C:\\Python27\\lib\\httplib.py\", line 1270, in connect\r\n    HTTPConnection.connect(self)\r\n  File \"C:\\Python27\\lib\\httplib.py\", line 839, in connect\r\n    self._tunnel()\r\n  File \"C:\\Python27\\lib\\httplib.py\", line 821, in _tunnel\r\n    message.strip()))\r\nsocket.error: Tunnel connection failed: 502 Bad Gateway`\r\n\r\nPython Version: 2.7.11 and 3.5.2\r\nPyGithub Version: 1.33"}}, {"doc": {"_id": 545, "title": "create_file fails", "content": "It looks like ``create_file`` is broken:\r\n\r\n```\r\nimport github\r\ngh = github.Github('...')\r\nuser = gh.get_user()\r\nrepo = user.create_repo('testing')\r\nrepo.create_file('test', 'commit message', 'banana')\r\n```\r\n\r\ngives:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"test_gh_api.py\", line 7, in <module>\r\n    repo.create_file('test', 'commit message', 'banana')\r\n  File \"/Users/tom/miniconda3/envs/dev/lib/python3.6/site-packages/github/Repository.py\", line 1310, in create_file\r\n    input=put_parameters\r\n  File \"/Users/tom/miniconda3/envs/dev/lib/python3.6/site-packages/github/Requester.py\", line 172, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, cnx))\r\n  File \"/Users/tom/miniconda3/envs/dev/lib/python3.6/site-packages/github/Requester.py\", line 180, in __check\r\n    raise self.__createException(status, responseHeaders, output)\r\ngithub.GithubException.UnknownObjectException: 404 {'message': 'Not Found', 'documentation_url': 'https://developer.github.com/v3'}\r\n```"}}, {"doc": {"_id": 544, "title": "Update requirements to match the latest pyjwt switch", "content": ""}}, {"doc": {"_id": 543, "title": "no_proxy is not supported", "content": "The environment variable no_proxy should be checked in case the Github API URL hostname is included."}}, {"doc": {"_id": 542, "title": "Dependency on python-jose/PyCrypto", "content": "Python-jose depends on pycrypto, which is no longer developed at this time. The developer of that project [has said](https://github.com/mpdavis/python-jose/pull/43#issuecomment-284202876) that he will maintain that dependency because it is available on google app engine standard. However, PyCrypto is insecure and has known vulnerabilities.\r\n\r\nIf you want, I can publish a python-jose that depends on cryptography and then you can change your dependency to that package. I am open to whatever is acceptable to eliminate PyCrypto.\r\n\r\n"}}, {"doc": {"_id": 541, "title": "Documentation sites out of date", "content": "The PyGithub documentation (both <http://pygithub.readthedocs.io/en/latest/> and <https://pygithub.github.io/PyGithub/v1/index.html>) is still at version 1.25.2 (released two and a half years ago), even though the project is now at version 1.32.  Please fix this."}}, {"doc": {"_id": 540, "title": "import error", "content": "after installing githubpy\r\n\r\nnext i want to use it\r\nthen \r\nit get error in python like'\r\n\r\n from github import Github\r\nImportError: cannot import name Github\r\n\r\n\r\nplz help me if anyone know how to use"}}, {"doc": {"_id": 539, "title": "Automated Testing fails if http_proxy is set in the environment", "content": "When running the [automated testing](https://github.com/PyGithub/PyGithub/blob/master/CONTRIBUTING.md#automated-tests), if http_proxy is setup in the environment, tests will fail with \"AttributeError: ReplayingConnection instance has no attribute 'set_tunnel'\"\r\n\r\nRemoving the http_proxy environment variable fixes the problem.\r\n\r\n```\r\n> python -s -m github.tests PullRequest\r\nEEEEEEEEEEEE\r\n======================================================================\r\nERROR: testAttributes (github.tests.PullRequest.PullRequest)\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"github/tests/PullRequest.py\", line 35, in setUp\r\n    self.repo = self.g.get_user().get_repo(\"PyGithub\")\r\n  File \"github/AuthenticatedUser.py\", line 851, in get_repo\r\n    \"/repos/\" + self.login + \"/\" + name\r\n  File \"github/AuthenticatedUser.py\", line 213, in login\r\n    self._completeIfNotSet(self._login)\r\n  File \"github/GithubObject.py\", line 251, in _completeIfNotSet\r\n    self._completeIfNeeded()\r\n  File \"github/GithubObject.py\", line 255, in _completeIfNeeded\r\n    self.__complete()\r\n  File \"github/GithubObject.py\", line 260, in __complete\r\n    self._url.value\r\n  File \"github/Requester.py\", line 172, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, cnx))\r\n  File \"github/Requester.py\", line 213, in requestJson\r\n    return self.__requestEncode(cnx, verb, url, parameters, headers, input, encode)\r\n  File \"github/Requester.py\", line 252, in __requestEncode\r\n    status, responseHeaders, output = self.__requestRaw(cnx, verb, url, requestHeaders, encoded_input)\r\n  File \"github/Requester.py\", line 269, in __requestRaw\r\n    cnx = self.__createConnection()\r\n  File \"github/Requester.py\", line 345, in __createConnection\r\n    conn.set_tunnel(self.__hostname, self.__port, headers)\r\nAttributeError: ReplayingConnection instance has no attribute 'set_tunnel'\r\n\r\n```"}}, {"doc": {"_id": 538, "title": "Add Support for Pull Request Reviews feature", "content": "Adding support to Pull Request class to access new Github API features [Pull Request reviews](https://developer.github.com/v3/pulls/reviews/) and [Pull Request Reviewer Requests](https://developer.github.com/v3/pulls/review_requests/)\r\n\r\nThe API's is still in beta.  \r\n\r\nI approached this by providing a minimal set of routines to access the list of reviews or a specific review.  Also access to get a list of Reviewer requests.   \r\n\r\nBecause the API is still early in Beta, I choose not to implement the create/delete/edit features, but the infrastructure should be in place for future improvements.\r\n\r\n"}}, {"doc": {"_id": 537, "title": "Add support for permission parameter when adding collaborators", "content": "According to the [API](https://developer.github.com/v3/repos/collaborators/#add-user-as-a-collaborator), a permission parameter can be used when adding a collaborator to a repository owned by an organisation.\r\n\r\nThis PR adds the parameter to the `add_to_collaborators` method from `Repository`."}}, {"doc": {"_id": 536, "title": "ETag not supported to make conditional requests through API?", "content": "I notice that the GitHubObject has an `eTag` attribute, but I don't see the ability to pass this in to any of the different api calls.  Am I missing something or is this a missing feature?  I notice it's mentioned in the v2 API docs."}}, {"doc": {"_id": 535, "title": "Support multiple \"api_preview\" values", "content": "I'd like to be able to get to Permission values for a User, which is currently a [preview feature](https://developer.github.com/v3/repos/collaborators/#check-if-a-user-is-a-collaborator).\r\n\r\nIn order to do this, the Requester needs to send \"Accept: application/vnd.github.korra-preview\", but the class is currently hardcoded to send only \"application/vnd.github.moondragon+json\".  Maybe instead of a boolean, the api_preview parameter could be a collection of strings that would be added as \"Accepted\" to the header.\r\n\r\nI can try to put up a PR for this, I'm just starting with the issue in case it is something that's been thought through before. "}}, {"doc": {"_id": 534, "title": "get_repo sends 404 for repos from organizations", "content": "Hi,\r\n\r\nI'm having trouble calling get_repo with the name of a repo I have access to in an organization.\r\n\r\nHere's what I simply do:\r\n```python\r\nrepo = me.get_user().get_repo(name_of_organization_repo_i_have_access_to)\r\n```\r\n\r\nThis is what I get:\r\n````\r\ngithub.GithubException.UnknownObjectException: 404 {'documentation_url': 'https://developer.github.com/v3', 'message': 'Not Found'}\r\n````\r\nIt works fine with a repo associated to my own account. But as soon as I need one from an organization it fails.\r\n\r\nWhat is strange to me is that:\r\n```python\r\nrepos = me.get_user().get_repos()\r\n```\r\nShows the repo in the list as expected.\r\n\r\nAm I missing something obvious?"}}, {"doc": {"_id": 533, "title": "API outside collaborators", "content": "Fixes #715 "}}, {"doc": {"_id": 532, "title": "[docs] warn about using threads", "content": "Please make explicit that this library is not thread-safe.\r\n\r\nThe documentation for this project is excellent, and for the most part I was able to get everything up and running *very* quickly!  However, an unfortunate amount of time was just spent debugging my own program only to realize what the actual problem is.\r\n\r\nIt makes sense why this library is not thread-safe, and I'm in no way asking for this feature!  But I seem to be [the second person](https://github.com/PyGithub/PyGithub/issues/183) to have done this.  As that user indicates, us expecting PyGithub to be threadsafe was a foolish thing to do.\r\n\r\nAt the same time, given the nature of the API and what it does, it feels natural to assume that it would be thread-safe.\r\n\r\nA simple warning will probably save a lot of other people a lot of time :wink:\r\n\r\nThanks for PyGithub!"}}, {"doc": {"_id": 531, "title": "Fix hashing in python3", "content": "```python\r\nfrom github import Github\r\n\r\nme = Github(' token ').get_user()\r\n\r\nrepo = list(me.get_repos())[-1]\r\n\r\nprint({repo: 'test'})\r\n\"\"\"\r\nTraceback (most recent call last):\r\n  File \".../PyGithub/test_hashable.py\", line 9, in <module>\r\n    print({repo: 'test'})\r\nTypeError: unhashable type: 'Repository'\r\n\"\"\"\r\n\r\nuser_repos = {}\r\n\r\nfor user in repo.get_stargazers():\r\n    user_repos[user] = 'test'\r\n    \"\"\"\r\n    Traceback (most recent call last):\r\n      File \".../PyGithub/test_hashable.py\", line 20, in <module>\r\n        user_repos[user] = 'test'\r\n    TypeError: unhashable type: 'NamedUser'\r\n    \"\"\"\r\n    break\r\n\r\nprint(user_repos)\r\n```"}}, {"doc": {"_id": 530, "title": "Update the RepositoryKey class", "content": "# The problems I attempt to solve\r\n\r\n- `RepositoryKey.created_at` is available on the Github API, but not in\r\nPyGithub\r\n- `RepositoryKey.edit()` is not supported anymore by the Github API,\r\nsee https://developer.github.com/v3/repos/keys/#edit-a-deploy-key\r\n\r\n# How I went about solving the problem\r\n\r\nI added myself a new deploy key to one of my repositories, and recorded\r\nthe existing tests using my account.\r\nI could not keep the existing test data as the specified key does not\r\nexist anymore, I added a comment for the next contributor to help him\r\nfigure out how to record new tests."}}, {"doc": {"_id": 529, "title": "Import missing exception", "content": "Minor tweak,\r\nTwoFactorException was missing on GithubException import line."}}, {"doc": {"_id": 528, "title": "Unpickled NamedUser objects don't autocomplete when getting NotSet attribute", "content": "I assume it's the same for other `GithubObjects`.\r\n```python\r\n>>> u = g.get_users()[0]\r\n>>> u\r\nNamedUser(login=\"mojombo\")\r\n>>> u._followers\r\nNotSet\r\n>>> p = pickle.dumps(u)\r\n>>> p\r\n>>> unpickled_user = pickle.loads(p)\r\n>>> unpickled_user\r\nNamedUser(login=\"mojombo\")\r\n>>> unpickled_user == u\r\nTrue\r\n>>> unpickled_user is u\r\nFalse\r\n>>> u._followers\r\nNotSet\r\n>>> u.followers\r\n19969\r\n>>> unpickled_user._followers\r\nNotSet\r\n>>> print(unpickled_user.followers)\r\nNone  # Should be 19969\r\n```"}}, {"doc": {"_id": 527, "title": "Added capablity to customize branch protection settings", "content": "This code should solve two problems with the `Repository.protect_branch` method.\r\n\r\n1. The lack of being able to control the \"Require branches to be up to date before merging\" field\r\n2. Change in the github branch protection API\r\n\r\n`Repository.protect_branch` maps to \r\n :calls: `PATCH /repos/:owner/:repo/branches/:branch <https://developer.github.com/v3/repos/#enabling-and-disabling-branch-protection>`_\r\n\r\nIf you got to the link (that was provided in docstring of `Repository.protect_branch`) above, you will notice that the section \"enabling-and-disabling-branch-protection\" was changed.\r\n\r\n[Here is the new API to update branch protection](https://developer.github.com/v3/repos/branches/#update-branch-protection).\r\n\r\nI also added a way to remove branch protection since that changed too.\r\n[See it here](https://developer.github.com/v3/repos/branches/#remove-branch-protection)\r\n\r\nThe PATCH method you used still works (but doesn't solve problem 1 above), however, it isn't listed in the current API.\r\n\r\nI did not change the `Repository.protect_branch` method, but added the two new methods.\r\nThis way I didn't break anything and the names of the two methods reflect the new Github API.\r\n\r\nIf I need to add more testing or change them in any way let me know.\r\n\r\nI hope this helps."}}, {"doc": {"_id": 526, "title": "Missing support for release asset APIs", "content": "API Documentation found here:\r\nhttps://developer.github.com/v3/repos/releases/#list-assets-for-a-release\r\nhttps://developer.github.com/v3/repos/releases/#upload-a-release-asset\r\nhttps://developer.github.com/v3/repos/releases/#get-a-single-release-asset\r\nhttps://developer.github.com/v3/repos/releases/#edit-a-release-asset\r\nhttps://developer.github.com/v3/repos/releases/#delete-a-release-asset\r\n\r\nI've created the following PR with the APIs added in:\r\nhttps://github.com/PyGithub/PyGithub/pull/525"}}, {"doc": {"_id": 525, "title": "Add ability to access github Release Asset API.", "content": "API Documentation found here:\r\nhttps://developer.github.com/v3/repos/releases/#list-assets-for-a-release\r\nhttps://developer.github.com/v3/repos/releases/#upload-a-release-asset\r\nhttps://developer.github.com/v3/repos/releases/#get-a-single-release-asset\r\nhttps://developer.github.com/v3/repos/releases/#edit-a-release-asset\r\nhttps://developer.github.com/v3/repos/releases/#delete-a-release-asset"}}, {"doc": {"_id": 524, "title": "Add release asset APIs", "content": "API Documentation found here:\r\nhttps://developer.github.com/v3/repos/releases/#list-assets-for-a-release\r\nhttps://developer.github.com/v3/repos/releases/#upload-a-release-asset\r\nhttps://developer.github.com/v3/repos/releases/#get-a-single-release-asset\r\nhttps://developer.github.com/v3/repos/releases/#edit-a-release-asset\r\nhttps://developer.github.com/v3/repos/releases/#delete-a-release-asset"}}, {"doc": {"_id": 523, "title": "Add ability to access github Release Asset APIs.", "content": "See: https://developer.github.com/v3/repos/releases"}}, {"doc": {"_id": 522, "title": "added tarball_url, zipball_url, prerelease and draft property", "content": "Added few more properties supported by v3 API for releases"}}, {"doc": {"_id": 521, "title": "Docs link is broken", "content": "Hi,\r\n\r\nI don't know if this is the right place to notify someone that the links on https://pygithub.readthedocs.io/en/latest/introduction.html that points to http://jacquev6.net/PyGithub/v1 are dead.  Both links are in the What's Next? section.\r\n\r\nPerhaps they should point to https://pygithub.github.io/PyGithub/v1/reference.html instead?\r\n\r\nIf this isn't the right place, could you please let me know whom I should advise?"}}, {"doc": {"_id": 520, "title": "Added missing support for specifying permission when adding collaborator to a repo owned by an organization", "content": "According to the specifications of the Github API: https://developer.github.com/v3/repos/collaborators/#add-user-as-a-collaborator.\r\n\r\nThrows an exception if trying to specify some permission other than \"pull\", \"push\" or \"admin\", as well as when trying to specify permission for a regular user-owned repository.\r\nBoth of which are noted in the documentation."}}, {"doc": {"_id": 519, "title": "adding support for the integrations installation endpoint", "content": "This is a continuation of https://github.com/PyGithub/PyGithub/pull/449 which adds support for installations.\r\n\r\nGiven a valid installation, you can now get all repos an installation has access to:\r\n\r\n```\r\nfrom github import Github\r\n\r\ninstallation_id = 123\r\n\r\ngh = GitHub('some-integration-token')\r\n\r\ninstallation = gh.get_installation(installation_id)\r\n\r\nfor repo in installation.get_repos():\r\n    print(repo.full_name)\r\n```\r\n\r\nThe new integrations API is still in early access, so it's likely that some things will change along the way. Once the API has settled down, I'll add proper tests for all endpoints."}}, {"doc": {"_id": 518, "title": "Correct stable version in documentation", "content": ""}}, {"doc": {"_id": 517, "title": "Refactor managing of repository.", "content": "Hello.\r\n\r\nWe have a lot of things to improve, I ask for permission to refactor some things in order to take care of them.\r\n\r\n1. Coverage, we use internally codecov as here: https://github.com/vauxoo/cfdilib\r\n2. Convert all a little more like what is proposed here: https://jeffknupp.com/blog/2013/08/16/open-sourcing-a-python-project-the-right-way/\r\n3. Automate the publish process to pypi with a -dev for master.\r\n4. Follow more stuff as cookiecutter.\r\n5. Document the release process and the maitainance environment as here: https://github.com/Vauxoo/cfdilib/blob/master/PREPARE_RELEASE.md\r\n6. Enable changelog and bumpversion.\r\n7. Include doctest and autodoc, and its automation to gh-pages as I have it here: https://github.com/Vauxoo/odoo/commit/4db163c40689a6c8d03bce22066c9dfbcb74460e (that's for translations but it can be easily be sent with raw version what I want to show is the process itself).\r\n\r\nI can do that this weekend, but I want ask to maintainers if it is ok for you guys? or maybe you can enlight me a little bit how is the current process for that, maybe it is being done but I do not understand pretty well how.\r\n\r\nRegards."}}, {"doc": {"_id": 516, "title": "Test recorder adds wrong string for token authorization", "content": "When recording a test and using a `GithubCredentials.py` like:\r\n\r\n```\r\nlogin = \"meneal\"\r\npassword = \"\"\r\noauth_token = \"REDACTED\"\r\n```\r\n\r\nthe test recorder places the string `token private_token_removed` in the recorded file.  When the test is run after the recording is made, the following stack trace is produced:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"github/tests/OrganizationHasInMembers.py\", line 32, in setUp\r\n    self.user = self.g.get_user(\"meneal\")\r\n  File \"github/MainClass.py\", line 159, in get_user\r\n    \"/users/\" + login\r\n  File \"github/Requester.py\", line 172, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, cnx))\r\n  File \"github/Requester.py\", line 213, in requestJson\r\n    return self.__requestEncode(cnx, verb, url, parameters, headers, input, encode)\r\n  File \"github/Requester.py\", line 252, in __requestEncode\r\n    status, responseHeaders, output = self.__requestRaw(cnx, verb, url, requestHeaders, encoded_input)\r\n  File \"github/Requester.py\", line 277, in __requestRaw\r\n    requestHeaders\r\n  File \"github/tests/Framework.py\", line 151, in request\r\n    self.__testCase.assertEqual(headers, eval(readLine(self.__file)))\r\nAssertionError: {'Authorization': 'Basic login_and_password_removed', 'User-Agent': 'PyGithub/Py [truncated]... != {'Authorization': 'token private_token_removed', 'User-Agent': 'PyGithub/Python' [truncated]...\r\n- {'Authorization': 'Basic login_and_password_removed',\r\n+ {'Authorization': 'token private_token_removed',\r\n   'User-Agent': 'PyGithub/Python'}\r\n```\r\n\r\nI manually changed the string in the recorded file to be `Basic login_and_password_removed` and the test passed with no error. I believe there are two options for this:\r\n\r\n- Make the test in `Framework.py` in some way accept the `token_private_token_removed`\r\n- Change something(not sure what this is offhand) in the recorder to make it use `Basic login_and_password_removed` regardless of whether a token or basic login is used."}}, {"doc": {"_id": 515, "title": "Cannot get the access to Github API, getting 404 error while connecting.", "content": "Facing problem at the very first step, I know later calls might be smooth. Below is my code:\r\n\r\n#--------------------------\r\nfrom github import Github\r\ng= Github(\"My github user login ID\", \"My github passwd\", \"http://github.com/OpenSCAP\", 1000)\r\nprint( g.get_user().name)    #print None\r\nprint (g.get_repo(\"openscap\").full_name)    #print None\r\nprint (g.get_repo(\"openscap\").name)    #print None\r\nfor repo in g.get_user().get_repos():\r\n\tprint (repo.name)    # Giving below traceback.\r\n#---------------------------\r\n\r\nTraceback (most recent call last):\r\n  File \"C:\\MyDrive\\SecureShield\\GitHub\\src\\mygit.py\", line 10, in <module>\r\n    print (repo.name)\r\n  File \"C:\\Python27\\Lib\\site-packages\\github\\Repository.py\", line 435, in name\r\n    self._completeIfNotSet(self._name)\r\n  File \"C:\\Python27\\Lib\\site-packages\\github\\GithubObject.py\", line 248, in _completeIfNotSet\r\n    self._completeIfNeeded()\r\n  File \"C:\\Python27\\Lib\\site-packages\\github\\GithubObject.py\", line 252, in _completeIfNeeded\r\n    self.__complete()\r\n  File \"C:\\Python27\\Lib\\site-packages\\github\\GithubObject.py\", line 257, in __complete\r\n    self._url.value\r\n  File \"C:\\Python27\\Lib\\site-packages\\github\\Requester.py\", line 172, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, cnx))\r\n  File \"C:\\Python27\\Lib\\site-packages\\github\\Requester.py\", line 213, in requestJson\r\n    return self.__requestEncode(cnx, verb, url, parameters, headers, input, encode)\r\n  File \"C:\\Python27\\Lib\\site-packages\\github\\Requester.py\", line 243, in __requestEncode\r\n    url = self.__makeAbsoluteUrl(url)\r\n  File \"C:\\Python27\\Lib\\site-packages\\github\\Requester.py\", line 304, in __makeAbsoluteUrl\r\n    if url.startswith(\"/\"):\r\nAttributeError: 'NoneType' object has no attribute 'startswith'\r\n\r\nI know, I might be doing some wrong, but I have tried all the way and finally boiled down to this error. But unfortunetly got very less information on google. Any idea, what I am doind wrong. Have raised the issue over stackOverflow also.\r\n\r\nhttp://stackoverflow.com/questions/41696232/not-able-to-instantiate-pygithub-modules-github-object\r\n\r\nThanks,\r\nHemant"}}, {"doc": {"_id": 514, "title": "handling error when used Pagination", "content": "Hi,\r\nI know i can use \"PyGithub Error Handling\" to handling error like this:\r\n```\r\n        try:\r\n            self.g.get_user().create_key(\"Bad key\", \"xxx\")\r\n        except github.GithubException, exception:\r\n            raised = True\r\n```\r\nBut how to handling error when i used Pagination?\r\nFor example:\r\n```\r\nfor repo in user.get_repos():\r\n    print repo.name\r\n```\r\nI alway get `ssl.SSLError: The read operation timed out` in Pagination.\r\n```\r\nTraceback (most recent call last):\r\n  File \"getRepositories.py\", line 230, in <module>\r\n    GetRepos(o)\r\n  File \"getRepositories.py\", line 28, in __init__\r\n    self.getGithubOrganizationMembers()\r\n  File \"getRepositories.py\", line 173, in getGithubOrganizationMembers\r\n    self.getGithubMembersRepos(owner_login)\r\n  File \"getRepositories.py\", line 179, in getGithubMembersRepos\r\n    for repos in members_repos:\r\n  File \"/usr/local/lib/python2.7/dist-packages/github/PaginatedList.py\", line 49, in __iter__\r\n    newElements = self._grow()\r\n  File \"/usr/local/lib/python2.7/dist-packages/github/PaginatedList.py\", line 61, in _grow\r\n    newElements = self._fetchNextPage()\r\n  File \"/usr/local/lib/python2.7/dist-packages/github/PaginatedList.py\", line 162, in _fetchNextPage\r\n    headers=self.__headers\r\n  File \"/usr/local/lib/python2.7/dist-packages/github/Requester.py\", line 172, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, cnx))\r\n  File \"/usr/local/lib/python2.7/dist-packages/github/Requester.py\", line 213, in requestJson\r\n    return self.__requestEncode(cnx, verb, url, parameters, headers, input, encode)\r\n  File \"/usr/local/lib/python2.7/dist-packages/github/Requester.py\", line 252, in __requestEncode\r\n    status, responseHeaders, output = self.__requestRaw(cnx, verb, url, requestHeaders, encoded_input)\r\n  File \"/usr/local/lib/python2.7/dist-packages/github/Requester.py\", line 279, in __requestRaw\r\n    response = cnx.getresponse()\r\n  File \"/usr/lib/python2.7/httplib.py\", line 1089, in getresponse\r\n    response.begin()\r\n  File \"/usr/lib/python2.7/httplib.py\", line 444, in begin\r\n    version, status, reason = self._read_status()\r\n  File \"/usr/lib/python2.7/httplib.py\", line 400, in _read_status\r\n    line = self.fp.readline(_MAXLINE + 1)\r\n  File \"/usr/lib/python2.7/socket.py\", line 476, in readline\r\n    data = self._sock.recv(self._rbufsize)\r\n  File \"/usr/lib/python2.7/ssl.py\", line 341, in recv\r\n    return self.read(buflen)\r\n  File \"/usr/lib/python2.7/ssl.py\", line 260, in read\r\n    return self._sslobj.read(len)\r\nssl.SSLError: The read operation timed out\r\n```"}}, {"doc": {"_id": 513, "title": "Accepting 'assignees' parameter for method create_issue()", "content": "problem: As of now there is no feature in PyGitHub to add multiple assignee's while creating new issue for git hub i.e Only one assignee can be added by using **\"create_issue()\"** method. on the other hand GitHub Post API is now accepting multiple assignee.\r\n\r\nsolution: \r\n    - added new param 'assignees' as an optional parameter to the method create_issue()\r\n    - pass 'assignees' to post_parameters so that github API recognise and add multiple assignee's to issue.\r\n    - assignees should be in the form of array of strings.\r\n        example: **assignees = ['user1', 'user2']**\r\n\r\ndocs link:\r\nhttps://developer.github.com/v3/issues/#create-an-issue"}}, {"doc": {"_id": 512, "title": "datetime returned by (issue and comment) created_at is naive, should be UTC", "content": "If I query an issue and access ```issue.created_at.tzinfo```, it is ```None```, indicating a naive datetime object\r\n\r\nThe values always appear to be UTC values so the ```tzinfo``` should be set to UTC (offset 0)\r\n\r\nIf the values are naive, all kinds of unusual bugs can occur in programs that try to insert the values into databases or other systems that assume a naive datetime is in local time."}}, {"doc": {"_id": 511, "title": "FC", "content": ""}}, {"doc": {"_id": 510, "title": "FC", "content": ""}}, {"doc": {"_id": 509, "title": "Documentation link", "content": "Hello,\r\n\r\nI was unable to find the link for the documentation of the library. I cloned it and built the doc myself. It would be great to have the docs configured over `readthedocs.io`."}}, {"doc": {"_id": 508, "title": "Repository.get_license() not supported", "content": "GitHub License API is not supported:  https://developer.github.com/v3/licenses/#get-the-contents-of-a-repositorys-license\r\n\r\nWe need to programmatically determine the open source license associated with a repository where the open source license was specified when the repository was created.\r\nWhen would that be possible?"}}, {"doc": {"_id": 507, "title": "Problems with NamedUser and membership", "content": "Here's what I'm doing.  All's well until I try either method to add a user.\r\n\r\nDefinitions:\r\n\r\n- args.org:  The organization name; the team and the user are both in this org.\r\n- args.team: The team name to add the user as a member\r\n- args.token: Github oauth token.\r\n- args.user:  The login name of the user to add.  This user is a member of the org, but not yet of the team -- which is what I'm trying to do, add the user to the team.  Note that for memberships, it shouldn't matter if the user is a member of the org or not, as it will invite the user to the org and, if accepted, add them to the team.  Very handy that.\r\n```\r\nfrom github import Github\r\ngh = Github(token)\r\norg = gh.get_organization(args.org)\r\nteam = None\r\n# Find the team ID.\r\nfor t in org.get_teams():\r\n    if t.name == args.team:\r\n        team = t\r\n        break\r\n\r\nif team:\r\n    team.add_membership(args.user)\r\n    team.add_to_members(args.user)\r\n```\r\nIn each case, I get the following:\r\n```\r\nTraceback (most recent call last):\r\n  File \"addUsersToTeamInOrg.py\", line 52, in <module>\r\n    team.add_to_members(args.user)\r\n  File \"C:\\Python27\\lib\\site-packages\\github\\Team.py\", line 122, in add_to_members\r\n    assert isinstance(member, github.NamedUser.NamedUser), member\r\nAssertionError: joe-user\r\n```\r\nNote that \"joe-user\" isn't the user login used, but the one that was used is valid and should've worked. Directly calling the APIs did work, in fact.\r\n\r\nIn the github API documentation, you supply the login ID for `username`:\r\n```\r\nPUT /teams/:id/members/:username\r\nPUT /teams/:id/memberships/:username\r\n```\r\n\r\nOne other thing:  For `memberships`, there is an optional `role` parameter, which you also don't seem to support.\r\n\r\nThanks."}}, {"doc": {"_id": 506, "title": "Fix README instructions", "content": "repo.edit takes a mandatory first argument \"name\". Thus, it currently results in:\r\n```\r\n$ python github_mechanize_forkers.py \r\nAxelrod\r\nTraceback (most recent call last):\r\n  File \"github_mechanize_forkers.py\", line 11, in <module>\r\n    repo.edit(has_wiki=False)\r\nTypeError: edit() takes at least 2 arguments (2 given)\r\n```\r\n\r\nFix the instructions by removing the \"edit\" call entirely -- basic instructions like this should prefer read-only operations"}}, {"doc": {"_id": 505, "title": "Add source import ", "content": "Plz we need this for migration "}}, {"doc": {"_id": 504, "title": "Repository.create_label fails with UnknownObjectException: 404", "content": "```\r\nFile \"D:\\GIT\\bitbucket.com\\gitLabels\\src\\flask_website\\githubwrapper.py\", line 180, in set_labels\r\n    _repo.create_label(\"Test label\", \"00ff00\")\r\n  File \"C:\\Python27\\lib\\site-packages\\github\\Repository.py\", line 932, in create_label\r\n    input=post_parameters\r\n  File \"C:\\Python27\\lib\\site-packages\\github\\Requester.py\", line 172, in requestJsonAndCheck\r\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, cnx))\r\n  File \"C:\\Python27\\lib\\site-packages\\github\\Requester.py\", line 180, in __check\r\n    raise self.__createException(status, responseHeaders, output)\r\nUnknownObjectException: 404 {u'documentation_url': u'https://developer.github.com/v3/issues/labels/#create-a-label', u'message': u'Not Found'}\r\n```"}}, {"doc": {"_id": 503, "title": "Handling new milestone and label events", "content": "GitHub added some support to pick up some new Milestone and Label events. Would be great if these were supported/tested by PyGithub.\r\n\r\nref: https://developer.github.com/changes/2016-10-27-new-label-and-milestone-webhooks"}}, {"doc": {"_id": 502, "title": "Get pull requests on the basis of some parameter", "content": "Can we get a paginated list of all the pull requests within a certain date? \r\n```\r\ng = Github(token, per_page=100)\r\norg = g.get_organization('cloudant')\r\ncode = org.get_repo('chef-repo')\r\npaignated_list = code.get_pulls(state='closed') ```\r\n\r\nlike can we use `get_pulls` for a certain date range?"}}, {"doc": {"_id": 501, "title": "protect_branch", "content": "Hi,\r\nWhen are you planning to release new version ?\r\nI am using version 2.1 , and protect_branch not there\r\nThanks a lot \r\nRiki"}}, {"doc": {"_id": 500, "title": "Add details of repo type for get_repos documentation", "content": "Taken from https://developer.github.com/v3/repos/#list-organization-repositories, it would save the trip to the github API for whoever is reading the documentation."}}, {"doc": {"_id": 499, "title": "An easier to see link to the documentation in response to issue #480.", "content": "I was looking over the project and stumbled into[ this issue](https://github.com/PyGithub/PyGithub/issues/480).  It is a pretty small fix, so I took five minutes to make it.  I am aware that there is a badge on the page, but just wanted to make sure no one missed it going forward.\r\n"}}, {"doc": {"_id": 498, "title": "Support HTTP 302 redirect in Organization.has_in_members", "content": "When a request like:\r\n\r\n```\r\ncurl -iL -u 'meneal:REDACTED' https://api.github.com/orgs/lambdaconglomerate/members/meneal\r\n```\r\n\r\nis made, Github responds with a 302 and then a 204, as follows:\r\n\r\n```\r\nHTTP/1.1 302 Found\r\nServer: GitHub.com\r\nDate: Thu, 01 Dec 2016 21:57:58 GMT\r\nContent-Type: text/html;charset=utf-8\r\nContent-Length: 0\r\nStatus: 302 Found\r\nX-RateLimit-Limit: 5000\r\nX-RateLimit-Remaining: 4991\r\nX-RateLimit-Reset: 1480632278\r\nLocation: https://api.github.com/organizations/13904033/public_members/meneal\r\nAccess-Control-Expose-Headers: ETag, Link, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval\r\nAccess-Control-Allow-Origin: *\r\nContent-Security-Policy: default-src 'none'\r\nStrict-Transport-Security: max-age=31536000; includeSubdomains; preload\r\nX-Content-Type-Options: nosniff\r\nX-Frame-Options: deny\r\nX-XSS-Protection: 1; mode=block\r\nVary: Accept-Encoding\r\nX-Served-By: 4537b68c46a1b65b106078b0a2578ee2\r\nX-GitHub-Request-Id: 812AD0B3:758F:15F5B73A:58409CE6\r\n\r\nHTTP/1.1 204 No Content\r\nServer: GitHub.com\r\nDate: Thu, 01 Dec 2016 21:57:58 GMT\r\nStatus: 204 No Content\r\nX-RateLimit-Limit: 5000\r\nX-RateLimit-Remaining: 4990\r\nX-RateLimit-Reset: 1480632278\r\nX-OAuth-Scopes:\r\nX-Accepted-OAuth-Scopes:\r\nX-GitHub-Media-Type: github.v3\r\nAccess-Control-Expose-Headers: ETag, Link, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval\r\nAccess-Control-Allow-Origin: *\r\nContent-Security-Policy: default-src 'none'\r\nStrict-Transport-Security: max-age=31536000; includeSubdomains; preload\r\nX-Content-Type-Options: nosniff\r\nX-Frame-Options: deny\r\nX-XSS-Protection: 1; mode=block\r\nVary: Accept-Encoding\r\nX-Served-By: 52437fedc85beec8da3449496900fb9a\r\nX-GitHub-Request-Id: 812AD0B3:758F:15F5B742:58409CE6\r\n```\r\n\r\nThe [current implementation of `has_in_members`](https://github.com/PyGithub/PyGithub/blob/master/github/Organization.py#L568) only checks for the 204 without handling the 302 redirect and by doing so it returns a false negative. The occurrence of the redirect is sensitive to the scope of the token, in my testing a token with no scope (public access) receives the 302 then the 204, while a token with `read:org` only gets the 204."}}, {"doc": {"_id": 497, "title": "Add permissions parameter to add_to_collaborators", "content": "See the Github API Reference [here](https://developer.github.com/v3/repos/collaborators/#add-user-as-a-collaborator)\n\nThis change will only apply if the optional `permissions` parameter is\nprovided to `add_to_collaborators`. If not, it will behave as before\n\nThis is similar to the implementation in #393 but differs as explained above.\nHappy to close if the other implementation is preferred, but either way I would very much like to see this feature merged!"}}, {"doc": {"_id": 496, "title": "Support getting the Latest release", "content": "As per https://developer.github.com/v3/repos/releases/#get-the-latest-release it is possible to get the latest release by issuing a call to `/repos/:owner/:repo/releases/latest`. This PR implements that as a seperate method in the Repository class, returning a GitRelease for the latest release.\r\n\r\nThis will 404 if the target repository has no releases, and it would appear to just return the most recent release if a repository has not marked a release as the latest.\r\n\r\nI was unsure what to test for adding this, if you have any suggestions of tests to accompany this addition I can happily add them to this PR."}}, {"doc": {"_id": 495, "title": "Encode GithubObject repr values in utf-8", "content": "Fixes https://github.com/PyGithub/PyGithub/issues/494."}}, {"doc": {"_id": 494, "title": "GithubObject get__repr__ chokes on non-ascii values", "content": "Example using Python 2.7:\r\n```\r\nfrom github import Github\r\ng = Github(user, token)\r\nr = g.get_repo(\"apache/brooklyn-server\")\r\nr.get_pull(465)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/Users/sam/.virtualenvs/brooklyn-changelog/lib/python2.7/site-packages/github/PullRequest.py\", line 48, in __repr__\r\n    return self.get__repr__({\"number\": self._number.value, \"title\": self._title.value})\r\n  File \"/Users/sam/.virtualenvs/brooklyn-changelog/lib/python2.7/site-packages/github/GithubObject.py\", line 226, in get__repr__\r\n    params=\", \".join(list(format_params(params)))\r\n  File \"/Users/sam/.virtualenvs/brooklyn-changelog/lib/python2.7/site-packages/github/GithubObject.py\", line 223, in format_params\r\n    yield '{k}=\"{v}\"'.format(k=k, v=v) if isinstance(v, (str, unicode)) else '{k}={v}'.format(k=k, v=v)\r\nUnicodeEncodeError: 'ascii' codec can't encode character u'\\u2026' in position 69: ordinal not in range(128)\r\n```\r\n\r\nThe character in question is '\u2026'"}}, {"doc": {"_id": 493, "title": "repo.get_stats_contributors() return None and how get Retry-After.", "content": "I have 100 repositories objects and make 100 sequential requests on them \r\n\r\n`repo.get_stats_contributors() `\r\n\r\nBy time this requests start to return None objects, I sure it happens because of abusing of rate limit, in that case I want to get **Retry-After** header to wait and continue again.\r\n\r\nhttps://developer.github.com/guides/best-practices-for-integrators/#dealing-with-rate-limits\r\n\r\nHow can I get the header?\r\n"}}, {"doc": {"_id": 492, "title": "Added support for subscribers_count", "content": ""}}, {"doc": {"_id": 491, "title": "Support team membership roles", "content": "Support filtering members by role in `get_members()` and adding membership with a role in `add_membership()`."}}, {"doc": {"_id": 490, "title": "Teams API: support description & privacy fields", "content": "Per https://developer.github.com/v3/orgs/teams add support for the description & privacy properties of teams. The former is quite useful, and the latter is pretty much required these days since teams are secret by default.\r\n\r\nI'm sorry but I can't figure out how to add tests properly."}}, {"doc": {"_id": 489, "title": "Can't use 'in' qualifier to search code.", "content": "I have tried to search code like\r\n```\r\ng.search_code(query='addClass', language='js', repo='jquery/jquery', in='file')\r\n```\r\nHowever, I can't do that because the word 'in' conflicts Python's syntax.\r\nAre there any method to solve this probrem?"}}, {"doc": {"_id": 488, "title": "create_git_tag not working", "content": "Repository.create_git_tag() does not seem to do anything for me when called (though other Repository methods do work). Sample code:\r\n\r\n```\r\ngithub_instance = Github(\"user\", \"pass\")\r\nrepo = github_instance.get_repo(\"MyOrg/myrepo\")\r\nrepo.create_git_tag(tag=\"test_tag\", message=\"hello world\", type=\"commit\", object=\"f82f379529ad40a25a6\")\r\n```\r\n\r\nAfter running this I don't see any tag created on the repo in github. Also when I look at the GitTag object returned the sha value is different every time I run this (and not equal to the \"object\" parameter in create_git_tag)\r\n\r\nThis is PyGithub 1.29 and Python 3.5.2"}}, {"doc": {"_id": 487, "title": "PaginatedList totalCount raises AttributeError", "content": "Ran into this rather odd issue locally. Not quite sure what is going on, but figured it deserved an issue as I saw it repeatedly.\r\n\r\n```python\r\n>>> l\r\n<github.PaginatedList.PaginatedList instance at 0x...>\r\n>>> l[0]\r\n>>> IssueComment(user=NamedUser(login=\"...\"), id=...)\r\n>>> l.totalCount\r\n---------------------------------------------------------------------------\r\nAttributeError                            Traceback (most recent call last)\r\n<ipython-input-34-ba47f831ae47> in <module>()\r\n----> 1 l.totalCount\r\n\r\n/zopt/conda2/lib/python2.7/site-packages/github/PaginatedList.pyc in totalCount(self)\r\n    125     def totalCount(self):\r\n    126         if not self.__totalCount:\r\n--> 127             self._grow()\r\n    128 \r\n    129         return self.__totalCount\r\n\r\n/zopt/conda2/lib/python2.7/site-packages/github/PaginatedList.pyc in _grow(self)\r\n     59 \r\n     60     def _grow(self):\r\n---> 61         newElements = self._fetchNextPage()\r\n     62         self.__elements += newElements\r\n     63         return newElements\r\n\r\n/zopt/conda2/lib/python2.7/site-packages/github/PaginatedList.pyc in _fetchNextPage(self)\r\n    160             self.__nextUrl,\r\n    161             parameters=self.__nextParams,\r\n--> 162             headers=self.__headers\r\n    163         )\r\n    164         data = data if data else []\r\n\r\n/zopt/conda2/lib/python2.7/site-packages/github/Requester.pyc in requestJsonAndCheck(self, verb, url, parameters, headers, input, cnx)\r\n    170 \r\n    171     def requestJsonAndCheck(self, verb, url, parameters=None, headers=None, input=None, cnx=None):\r\n--> 172         return self.__check(*self.requestJson(verb, url, parameters, headers, input, cnx))\r\n    173 \r\n    174     def requestMultipartAndCheck(self, verb, url, parameters=None, headers=None, input=None):\r\n\r\n/zopt/conda2/lib/python2.7/site-packages/github/Requester.pyc in requestJson(self, verb, url, parameters, headers, input, cnx)\r\n    211             return \"application/json\", json.dumps(input)\r\n    212 \r\n--> 213         return self.__requestEncode(cnx, verb, url, parameters, headers, input, encode)\r\n    214 \r\n    215     def requestMultipart(self, verb, url, parameters=None, headers=None, input=None):\r\n\r\n/zopt/conda2/lib/python2.7/site-packages/github/Requester.pyc in __requestEncode(self, cnx, verb, url, parameters, requestHeaders, input, encode)\r\n    241             requestHeaders[\"Accept\"] = \"application/vnd.github.moondragon+json\"\r\n    242 \r\n--> 243         url = self.__makeAbsoluteUrl(url)\r\n    244         url = self.__addParametersToUrl(url, parameters)\r\n    245 \r\n\r\n/zopt/conda2/lib/python2.7/site-packages/github/Requester.pyc in __makeAbsoluteUrl(self, url)\r\n    302         # URLs generated locally will be relative to __base_url\r\n    303         # URLs returned from the server will start with __base_url\r\n--> 304         if url.startswith(\"/\"):\r\n    305             url = self.__prefix + url\r\n    306         else:\r\n\r\nAttributeError: 'NoneType' object has no attribute 'startswith'\r\n```\r\n\r\nUsing version `1.29` on Python `2.7`."}}, {"doc": {"_id": 486, "title": "Fix a bug cause gistfile.content None.", "content": "Fixes #485 \r\n\r\nSee issue: https://github.com/PyGithub/PyGithub/issues/485"}}, {"doc": {"_id": 485, "title": "GistFile.content is None If Gist haven't complete", "content": "If gist object haven't complete, files in this gist has no content.\r\nI create an pull request using Just4test account."}}, {"doc": {"_id": 484, "title": "Pull request get_comments() method returning no results", "content": "It seems that the `get_comments()` and `get_review_comments()` methods have an issue in the latest release.\r\n\r\nFor a pull request with a number of comments (https://github.com/apache/incubator-beam/pull/1013) these APIs return no results.\r\n\r\n```python\r\nIn [4]: len(list(Github().get_repo('apache/incubator-beam').get_pull(1013).get_comments()))\r\nOut[4]: 0\r\n\r\nIn [5]: len(list(Github().get_repo('apache/incubator-beam').get_pull(1013).get_review_comments()))\r\nOut[5]: 0\r\n```"}}, {"doc": {"_id": 483, "title": "issue when deleting repo hook", "content": "version: pygithub>=1.29\n\nhook.delete() does not work (creating the hook via repo.create_hook(...) works fine).\n\nerror log:\n\n```\nFile \"/var/task/beedo/gh_source.py\", line 239, in delete_sns_hook\nhook.delete()\nFile \"/var/task/github/Hook.py\", line 128, in delete\nself.url\nFile \"/var/task/github/Requester.py\", line 172, in requestJsonAndCheck\nreturn self.__check(*self.requestJson(verb, url, parameters, headers, input, cnx))\nFile \"/var/task/github/Requester.py\", line 180, in __check\nraise self.__createException(status, responseHeaders, output)\nUnknownObjectException: 404 {u'documentation_url': u'https://developer.github.com/v3', u'message': u'Not Found'}\n```\n\nmy code:\n\n``` python2.7\ndef get_sns_hook(token, repo):\n    hooks = list_hooks(token, repo)\n    for hook in hooks:\n        if hook.name == 'amazonsns':\n            return hook\n\ndef list_hooks(token, repo):\n    g = Github(token)\n    repo = g.get_repo(repo)\n    return repo.get_hooks()\n\ndef delete_sns_hook(token, repo):\n    log.info('Deleting SNS hook for %s' % repo)\n    hook = get_sns_hook(token, repo)\n    log.info(hook.name)\n    log.info(hook.id)\n    log.info(dir(hook))\n    hook.delete()\n```\n\nThe Github API token has suitable credentials (both write:repo_hook and read:repo_hook). So I believe this is a problem in pygithub. Any ideas?\n"}}, {"doc": {"_id": 482, "title": "Update get_pulls() documentation", "content": "The sort param is missing from the docs: http://pygithub.readthedocs.io/en/latest/github_objects/Repository.html#github.Repository.Repository.get_pulls\n"}}, {"doc": {"_id": 481, "title": "Get pulls missing params", "content": "I can't pass the `base` or the `head` query parameters to the call to `Repository.get_pulls()`, or at least it doesn't say anything about it in [the docs](http://pygithub.readthedocs.io/en/latest/github_objects/Repository.html#github.Repository.Repository.get_pulls)\nThey are defined by the documentation on GitHub's API [here](https://developer.github.com/v3/pulls/#list-pull-requests).\n"}}, {"doc": {"_id": 480, "title": "Where is the documentation???", "content": "Where is the Documentation for the library??\n"}}, {"doc": {"_id": 479, "title": "add html_url to GitRelease", "content": "Adding html_url to GitRelease as its available in the json return but currently not available.  Updating an existing test to account for this addition as well.\n"}}, {"doc": {"_id": 478, "title": "Adding Some Traffic Info. - Attributes Error?", "content": "Towards expansion of the library for handling the experimental \"Traffic\" API (https://developer.github.com/v3/repos/traffic/), I wanted to take a stab at adding a \"Clones.py\" to extract clone information (https://developer.github.com/v3/repos/traffic/#clones). \r\n\r\nI retrieve the parent information fine via the following added funtion in Repository.py:\r\n\r\n```\r\n    def get_clones(self, per):\r\n        \"\"\"\r\n        :calls: `GET /repos/:owner/:repo/traffic/clones\r\n        :rtype: :class:`github.PaginatedList.PaginatedList` of :class:`github.Clone.Clone`\r\n        \"\"\"\r\n        return github.PaginatedList.PaginatedList(\r\n            github.Clone.Clone,\r\n            self._requester,\r\n            self.url + \"/traffic/clones?per=\" + str(per),\r\n            None,\r\n            headers={'Accept': 'application/vnd.github.spiderman-preview'}\r\n        )\r\n```\r\n\r\nThat's all fine I think. But in creating Clones.py, I don't think I have the syntax right. Say I just want the class to be able to get the number of \"uniques.\" I have this:\r\n\r\n```\r\nclass Clone(github.GithubObject.CompletableGithubObject):\r\n    def __repr__(self):\r\n        return self.get__repr__({\"uniques\": self._uniques.value})\r\n\r\n    @property\r\n    def uniques(self):\r\n        \"\"\"\r\n        :type: integer\r\n        \"\"\"\r\n        return self._uniques.value\r\n\r\n    def _initAttributes(self):\r\n        self._uniques = github.GithubObject.NotSet\r\n\r\n    def _useAttributes(self, attributes):\r\n        if \"uniques\" in attributes:\r\n            self._uniques = self._makeIntAttribute(attributes[\"uniques\"])\r\n```\r\n\r\nBut when I test it by creating a clone object, it fails with: \r\n    **self._uniques = self._makeIntAttribute(attributes[\"uniques\"])\r\n    TypeError: string indices must be integers**\r\n\r\nWhat am I missing? Just jumping into this; can't admit that I know if, for instance, Clones should be a \"CompletableGithubObject,\" the nuances of the nested clone information, etc. I'd like to get the basics of this working though and contribute to PyGithub however.\r\n\r\nThanks.\r\n"}}, {"doc": {"_id": 477, "title": "has_downloads is True, but apparently no downloads", "content": "Hi there,\n\nI check a repo's downloads status by checking the Repository class's `has_downloads` attribute, which is True. However, there is apparently nothing in the list. Sample code:\n\n```\n# Is true: \nprint str(repo.has_downloads)\n\n# Is apparently empty:\ndwnlds = repo.get_downloads()\nfor d in dwnlds:\n   print dwnld.id\n```\n\nAm I missing something?\nRepo is: https://github.com/NASA-DEVELOP/dnppy/\n"}}, {"doc": {"_id": 476, "title": "Removed unused imports", "content": "Since 1d9ad14fa918, the setup script no longer uses `subprocess`, `shutil` and `os` modules.\n"}}, {"doc": {"_id": 475, "title": "Fix typo in a constant", "content": "This is technically an API breakage, but I couldn't find any users of this constant except PyGithub itself, so I think it should be fine.\n\nFound using [mwic](http://jwilk.net/software/mwic).\n"}}, {"doc": {"_id": 474, "title": "Fix changelog formatting glitch", "content": "reStructuredText parser doesn't consider backquote as closing if it's immediately followed by a letter.\n"}}, {"doc": {"_id": 473, "title": "adding target_commitish parameter to methods for creating a release", "content": "Adding `target_commitish` as an optional parameter to methods for creating a release and adding tests for those methods.  Resolves issue https://github.com/PyGithub/PyGithub/issues/380 whose previous pull request was closed.\n\nThis addresses the issues found in an older pull request (https://github.com/PyGithub/PyGithub/pull/381) that was closed.  It wasn't merged due to a lack of tests and the use of `None` as opposed to `github.GithubObject.NotSet`.  Both of those issues have been resolved.  Additionally, one bug was resolved where `target_commitish` was not being passed to the `create_git_release` method from the `create_git_tag_and_release` method.\n"}}, {"doc": {"_id": 472, "title": "Python 2.7 Error - ImportError: cannot import name Github", "content": "import github works but nothing seems to be under github. Using Python 2.7. \n\npip install PyGithub\n\nThoughts?\n"}}, {"doc": {"_id": 471, "title": "Don't modify original requestHeaders in Requester.__log()", "content": "It's a problem when we need to use the `requestHeaders` later.\n\nLike in case of `__requestRaw()` where we send a request + get response,\nthen `__log()` it and if the response contains status `301 (redirected)`\nsend another request (with same requestHeaders) to redirected url.\n\nIf the `__log()` erases the `'Authorization'` field, the subsequent\nrequest fails.\n\nFixes #470\n"}}, {"doc": {"_id": 470, "title": "Getting redirected repo does not work if debug logging is enabled.", "content": "```\n$ python3 -c \"import github; token='...'; print(github.Github(token).get_repo('spumko/boom').raw_headers['status'])\"\n\n200 OK\n```\n\n```\npython3 -c \"import github, logging; logging.basicConfig(level=logging.DEBUG); token='...'; print(github.Github(token).get_repo('spumko/boom').raw_headers['status'])\"\n\nTraceback (most recent call last):\n  File \"<string>\", line 1, in <module>\n  File \"/usr/lib/python3.5/site-packages/github/GithubObject.py\", line 105, in raw_headers\n    self._completeIfNeeded()\n  File \"/usr/lib/python3.5/site-packages/github/GithubObject.py\", line 252, in _completeIfNeeded\n    self.__complete()\n  File \"/usr/lib/python3.5/site-packages/github/GithubObject.py\", line 257, in __complete\n    self._url.value\n  File \"/usr/lib/python3.5/site-packages/github/Requester.py\", line 172, in requestJsonAndCheck\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, cnx))\n  File \"/usr/lib/python3.5/site-packages/github/Requester.py\", line 180, in __check\n    raise self.__createException(status, responseHeaders, output)\ngithub.GithubException.BadCredentialsException: 401 {'documentation_url': 'https://developer.github.com/v3', 'message': 'Bad credentials'}\n```\n"}}, {"doc": {"_id": 469, "title": "Support multiple assignees on Issue & PullRequest", "content": "### The problem so far\r\n\r\nAs reported in #404 and #439, the Github official API now supports multiple assignees (along with Enterprise edition since v2.7).\r\nHowever, PyGithub doesn't support it yet.\r\n\r\n### How it's solved\r\n\r\n1. Added the `assignees` attribute to the `Issue` object (e0e5fdf9c06be34d580aeca4829e7d53757bce89)\r\n    - In older version of API which doesn't support multiple assignees, `Issue.assignees` returns just a single-element list of `Issue.assignee`.\r\n2. Enhance support of `assignees` argument in `Issue.edit()` (14dd9f0850f4f280fd7bdb354860c88c5ca7356b)\r\n    - Some work have done in #466 already, but it now accepts a list of `github.Nameduser.NamedUser`.\r\n3. Added `assignees` argument in `Repository.create_issue()` (ba007dc8a8bb5d5fdf75706db84dab6a69929d7d)\r\n4. Added the `assignees` attribute also to the `PullRequest` object. (c0de6be5ea7d285f110ba82bb96bf6fe80b01945)\r\n    - Following the [comment](https://github.com/PyGithub/PyGithub/pull/469#issuecomment-261708142) from @andrzejchm, added the `assignees` attribute to `PullRequest` object as well. The diff is same as the first commit.\r\n5. Added the `add_to_assignees` and the `remove_from_assignees` methods to the `Issue` object. (66430d7831aa31beb726efa4a3ea25f2c7950819)\r\n    - Following the [comment](https://github.com/PyGithub/PyGithub/pull/469#issuecomment-262274782) from @mgorny, added the `add_to_assignees` and the `remove_from_assignees` methods to the `Issue` object, each of which utilizes [the \"add assignees to an issue\" API](https://developer.github.com/v3/issues/assignees/#add-assignees-to-an-issue) API and [the \"remove assignees from an issue\" API](https://developer.github.com/v3/issues/assignees/#remove-assignees-from-an-issue) respectively.\r\n    - These methods are to modify assignees on an issue without changing the existing assignees. To set assignees ignoring the existing assignees or to clear all assignees, use `edit` method like `issue.edit(assignees=['user1', 'user2'])` or `issue.edit(assignees=[])`.\r\n\r\n### Note for maintainers\r\n\r\nAll of the `ReplayData` is edited manually by my hand, since I could not edit issues on this repo.\r\nIf that is problematic, feel free to overwrite them!"}}, {"doc": {"_id": 468, "title": "More portable LICENSE?", "content": "Didn't know this was a GPL license, as they're pretty rare to find in python.\n\nwww.github.com/tony/patches is MIT and can't use viral code. I originally wanted to pull this lib in thinking it was permissively licensed, but it won't work.\n\nNot sure why a client lib (or anything python FWIW) needs to be virally licensed, even LGPL is strict relative to other python libs. Don't want to introduce troubles for downstream users down the road.\n\nI'm kind of going to be stuck using direct API calls / wrappers, but it'd be nice to have this on a more portable license to not reinvent the wheel.\n\nI recommend something like zlib, MIT, BSD, Apache 2, etc.\n"}}, {"doc": {"_id": 467, "title": "Add support for read_only keys.", "content": "This fixes issue https://github.com/PyGithub/PyGithub/issues/405\n\nThe new setting is to 'False' by default to preserve existing functionality.\n\nUpdated tests to show usage.\n"}}, {"doc": {"_id": 466, "title": "Issue assignees", "content": ""}}, {"doc": {"_id": 465, "title": "Public Repo Not Recognized?", "content": "Hi, I'm not sure if this is the correct forum for posting this because it may end up being more about unfamiliarity with the Github and PyGithub APIs. However, I am just trying to confirm that I am indeed finding a public repo using PyGithub with the following commands:\n\n```\n  from github import Github\n  g = Github()\n  repository = 'https://github.com/NASA-DEVELOP/dnppy'\n  repo = g.get_repo(repository)\n  print repo.name\n```\n\nOn that \"print repo.name\" line, I get the error:\n\nraise.self.__createException(status, responseHeaders, output) github.GithubException.UnknownObjectException: 404 {u'documentation_url': u'https://developer.github.com/v3', u'message': u'Not Found'}\n\nThis should be a public repo. Therefore, I am trying to access it without authentication. Even with my GitHub credentials in there, it doesn't seem to find the object (which I would expect to be \"dnppy.\") Am I doing something wrong here? Thanks!\n"}}, {"doc": {"_id": 464, "title": "Delete a repository", "content": "Github API provides the feature for deleting a user repository. I can not find any method corresponding to this in the documentation. So if it is not yet implemented then i request for this feature to be added for [PyGithub](https://github.com/PyGithub/PyGithub) \nIf so then i will be happy to implement this feature.\nIf it is already implemented then provide documentation for it\n"}}, {"doc": {"_id": 463, "title": "Add info", "content": "Response headers have useful info (https://developer.github.com/v3/#rate-limiting)\n"}}, {"doc": {"_id": 462, "title": "Fix diffrerent case", "content": "Github error messages are now in different case\n"}}, {"doc": {"_id": 461, "title": "Now following PEP8 code style in whole code base", "content": "fixed issue #446 \n"}}, {"doc": {"_id": 460, "title": "Replace deprecated \"permission\" with \"privacy\" in create_team.", "content": "The \"Create team\" endpoint in the teams API allows to specify `privacy` as a parameter while the `permissions` parameter is deprecated. See https://developer.github.com/v3/orgs/teams/#create-team\n"}}, {"doc": {"_id": 459, "title": "create_git_tree cannot handle binary data", "content": "If I try to use `create_git_tree` to add a PNG file, I get the dreaded\n\n>  UnicodeDecodeError: 'utf8' codec can't decode byte 0x89 in position 0: invalid start byte\n\nIf I `base64` encode the PNG data, I can change it later using `update_file`. However, this results in two separate commits.\n"}}, {"doc": {"_id": 458, "title": "fix repository", "content": "I found Readme demo the following doesn't work.\n\n``` python\nfrom github import Github\n\n# First create a Github instance:\ng = Github(\"user\", \"password\")\n\n# Then play with your Github objects:\nfor repo in g.get_user().get_repos():\n    print repo.name\n    repo.edit(has_wiki=False)\n```\n\nRaised: `TypeError: edit() takes at least 2 arguments (2 given)`\nBecause Repository.edit needs `name` argument, but not used in demo.\n\nIn many cases, I think name equals self.name, so I set it as default value.\n"}}, {"doc": {"_id": 457, "title": "Fetching the Organization's members does not return the email address", "content": "Hi, \n\nFetching the organization members does not return the email address of the github user (which is correct according to the documentation: https://developer.github.com/v3/orgs/members/#response)\n\nIt is an idea to add an additional call tot fetch the user itself (https://developer.github.com/v3/users/#get-a-single-user) so completed NamedUser objects are returned?\n"}}, {"doc": {"_id": 456, "title": "Guide or documentation for . . . . .", "content": "my objective is to automate the following, but the documentation isnt clear/has gaps\n1.  Create a tag\n2.  Create a branch\n3.  Touch a version file\n4.  Commit version touch from step 3\n5.  Build and deploy apps\n6.  Push branch upon successful build & deploy\n\ndoes anyone have a functioning example - I have searched all the links posted previously and they all link back to the very trivial hello world example in the documentation.  \n"}}, {"doc": {"_id": 455, "title": "DOC: remove easy_install suggestion; update links", "content": "Remove suggestion to use easy_install, it's strongly deprecated now.\n\nChange github.com/jacquev6 to github.com/PyGithub\n"}}, {"doc": {"_id": 454, "title": "Add ability to set permission for team repo", "content": "https://developer.github.com/v3/orgs/teams/#add-or-update-team-repository\n"}}, {"doc": {"_id": 453, "title": "Add fields", "content": ""}}, {"doc": {"_id": 452, "title": "Add release datetime fields", "content": ""}}, {"doc": {"_id": 451, "title": "Fix status check", "content": "Fixes redirect status check as stated here:\nhttps://github.com/PyGithub/PyGithub/pull/403#issuecomment-244069423\n"}}, {"doc": {"_id": 450, "title": "Add description to teams", "content": "As mentioned at https://developer.github.com/v3/orgs/teams/ , a team also has a description. This is currently not part of the Teams https://github.com/PyGithub/PyGithub/blob/master/github/Team.py\n\nWould be great if this can be added\n"}}, {"doc": {"_id": 449, "title": "GitHub integrations support", "content": "This PR adds support for the all new [GitHub Integrations](https://developer.github.com/early-access/integrations/authentication/).\r\n\r\nSince the `GithubIntegration` is the main entrypoint to obtain access tokens, I've created it alongside the `Github` main class.\r\n\r\nI wasn't able to recycle much of the functionality in `Requester` because the integration is too coupled with the `Github` main class. Instead, I've used the _wonderful_ httplib.\r\n### Usage\r\n\r\n``` python\r\nfrom github import GithubIntegration, Github\r\n\r\n# obtained during integration creation\r\nprivate_key = \"some private key\"\r\nintegration_id = 123\r\n\r\n# obtained when a user installs the integration (webhook)\r\ninstallation_id = 456\r\n\r\n# get a token\r\nintegration = GithubIntegration(integration_id, private_key)\r\nauth = integration.get_access_token(installation_id)\r\n\r\ngh = GitHub(auth.token)\r\nrepo = gh.get_repo(\"user/whatever\")\r\n```\r\n### Tests\r\n\r\nNone, yet. Integrations are in early access right now. I think it's safe to add tests once the API is stable.\r\n### Added dependencies\r\n\r\nIn order to create the JSON web token, this PR adds [python-jose](https://github.com/mpdavis/python-jose). Another candidate is [pyjwt](https://github.com/jpadilla/pyjwt), but that isn't installable on Google Compute Engine.\r\n"}}, {"doc": {"_id": 448, "title": "Support directories in repo.get_contents", "content": "This PR adds support for directories, see https://developer.github.com/v3/repos/contents/#response-if-content-is-a-directory.\n"}}, {"doc": {"_id": 447, "title": "forks_count / stargazers_count / open_issues_count is None if redirected repo", "content": "Hello,\n\nI'm getting `None` when trying to get properties of redirected repo, for example https://github.com/visionmedia/express is redirected to https://github.com/expressjs/express\n\n```\nprint(github.Github(token).get_repo('expressjs/express').forks_count)\n5103\nprint(github.Github(token).get_repo('visionmedia/express').forks_count)\nNone\n```\n\nthe same for `stargazers_count`, `open_issues_count`, `full_name`, etc.\n\nUsing version 1.28\n"}}, {"doc": {"_id": 446, "title": "Follow PEP8", "content": "Some codes (variables, methods) don't follow PEP8.\n\nWhy the codes don't follow PEP8?\n"}}, {"doc": {"_id": 445, "title": "Nicer __repr__ for GithubObjects", "content": "This one got stupidly large, but once you go into that rabbit hole there's no easy way out.\n\nThe PR basically just adds a nicer `__repr__` for GithubObjects. That's extremely helpful in logs and when playing around with PyGithub in a shell.\n\nTurns this:\n\n``` python\ngithub.NamedUser.NamedUser at 0x7fba7f6fcfd0\ngithub.PullRequest.PullRequest at 0x7fba7f6fcfd0\ngithub.CommitComment.CommitComment at 0x7fba7f6fcfd0\ngithub.ContentFile.ContentFile at 0x7fba7f6fcfd0\ngithub.Tag.Tag at 0x7fba7f6fcfd0\ngithub.GitTree.GitTree at 0x7fba7f6fcfd0\n```\n\ninto that:\n\n``` python\nNamedUser(login=\"nvie\")\nPullRequest(number=31, title=\"Title edited by PyGithub\")\nCommitComment(id=1361949, user=NamedUser(login=\"jacquev6\"))\nContentFile(path=\"ReadMe.md\")\nTag(commit=Commit(sha=\"636e6112deb72277b3bffcc3303cd7e8a7431a5d\"), name=\"v0.3\")\nGitTree(sha=\"f492784d8ca837779650d1fb406a1a3587a764ad\")\n```\n"}}, {"doc": {"_id": 444, "title": "first pass at enforcement_level -> include_admins", "content": "also added \"strict\" param, seems like during the API preview period GitHub has changed (renamed) and added some things\n\nthe tests are not passing for me locally and I think they'll probably fail in travis, too - I'm hoping for some help on this one because I think I'm doing something simple/obvious wrong but I'd like this \"protect branch\" logic to work in pygithub.\n"}}, {"doc": {"_id": 443, "title": "Repo stats API out-dated", "content": "Hi, I'm encountering a small issue wherein the `.contributions` attribute of a `NamedUser` instance returns `None`. Here's the code:\n\n``` python\nuser = gh.get_user('example_user')\nprint user.contributions\n```\n\nThe output is always `None`. Here `gh` is the `MainClass.Github` authorized instance. Am I doing something wrong here? Thanks a lot for the help!\nP.S. My `pygithub` is in sync with upstream.\n"}}, {"doc": {"_id": 442, "title": "Properly handle HTTP Proxy authentication with Python 3", "content": "PyGithub doesn't properly handle HTTP Proxy authentication under Python 3, as it tries to pass a string to base64.b64encode(), when under Python 3 it needs to be a byte-like object.\n\nSimple test case:\n- Set your HTTP_PROXY environment variable to point at a valid HTTP proxy that requires authentication.\n- Try to run the simple reproducer code below:\n\n```\n#!/usr/bin/env python3\nfrom github import Github\ngh=Github(\"jaredsmith\",\"obviouslynotmyrealpassword\")\norg_object=gh.get_organization(\"PyGithub\")\n```\n- Notice that it throws the following error:\n\n```\nTypeError: a bytes-like object is required, not 'str'\n```\n"}}, {"doc": {"_id": 441, "title": "Set permissions when adding a repository to a team", "content": "Currently it is not possible to specify, set or update the permissions of a team for a repository. The team's default permissions are used:\n\nThis is possible in the GitHub API:\nhttps://developer.github.com/v3/orgs/teams/#parameters-3\n\nIdea to add this to: https://github.com/PyGithub/PyGithub/blob/master/github/Team.py#L137\n?\n"}}, {"doc": {"_id": 440, "title": "Add a link to the documentation?", "content": "I found the documentation here (http://pygithub.readthedocs.io/), but I didn't see a link to there from GitHub. Perhaps this could be added to the README or set as the project's website on GitHub?\n"}}, {"doc": {"_id": 439, "title": "Add support for multiple assignees", "content": "Is officially part of the API as per:\nhttps://developer.github.com/changes/2016-07-12-ending-multiple-assignees-preview-period/\n\nAlso possibly deprecate the assignee keyword for issue creation. Item 25 here: https://developer.github.com/v3/versions/#v3-deprecations\n"}}, {"doc": {"_id": 438, "title": "Fix small typo", "content": "This PR is only for fix small typo.\nRepositorys -> Repositories\n"}}, {"doc": {"_id": 437, "title": "Releases based on travis ", "content": "This PR allows travis to push new PyPi releases based on git tags.\n\nFurthermore, I've revamped the `manage.sh` script a little:\n- removed the `check` and `test` function calls (that's now done by travis)\n- updated the `readme` function to automatically create a changelog based on the commits between the previous release and now\n- removed the twitter script\n\nIn order to issue a new release, one of the maintainers has to run `sh manage.sh publish` locally. This bumps the version, creates a new git tag, updates the changelog and pushes the changes to origin. Travis then picks up the job and runs the tests. If the tests are passing, travis creates a new release on PyPi.\n\nOf course, this can all be done manually. All that's really needed is an updated version in `setup.py` and a tagged commit.\n\nEverything **should** work as expected, but since there are multiple layers involved (github, travis, PyPi) there was no way to fully test it.\n\n*fingers crossed*\n"}}, {"doc": {"_id": 436, "title": "change file content encoding to support unicode(like chinese), py2", "content": "The case is that: my file is written in Chinese which is encoded in unicode, and when i create or update a file the progress is broken because the b64encode gives me UnicodeEncodeError.\n\nThe solution is simple, in the python2, encode the file content if it is instance of unicode type using 'utf-8'.\n"}}, {"doc": {"_id": 435, "title": "Get repos missing params", "content": "`gh.get_user().get_repos()` is missing parameters: visibility, affiliation\n\nhttps://developer.github.com/v3/repos/#list-your-repositories\n"}}, {"doc": {"_id": 434, "title": "Can't get organization from Team object", "content": "`GET /user/teams` (e.g. `user.get_teams()`) returns more data than the `Team` object supports. For example, the organization dictionary. Links to docs: https://developer.github.com/v3/orgs/teams/#list-user-teams https://developer.github.com/v3/orgs/teams/#get-team\n"}}, {"doc": {"_id": 433, "title": "Implement __len__ on the PaginatedList", "content": "See #415 \n"}}, {"doc": {"_id": 432, "title": "Document testing framework", "content": "PyGithub comes with it's own testing framework that allows to record and replay requests.\n\nCurrently, there is no straightforward documentation for it.\n"}}, {"doc": {"_id": 431, "title": "Add support for squash merge", "content": "In April, Github introduced squash merges, see https://github.com/blog/2141-squash-your-commits\n\nThis functionality is exposed through a preview API: https://developer.github.com/changes/2016-04-01-squash-api-preview/\n\nPyGithub should support this in https://github.com/PyGithub/PyGithub/blob/master/github/PullRequest.py's \"merge\" method.\n"}}, {"doc": {"_id": 430, "title": "New release", "content": "Hi, can you please publish a new release. `add_membership` is currently broken in the latest release due to this changeset not being included:\n\nhttps://github.com/PyGithub/PyGithub/commit/a06b5ecfb215eda49c63d06a49cfefb33b12ad9e#diff-20d5f1aeabe90232d524e590cc5d1972\n"}}, {"doc": {"_id": 429, "title": "Two-Factor Authentication should be available for all commands", "content": "The current implementation of 2FA is to generate an authorization token and use that for subsequent commands. Unfortunately, this is incompatible with the authorizations API itself:\n\n```\n    github = Github(args.username, args.password)\n    user = github.get_user()\n\n    try:\n        otp_auth = user.create_authorization(scopes=['user'], note='otp_auth')\n    except GithubException as e:\n        # Unable to import TwoFactorAuthentication for some reason. Just assume anything\n        # that goes wrong is due to 2fa.\n        otp_key = raw_input(\"Enter github Two-Factor Auth key: \")\n        otp_auth = user.create_authorization(scopes=['user'], note='otp_auth', onetime_password=otp_key)\n\n    github = Github(otp_auth.token)\n    for authorization in github.get_user().get_authorizations():\n        authorization.delete()\n```\n\nresults in\n\n```\ngithub.GithubException.GithubException: 403 {\n    u'documentation_url': u'https://developer.github.com/enterprise/2.6/v3/oauth_authorizations/#oauth-authorizations-api',\n    u'message': u'This API can only be accessed with username and password Basic Auth'\n}\n```\n\nI see two options:\n- Adding a top-level `otp_key` parameter that gets passed down into the `Requester`\n  - This would be easy to implement, but the github object would have to be reinitialized frequently as OTP keys changed\n- Permitting all API methods to specify their own `otp_key`, which gets added to `requestHeaders`\n  - This would be frustrating, but would ensure that there are no API calls that can't be used via this API.\n"}}, {"doc": {"_id": 428, "title": "Patch issue 358 status context", "content": "This change adds a context attribute to the CommitStatus.\n\nThis addresses https://github.com/PyGithub/PyGithub/issues/358.\n\nI've added the context as a attribute test in the CommitStatus test-case and modified the replay data accordingly. Tests pass:\n\n```\n$ python -m github.tests \n..............................................................................................................................................................................................................................................................................................................................................................................................................................\n----------------------------------------------------------------------\nRan 414 tests in 4.334s\n\nOK\n```\n\nThe example repro in the issue also works.\n"}}, {"doc": {"_id": 427, "title": "Docstrings problem", "content": "I'm using PyCharm for my development environment. I noticed that your code is rather well documented using docstrings. For example:\n\n``` python\n    def get_user(self, login=github.GithubObject.NotSet):\n        \"\"\"\n        :calls: `GET /users/:user <http://developer.github.com/v3/users>`_ or `GET /user <http://developer.github.com/v3/users>`_\n        :param login: string\n        :rtype: :class:`github.NamedUser.NamedUser`\n        \"\"\"\n```\n\nHowever, this seems to not be the appropriate syntax, as my IDE still thinks the result could be Any. However, if I remove the `:class:`, it works properly. Could you send me any links that point to the `:class:` standard? I am going off of [this](https://www.jetbrains.com/help/pycharm/2016.1/type-hinting-in-pycharm.html#legacy).\n"}}, {"doc": {"_id": 426, "title": "Adding \"since\" param to Issue.get_comments()", "content": "Needed to have this for something I was working on, figured I would submit a PR.\n\nWe are developing our own in house status check to make sure that a Peer Reviewed comment (ie, \":shipit:\" comment) could not be placed on a PR before the latest commit. Thus requiring the owner of the PR to make sure they were \"completely\" finished with the PR before getting a Peer Review.\n\nWe needed to be able to collect all the comments AFTER the latest commit. This is now available via the \"since\" param. \n\nThis now adds the since param, defaulting to None. \n\nI followed the same way the \"get_issues()\" is configured inside the Repository.py \n\nAdded a test to make sure it handles the correct messaging\n"}}, {"doc": {"_id": 425, "title": "Changed default laziness of get_repo() to False", "content": "A potential fix for #353 \n\nThe optional argument \"lazy\" in the function determines whether it actually checks for the existence of the repo. Users can get around this by simply including \"False\" as a second argument when calling it. \n\nAlternatively, this fix makes the default behavior of the function to check for the repo and return 404 if it doesn't exist, as it used to be. \n"}}, {"doc": {"_id": 424, "title": "added add_to_members to organization", "content": "#399\n\nCurrently, there is no implementation of the add to (nonpublic) members. I copied the add_public_members function and lightly edited it to match the endpoint.\n"}}, {"doc": {"_id": 423, "title": "Feature request", "content": "Can we add a new property `GitCommit` for a shorter description of the commit message especially for squashed commit introduced lately by Git.\n"}}, {"doc": {"_id": 422, "title": "Timeline missing", "content": "There's a [timeline](https://developer.github.com/v3/issues/timeline/) object in github API, but it's not presented in this library. It provides more information than events. At least it seem to be the only way to get `unsubscribed` events.\n"}}, {"doc": {"_id": 421, "title": "changed \"permission\" to \"privacy\" in create_team", "content": "`permission` has been deprecated in the GitHub API, and is being replaced with a `privacy` option; see https://developer.github.com/v3/orgs/teams/#create-team\n\nI simply changed the word `permission` to `privacy` everywhere in `create_team()` so that users can use the newer parameter.\n"}}, {"doc": {"_id": 420, "title": "Update doc url", "content": "I noticed that the URL for pygithub was pointing to the prior jacquev6 URL, which just redirects to pygithub.github.io. Not a big issue, I know, but seemed trivial to change it everywhere. I updated it everywhere save one place, the github/tests/ReplayData/ExposeAllAttributes.testAllClasses.txt - I'm not sure how to generate that file (the tests are not working/passing for me locally even on master, I get some variations of `FAILED (failures=63, errors=328)` or `FAILED (failures=174, errors=188)` and I haven't dug into it beyond following the basic instructions in CONTRIBUTING.md which haven't fixed it my local environment. Seems maybe all tests can only run locally for users with write access to github.com/jacquev6 org? NB that the pygithub.github.io URL is long enough that it made sense to put on a separate line given the current char width of the copyright notice. I welcome any additional advice on how I can run all the tests locally and/or how to generate that ExposeAllAttributes.testAllClasses replaydata (I couldn't find a single matching test named that, assuming I need to run them all).\n"}}, {"doc": {"_id": 419, "title": "fix a couple typos to be clearer", "content": "I found the section on PRs wasn't completely clear - the problem I'm attempting to solve is to change the grammar and make it clearer what the project wants from PRs. My approach was to modify the text to use a bulleted list.\n\nI also found different case used for `GitHubCredentials.py` and `Githubcredentials.py` and went with the lowercase `h` since I confirmed that worked in my local testing.\n\nI thought it would be helpful to mention that `password` is still required in `GithubCredentials.py` even when using an `--auth-with-token` token, I got an error when I left it out (`AttributeError: 'module' object has no attribute 'password'`).\n"}}, {"doc": {"_id": 418, "title": "Adding \"squash\" commits to single commit merge option", "content": "This option is currently offered in their preview, but I have noticed other \"preview\" code in PyGithub so I am opening my PR. \n\nhttps://developer.github.com/v3/pulls/#merge-a-pull-request-merge-button\n\nThis now allows the \"squash commits\" before merging, if it's chosen as the default action\n"}}, {"doc": {"_id": 417, "title": "Document how one gets an AuthenticatedUser object", "content": "I just spent an embarrassing number of minutes trying to figure out why calling `get_user('edunham')` was returning a `NamedUser` object and how I was supposed to get an `AuthenticatedUser` instead. \n\nIt seems that I'm also [not the first](http://stackoverflow.com/questions/28675121/how-to-create-a-new-repository-with-pygithub/38212843) to run into the issue of \"where does an AuthenticatedUser object come from?\". \n\nThe docs for AuthenticatedUser were the first place I looked for the solution, so they seem like a sensible place to leave hints for future people encountering the same frustrations.\n"}}, {"doc": {"_id": 416, "title": "Duplicate request for every iteration", "content": "It seems when in iteration, the request will duplicate every item. How to deal with it? For example, the user.get_watched() will do many requests to Github, but actually I just need one time.\n\n``` python\nfor repo in user.get_watched()\n```\n"}}, {"doc": {"_id": 415, "title": "github.PaginatedList.PaginatedList totalCount return None", "content": "My question is why invoking totalCount directly return None, but iterate will get the number.\n\n``` python\n            repo_commits = repo.get_commits()\n            repo_total = 0\n            for _ in repo_commits:\n                repo_total = repo_total + 1\n```\n\n``` python\n            repo_total = repo.get_commits().totalCount\n```\n"}}, {"doc": {"_id": 414, "title": "Milestone `due_on` Time format fix", "content": ""}}, {"doc": {"_id": 413, "title": "fix wrong expectance on requestJsonAndCheck() returning {} if no data", "content": "When there's no data, requestJsonAndCheck(), or rather\n__structuredFromJson() returns None rather than {}.\nAs both None & {} evaluates to false, 'if not data:' will give the\ncorrect behaviour regardless of returning {} or None.\n"}}, {"doc": {"_id": 412, "title": "Add previous_filename property to File", "content": "GitHub API uses the status \"renamed\" for the new file when a filename is changed rather than a separate \"Added\" and \"Removed\" file. The original filename is provided for such files, but is not currently exposed via an attribute of a github.File.File.\n"}}, {"doc": {"_id": 411, "title": "Example using OAUTH Access Token with Enterprise Installation", "content": "I have had no success getting PyGithub to work with an Enterprise installation and am having difficulty debugging the issue. I have tried the example in the introduction. For example:\n\n``` python\nfrom github import Github\naccess_token = 'BLAH'\ngh = Github(access_token, base_url='https://myorg.github.com/api/v3')\ngh.get_user().name\n```\n\nAnd then I get:\n\n```\n/home/llnunno/.local/lib/python2.7/site-packages/github/GithubObject.pyc in _storeAndUseAttributes(self, headers, attributes)\n     84         self._headers = headers\n     85         self._rawData = attributes\n---> 86         self._useAttributes(attributes)\n     87 \n     88     @property\n\n/home/llnunno/.local/lib/python2.7/site-packages/github/AuthenticatedUser.pyc in _useAttributes(self, attributes)\n   1085 \n   1086     def _useAttributes(self, attributes):\n-> 1087         if \"avatar_url\" in attributes:  # pragma no branch\n   1088             self._avatar_url = self._makeStringAttribute(attributes[\"avatar_url\"])\n   1089         if \"bio\" in attributes:  # pragma no branch\n\nTypeError: argument of type 'NoneType' is not iterable\n```\n\nDo I need additional information in the `Github` constructor? There is no documentation for any of the constructor arguments.\n\nWhere the access token is generated via Account Settings -> Applications -> Personal access tokens. I know the access token is valid because I can send requests to the API manually and get responses.\n"}}, {"doc": {"_id": 410, "title": "Using Registered App?", "content": "I was using PyGithub for a while now. Lately, I was using Personal\nAccess tokens for doing authentication.\n\nNow I want to use it as a registered application. Can you provide a\nhint of how to do this? I used the Client ID in place of token but it\ndidn't work out.\n\nI am working on an application that is in command-line interface currently.\n"}}, {"doc": {"_id": 409, "title": "No method to create files", "content": "It looks like the repository class is missing a `create_file` method to implement the following API:\n\nhttps://developer.github.com/v3/repos/contents/#create-a-file\n"}}, {"doc": {"_id": 408, "title": "How to get submodule owner name?", "content": "``` python\nrepo = g.get_user(github_username).get_repo(repository)\nfor x in repo.get_dir_contents(\"\"):\n    if(x.raw_data.get(\"type\") == \"submodule\"):\n        print(x.name)\n        print(x.raw_data.get(\"submodule_git_url\"))\n```\n\nHow can I get the owner name and description of the submodule? I got the URL of submodule already.\n\nThank you.\n\nEntire code is here: https://github.com/mandeeps708/Github-API-Fun/blob/master/get-submodules.py\nhttps://mandeep7.wordpress.com/2016/06/14/fetching-github-submodules/\n"}}, {"doc": {"_id": 407, "title": "added get_orgs() to MainClass.py", "content": ""}}, {"doc": {"_id": 406, "title": "Check if PaginatedList isEmpty", "content": "How would I go about verifying if a PaginatedList is empty, or returned nothing from my repo? I have tried the usual python mechanisms for checking if a list is empty like: if not <listObject>: and so on, but they do not seem to work on the PaginatedList. The tool I am building grabs the latest pull request and commit information from a given repo. If there are no open pull requests, I would like to do something other than throwing a list index out of range exception every time.  \n"}}, {"doc": {"_id": 405, "title": "Add support for read only deploy keys", "content": "Deploy keys have a field \"read_only\", which cannot currently be set or retrieved.\nhttps://developer.github.com/v3/repos/keys/\n"}}, {"doc": {"_id": 404, "title": "support multiple assignees on issues", "content": "see https://github.com/blog/2178-multiple-assignees-on-issues-and-pull-requests\n\nhttps://developer.github.com/v3/issues/assignees/#add-assignees-to-an-issue\n"}}, {"doc": {"_id": 403, "title": "Follow redirects in the case of a 301 status code", "content": "PyGithub does not follow HTTP redirects. This issue is visible when a repository is moved on GitHub. GitHub returns a proper 301 with a new location for the resource, but httplib does not follow redirects on it's own.\n\nThis PR ensures it follow redirects when a 301 is returned and a location header is provided in the response.\n\nI was unable to add a test case for it as it does not seem possible to have multiple exchanges while using ReplayingConnection.\n\nHere is an example curl (test_redirect was renamed to test_redirect_new_name)\n\n```\n~$ curl -v https://api.github.com/repos/mat128/test_redirect\n* Adding handle: conn: 0x7fb7a9804000\n* Adding handle: send: 0\n* Adding handle: recv: 0\n* Curl_addHandleToPipeline: length: 1\n* - Conn 0 (0x7fb7a9804000) send_pipe: 1, recv_pipe: 0\n* About to connect() to api.github.com port 443 (#0)\n*   Trying 192.30.252.126...\n* Connected to api.github.com (192.30.252.126) port 443 (#0)\n* TLS 1.2 connection using TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\n* Server certificate: *.github.com\n* Server certificate: DigiCert SHA2 High Assurance Server CA\n* Server certificate: DigiCert High Assurance EV Root CA\n> GET /repos/mat128/test_redirect HTTP/1.1\n> User-Agent: curl/7.30.0\n> Host: api.github.com\n> Accept: */*\n>\n< HTTP/1.1 301 Moved Permanently\n* Server GitHub.com is not blacklisted\n< Server: GitHub.com\n< Date: Fri, 27 May 2016 13:28:20 GMT\n< Content-Type: application/json; charset=utf-8\n< Content-Length: 168\n< Status: 301 Moved Permanently\n< X-RateLimit-Limit: 60\n< X-RateLimit-Remaining: 55\n< X-RateLimit-Reset: 1464359212\n< Location: https://api.github.com/repositories/59836255\n< X-GitHub-Media-Type: github.v3\n< Access-Control-Expose-Headers: ETag, Link, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval\n< Access-Control-Allow-Origin: *\n< Content-Security-Policy: default-src 'none'\n< Strict-Transport-Security: max-age=31536000; includeSubdomains; preload\n< X-Content-Type-Options: nosniff\n< X-Frame-Options: deny\n< X-XSS-Protection: 1; mode=block\n< Vary: Accept-Encoding\n< X-Served-By: 2811da37fbdda4367181b328b22b2499\n< X-GitHub-Request-Id: 6CA39808:1C0C2:B6973CA:57484B74\n<\n{\n  \"message\": \"Moved Permanently\",\n  \"url\": \"https://api.github.com/repositories/59836255\",\n  \"documentation_url\": \"https://developer.github.com/v3/#http-redirects\"\n}\n* Connection #0 to host api.github.com left intact\n```\n\nUsing curl's --location parameter, it correctly follows the redirect:\n\n```\n~$ curl -v --location https://api.github.com/repos/mat128/test_redirect\n* Adding handle: conn: 0x7ffdc2804000\n* Adding handle: send: 0\n* Adding handle: recv: 0\n* Curl_addHandleToPipeline: length: 1\n* - Conn 0 (0x7ffdc2804000) send_pipe: 1, recv_pipe: 0\n* About to connect() to api.github.com port 443 (#0)\n*   Trying 192.30.252.125...\n* Connected to api.github.com (192.30.252.125) port 443 (#0)\n* TLS 1.2 connection using TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\n* Server certificate: *.github.com\n* Server certificate: DigiCert SHA2 High Assurance Server CA\n* Server certificate: DigiCert High Assurance EV Root CA\n> GET /repos/mat128/test_redirect HTTP/1.1\n> User-Agent: curl/7.30.0\n> Host: api.github.com\n> Accept: */*\n>\n< HTTP/1.1 301 Moved Permanently\n* Server GitHub.com is not blacklisted\n< Server: GitHub.com\n< Date: Fri, 27 May 2016 13:29:26 GMT\n< Content-Type: application/json; charset=utf-8\n< Content-Length: 168\n< Status: 301 Moved Permanently\n< X-RateLimit-Limit: 60\n< X-RateLimit-Remaining: 54\n< X-RateLimit-Reset: 1464359212\n< Location: https://api.github.com/repositories/59836255\n< X-GitHub-Media-Type: github.v3\n< Access-Control-Expose-Headers: ETag, Link, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval\n< Access-Control-Allow-Origin: *\n< Content-Security-Policy: default-src 'none'\n< Strict-Transport-Security: max-age=31536000; includeSubdomains; preload\n< X-Content-Type-Options: nosniff\n< X-Frame-Options: deny\n< X-XSS-Protection: 1; mode=block\n< Vary: Accept-Encoding\n< X-Served-By: bd82876e9bf04990f289ba22f246ee9b\n< X-GitHub-Request-Id: 6CA39808:12715:602129C:57484BB6\n<\n* Ignoring the response-body\n* Connection #0 to host api.github.com left intact\n* Issue another request to this URL: 'https://api.github.com/repositories/59836255'\n* Found bundle for host api.github.com: 0x7ffdc2415340\n* Re-using existing connection! (#0) with host api.github.com\n* Connected to api.github.com (192.30.252.125) port 443 (#0)\n* Adding handle: conn: 0x7ffdc2804000\n* Adding handle: send: 0\n* Adding handle: recv: 0\n* Curl_addHandleToPipeline: length: 1\n* - Conn 0 (0x7ffdc2804000) send_pipe: 1, recv_pipe: 0\n> GET /repositories/59836255 HTTP/1.1\n> User-Agent: curl/7.30.0\n> Host: api.github.com\n> Accept: */*\n>\n< HTTP/1.1 200 OK\n* Server GitHub.com is not blacklisted\n< Server: GitHub.com\n< Date: Fri, 27 May 2016 13:29:26 GMT\n< Content-Type: application/json; charset=utf-8\n< Content-Length: 5478\n< Status: 200 OK\n< X-RateLimit-Limit: 60\n< X-RateLimit-Remaining: 53\n< X-RateLimit-Reset: 1464359212\n< Cache-Control: public, max-age=60, s-maxage=60\n< Vary: Accept\n< ETag: \"b05d4f4a2ac7c32e1fed5e1ee2ef40ac\"\n< Last-Modified: Fri, 27 May 2016 13:27:48 GMT\n< X-GitHub-Media-Type: github.v3\n< Access-Control-Expose-Headers: ETag, Link, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval\n< Access-Control-Allow-Origin: *\n< Content-Security-Policy: default-src 'none'\n< Strict-Transport-Security: max-age=31536000; includeSubdomains; preload\n< X-Content-Type-Options: nosniff\n< X-Frame-Options: deny\n< X-XSS-Protection: 1; mode=block\n< Vary: Accept-Encoding\n< X-Served-By: 2d7a5e35115884240089368322196939\n< X-GitHub-Request-Id: 6CA39808:12715:60212AE:57484BB6\n<\n{\n  \"id\": 59836255,\n  \"name\": \"test_redirect_new_name\",\n  \"full_name\": \"mat128/test_redirect_new_name\",\n  \"owner\": {\n    \"login\": \"mat128\",\n    \"id\": 234168,\n    \"avatar_url\": \"https://avatars.githubusercontent.com/u/234168?v=3\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/mat128\",\n    \"html_url\": \"https://github.com/mat128\",\n    \"followers_url\": \"https://api.github.com/users/mat128/followers\",\n    \"following_url\": \"https://api.github.com/users/mat128/following{/other_user}\",\n    \"gists_url\": \"https://api.github.com/users/mat128/gists{/gist_id}\",\n    \"starred_url\": \"https://api.github.com/users/mat128/starred{/owner}{/repo}\",\n    \"subscriptions_url\": \"https://api.github.com/users/mat128/subscriptions\",\n    \"organizations_url\": \"https://api.github.com/users/mat128/orgs\",\n    \"repos_url\": \"https://api.github.com/users/mat128/repos\",\n    \"events_url\": \"https://api.github.com/users/mat128/events{/privacy}\",\n    \"received_events_url\": \"https://api.github.com/users/mat128/received_events\",\n    \"type\": \"User\",\n    \"site_admin\": false\n  },\n  \"private\": false,\n  \"html_url\": \"https://github.com/mat128/test_redirect_new_name\",\n  \"description\": \"\",\n  \"fork\": false,\n  \"url\": \"https://api.github.com/repos/mat128/test_redirect_new_name\",\n  \"forks_url\": \"https://api.github.com/repos/mat128/test_redirect_new_name/forks\",\n  \"keys_url\": \"https://api.github.com/repos/mat128/test_redirect_new_name/keys{/key_id}\",\n  \"collaborators_url\": \"https://api.github.com/repos/mat128/test_redirect_new_name/collaborators{/collaborator}\",\n  \"teams_url\": \"https://api.github.com/repos/mat128/test_redirect_new_name/teams\",\n  \"hooks_url\": \"https://api.github.com/repos/mat128/test_redirect_new_name/hooks\",\n  \"issue_events_url\": \"https://api.github.com/repos/mat128/test_redirect_new_name/issues/events{/number}\",\n  \"events_url\": \"https://api.github.com/repos/mat128/test_redirect_new_name/events\",\n  \"assignees_url\": \"https://api.github.com/repos/mat128/test_redirect_new_name/assignees{/user}\",\n  \"branches_url\": \"https://api.github.com/repos/mat128/test_redirect_new_name/branches{/branch}\",\n  \"tags_url\": \"https://api.github.com/repos/mat128/test_redirect_new_name/tags\",\n  \"blobs_url\": \"https://api.github.com/repos/mat128/test_redirect_new_name/git/blobs{/sha}\",\n  \"git_tags_url\": \"https://api.github.com/repos/mat128/test_redirect_new_name/git/tags{/sha}\",\n  \"git_refs_url\": \"https://api.github.com/repos/mat128/test_redirect_new_name/git/refs{/sha}\",\n  \"trees_url\": \"https://api.github.com/repos/mat128/test_redirect_new_name/git/trees{/sha}\",\n  \"statuses_url\": \"https://api.github.com/repos/mat128/test_redirect_new_name/statuses/{sha}\",\n  \"languages_url\": \"https://api.github.com/repos/mat128/test_redirect_new_name/languages\",\n  \"stargazers_url\": \"https://api.github.com/repos/mat128/test_redirect_new_name/stargazers\",\n  \"contributors_url\": \"https://api.github.com/repos/mat128/test_redirect_new_name/contributors\",\n  \"subscribers_url\": \"https://api.github.com/repos/mat128/test_redirect_new_name/subscribers\",\n  \"subscription_url\": \"https://api.github.com/repos/mat128/test_redirect_new_name/subscription\",\n  \"commits_url\": \"https://api.github.com/repos/mat128/test_redirect_new_name/commits{/sha}\",\n  \"git_commits_url\": \"https://api.github.com/repos/mat128/test_redirect_new_name/git/commits{/sha}\",\n  \"comments_url\": \"https://api.github.com/repos/mat128/test_redirect_new_name/comments{/number}\",\n  \"issue_comment_url\": \"https://api.github.com/repos/mat128/test_redirect_new_name/issues/comments{/number}\",\n  \"contents_url\": \"https://api.github.com/repos/mat128/test_redirect_new_name/contents/{+path}\",\n  \"compare_url\": \"https://api.github.com/repos/mat128/test_redirect_new_name/compare/{base}...{head}\",\n  \"merges_url\": \"https://api.github.com/repos/mat128/test_redirect_new_name/merges\",\n  \"archive_url\": \"https://api.github.com/repos/mat128/test_redirect_new_name/{archive_format}{/ref}\",\n  \"downloads_url\": \"https://api.github.com/repos/mat128/test_redirect_new_name/downloads\",\n  \"issues_url\": \"https://api.github.com/repos/mat128/test_redirect_new_name/issues{/number}\",\n  \"pulls_url\": \"https://api.github.com/repos/mat128/test_redirect_new_name/pulls{/number}\",\n  \"milestones_url\": \"https://api.github.com/repos/mat128/test_redirect_new_name/milestones{/number}\",\n  \"notifications_url\": \"https://api.github.com/repos/mat128/test_redirect_new_name/notifications{?since,all,participating}\",\n  \"labels_url\": \"https://api.github.com/repos/mat128/test_redirect_new_name/labels{/name}\",\n  \"releases_url\": \"https://api.github.com/repos/mat128/test_redirect_new_name/releases{/id}\",\n  \"deployments_url\": \"https://api.github.com/repos/mat128/test_redirect_new_name/deployments\",\n  \"created_at\": \"2016-05-27T13:27:40Z\",\n  \"updated_at\": \"2016-05-27T13:27:48Z\",\n  \"pushed_at\": \"2016-05-27T13:27:41Z\",\n  \"git_url\": \"git://github.com/mat128/test_redirect_new_name.git\",\n  \"ssh_url\": \"git@github.com:mat128/test_redirect_new_name.git\",\n  \"clone_url\": \"https://github.com/mat128/test_redirect_new_name.git\",\n  \"svn_url\": \"https://github.com/mat128/test_redirect_new_name\",\n  \"homepage\": null,\n  \"size\": 0,\n  \"stargazers_count\": 0,\n  \"watchers_count\": 0,\n  \"language\": null,\n  \"has_issues\": true,\n  \"has_downloads\": true,\n  \"has_wiki\": true,\n  \"has_pages\": false,\n  \"forks_count\": 0,\n  \"mirror_url\": null,\n  \"open_issues_count\": 0,\n  \"forks\": 0,\n  \"open_issues\": 0,\n  \"watchers\": 0,\n  \"default_branch\": \"master\",\n  \"network_count\": 0,\n  \"subscribers_count\": 1\n}\n* Connection #0 to host api.github.com left intact\n```\n\nI have manually tested the code included in the PR with success.\n"}}, {"doc": {"_id": 402, "title": "N_TOKENS is not defined", "content": "When calling `help()` on anything within the repo, for example `help(github)`, I get the following error:\n\n```\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/usr/lib64/python2.6/site.py\", line 432, in __call__\n    import pydoc\n  File \"/usr/lib64/python2.6/pydoc.py\", line 52, in <module>\n    import sys, imp, os, re, types, inspect, __builtin__, pkgutil\n  File \"/usr/lib64/python2.6/inspect.py\", line 39, in <module>\n    import tokenize\n  File \"/usr/lib64/python2.6/tokenize.py\", line 38, in <module>\n    COMMENT = N_TOKENS\nNameError: name 'N_TOKENS' is not defined\n```\n"}}, {"doc": {"_id": 401, "title": "Please don't ask people to send me email", "content": "Hello,\n\nin the readme, you're asking people to send me an e-mail if they want to contribute. I'm afraid I'm doing a terrible job at replying their messages, so you should handle this without involving me.\n\n@jzelinskie you're now an admin of the org so that you can add people and make them admins as well if appropriate. Please let me know in this issue if you need me to do anything else.\n\nThanks,\n"}}, {"doc": {"_id": 400, "title": "Added support to consider No proxy settings", "content": "This change is to add support to no_proxy settings. \n\nCurrently all requests are routed to proxy is a proxy is specified in `http_proxy` or `https_proxy`. But for Github enterprise servers such as ours we have dedicated servers on intranet hence the request should bypass proxy.\n"}}, {"doc": {"_id": 399, "title": "Add support for adding/updating organization membership", "content": "Add support for this endpoint. \n\nhttps://developer.github.com/v3/orgs/members/#add-or-update-organization-membership\n"}}, {"doc": {"_id": 398, "title": "Implement get_license as provided in preview by GitHub", "content": "GitHub does the job of parsing the repository's License file to extract License info https://developer.github.com/v3/licenses/#get-a-repositorys-license\n\nIt would be nice to have this available in the PyGithub.\n"}}, {"doc": {"_id": 397, "title": "fix datetime format for milestone due date", "content": "relates to #396 \n"}}, {"doc": {"_id": 396, "title": "Bad format of due date in create milestone", "content": "Format of date in create milstone doesn't follow github api. See https://developer.github.com/v3/issues/milestones/#create-a-milestone\n\ntest code\n\n```\nimport datetime\nimport github\n\nsecret = '********'\napi=github.Github(secret)\nrepo = api.get_repo(\"zaibon/temp\")\nrepo.create_milestone(title=\"test\", description=\"hello word\", due_on=datetime.datetime.now())\n```\n\nError\n\n```\nTraceback (most recent call last):\n  File \"test.py\", line 8, in <module>\n    repo.create_milestone(title=\"test\", description=\"hello word\", due_on=datetime.datetime.now())\n  File \"/usr/local/lib/python3.5/dist-packages/github/Repository.py\", line 954, in create_milestone\n    input=post_parameters\n  File \"/usr/local/lib/python3.5/dist-packages/github/Requester.py\", line 171, in requestJsonAndCheck\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, cnx))\n  File \"/usr/local/lib/python3.5/dist-packages/github/Requester.py\", line 179, in __check\n    raise self.__createException(status, responseHeaders, output)\ngithub.GithubException.GithubException: 422 {'message': 'Invalid request.\\n\\n2016-04-13 is not a valid date-time.', 'documentation_url': 'https://developer.github.com/v3/issues/milestones/#create-a-milestone'}\n```\n\nI have a fix in my forked repo.\nhttps://github.com/zaibon/PyGithub/commit/8b0399c08286a0d4690d492a02f8b17cd2a24113\nIf it's good enough I can create a pull request.\n"}}, {"doc": {"_id": 395, "title": "Fix for pickling exception when deserializing GithubException.", "content": "See: https://bugs.python.org/issue9400\n\n\"Because CalledProcessError extends PyExc_BaseException, which defines a `__reduce__` method, that special method cause the pickle load to call the exception type's `__init__` method with packed `self.args` as arguments. So if a subclass of \"Exception\" needs to behave correctly in pickling, it should make `self.args` meet its `__init__` method's function signature. \"\n\n**Before:**\n\n``` python\n>>> from github import GithubException\n>>> import pickle\n>>> pickle.loads(pickle.dumps(GithubException('a', 'b')))\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/pickle.py\", line 1382, in loads\n    return Unpickler(file).load()\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/pickle.py\", line 858, in load\n    dispatch[key](self)\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/pickle.py\", line 1133, in load_reduce\n    value = func(*args)\nTypeError: __init__() takes exactly 3 arguments (1 given)\n```\n\n**After:**\n\n``` python\n>>> from github import GithubException\n>>> import pickle\n>>> pickle.loads(pickle.dumps(GithubException('a', 'b')))\nGithubException('a', 'b')\n```\n"}}, {"doc": {"_id": 394, "title": "Rendering emojis from comments", "content": "I've been looking for a while to figure out how to post comments which contain emojis. It seems that a comment which contains `:+1:` posted with pygithub isn't rendered as a :+1: on the comment. Any ideas?\n\nThanks!\n"}}, {"doc": {"_id": 393, "title": "add_to_collaborators: add permission param", "content": "Signed-off-by: Ohad Moisi ohad.moisi@tandemg.com\n"}}, {"doc": {"_id": 392, "title": "Getting releases for a repository", "content": "I'm trying to get a list of release for a repository. For that, I'm trying the following:\n\n```\n\n    client = Github(config.get_github_token(), per_page=PER_PAGE)\n    user = client.get_user('user')\n    repository = client.get_repo('repo')\n    releases = repository.get_releases()\n\n    for release in releases:\n        print 'release ', release\n        print 'release.name ', release.name\n```\n\nHowever, I got this error as a response:\n\n```\n File \"\\site-packages\\github\\PaginatedList.py\", line 48, in __iter__\n    newElements = self._grow()\n  File \"\\site-packages\\github\\PaginatedList.py\", line 60, in _grow\n    newElements = self._fetchNextPage()\n  File \"\\site-packages\\github\\PaginatedList.py\", line 161, in _fetchNextPage\n    headers=self.__headers\n  File \"\\site-packages\\github\\Requester.py\", line 171, in requestJsonAndCheck\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, cnx))\n  File \"\\site-packages\\github\\Requester.py\", line 179, in __check\n    raise self.__createException(status, responseHeaders, output)\ngithub.GithubException.GithubException: 400 {'data': 'Error page'}\n\n\n```\n"}}, {"doc": {"_id": 391, "title": "Release needed", "content": "It would be great if we can do a release.  I need the code for combined CommitStatus and get pull requests with head branch.\n\nThanks!\n"}}, {"doc": {"_id": 390, "title": "Is there a better way of listing my own repos?", "content": "The github API supports an affiliations parameter when requesting repos, but that doesn't seem to be part of the pygithub API.\n\nI therefore copied the contents of AuthenticatedUser, and added the capability:\n\n```\ndef my_repos(gh_user):\n    import github\n    return github.PaginatedList.PaginatedList(\n                github.Repository.Repository,\n                gh_user._requester,\n                gh_user.url + \"/repos\",\n                dict(affiliation=\"owner\"))\n```\n\nIs there a better way?\n\nThanks!\n"}}, {"doc": {"_id": 389, "title": "Add support for deleting git refs", "content": ""}}, {"doc": {"_id": 388, "title": "Implement functions to distinguish Equality of Objects", "content": "It would be great, if there are **eq** methods in the most classes. Programming would get much easier and less complex.\n\nThis is a dupe of #257 (which was closed, because of the deprecation of v2!?)\n"}}, {"doc": {"_id": 387, "title": "Get consecutive days", "content": "Is it possible to get consecutive days? Please advice. Thank you.\n"}}, {"doc": {"_id": 386, "title": "add params to NamedUser.get_starred", "content": "This adds a way to pass parameters to `NamedUser.get_starred`. Github [accepts](https://developer.github.com/v3/activity/starring/#parameters)) parameters on that endpoint for sorting repositories by created or updated, and for ordering direction. \n\nThis is particularly useful when a user has thousands of starred repos, and you don't want to make API calls on every PaginatedList. Instead, you can pass parameters to decide how to sort and order the returned repos.\n"}}, {"doc": {"_id": 385, "title": "UnknownObjectException", "content": "I am trying to make an object out of a repository as follows: \n\n``` python\ng = Github(username, password)\ng.get_user().get_repo(\"testrepo\")\n```\n\nThis returns the following error:\n\n``` python\ngithub.GithubException.UnknownObjectException: 404 {u'documentation_url': u'https://developer.github.com/v3', u'message': u'Not Found'}\n```\n\nAm I using get_repo incorrectly?\n"}}, {"doc": {"_id": 384, "title": "add support for the head parameter in Repository.get_pulls", "content": "https://developer.github.com/v3/pulls/#list-pull-requests\n"}}, {"doc": {"_id": 383, "title": "Replace httplib with requests", "content": "Here's a fairly simple set of tweaks to replace httplib with requests.\n\nWhy?  Two main reasons:\n- Requests is WAY better (http://docs.python-requests.org/en/latest/)\n- I wanted to use pyvcr or httpretty as a quick and simple way to unit test my scripts that used PyGithub, neither of which worked out of the box.  They both work great with requests.\n"}}, {"doc": {"_id": 382, "title": "Add ability to check combined status.", "content": "Adds:\n- CommitCombinedStatus class\n- get_combined_status() to Commit class to return combined status\n"}}, {"doc": {"_id": 381, "title": "Expose target_commitish parameter", "content": "In https://developer.github.com/v3/repos/releases/#create-a-release there is a parameter called `target_commitish` which makes it possible to tag objects other than the current head of the default branch of the repository.\n\nCurrently we are trying to create GitHub releases with PyGithub but it is in a broken state since all our releases so far are incorrectly tagged.\n\nWe've tested and confirmed that using this parameter fixes the problem.\n\nCould we add this please?\n\nThanks in advance!\n"}}, {"doc": {"_id": 380, "title": "Expose target_commitish parameter when creating GitHub releases", "content": "In https://developer.github.com/v3/repos/releases/#create-a-release there is a parameter called `target_commitish` which makes it possible to tag objects other than the current head of the default branch of the repository.\n\nCurrently we are trying to create GitHub releases with PyGithub but it is in a broken state since all our releases so far are incorrectly tagged.\n\nWe've tested and confirmed that using this parameter fixes the problem. The patch that works is very simple, see below.\n\nCould we add this please?\n\nThanks in advance!\n\n```\nFrom 10ffec64efcd1b5983c5d9c1a4df91ef86c6d774 Mon Sep 17 00:00:00 2001\nFrom: Yannis <yannis@lystable.com>\nDate: Wed, 20 Jan 2016 13:51:23 +0000\nSubject: [PATCH] Expose target_commitish parameter in create_git_release\n\nSee https://developer.github.com/v3/repos/releases/#create-a-release\n\n---\n github/Repository.py | 6 ++++--\n 1 file changed, 4 insertions(+), 2 deletions(-)\n\ndiff --git a/github/Repository.py b/github/Repository.py\nindex 3803548..d483905 100644\n--- a/github/Repository.py\n+++ b/github/Repository.py\n@@ -746,11 +746,11 @@ class Repository(github.GithubObject.CompletableGithubObject):\n         )\n         return github.GitRef.GitRef(self._requester, headers, data, completed=True)\n\n-    def create_git_tag_and_release(self, tag, tag_message, release_name, release_message, object, type, tagger=github.GithubObject.NotSet, draft=False, prerelease=False):\n+    def create_git_tag_and_release(self, tag, tag_message, release_name, release_message, object, type, tagger=github.GithubObject.NotSet, target_commitish=None, draft=False, prerelease=False):\n         self.create_git_tag(tag, tag_message, object, type, tagger)\n         return self.create_git_release(tag, release_name, release_message, draft, prerelease)\n\n-    def create_git_release(self, tag, name, message, draft=False, prerelease=False):\n+    def create_git_release(self, tag, name, message, target_commitish=None, draft=False, prerelease=False):\n         assert isinstance(tag, (str, unicode)), tag\n         assert isinstance(name, (str, unicode)), name\n         assert isinstance(message, (str, unicode)), message\n@@ -763,6 +763,8 @@ class Repository(github.GithubObject.CompletableGithubObject):\n             \"draft\": draft,\n             \"prerelease\": prerelease,\n         }\n+        if target_commitish:\n+            post_parameters[\"target_commitish\"] = target_commitish\n         headers, data = self._requester.requestJsonAndCheck(\n             \"POST\",\n             self.url + \"/releases\",\n-- \n2.5.0\n```\n"}}, {"doc": {"_id": 379, "title": "Implement repo content create/update/delete file API", "content": "I have done the following changes to PyGithub:\n1. implement the following 3 API under repositories\n   PUT /repos/:owner/:repo/contents/:path  http://developer.github.com/v3/repos/contents#create-a-file\n   PUT /repos/:owner/:repo/contents/:path  http://developer.github.com/v3/repos/contents#update-a-file\n   DELETE /repos/:owner/:repo/contents/:path  https://developer.github.com/v3/repos/contents/#delete-a-file\n2. Fix `testGetContents` and `testGetContentsWithRef` path error.\n   A preceding slash is missing before `doc` folder, so they will be pointed to a wrong URL as below:\n   `/repo/contentsdoc/ReferenceOfClasses.md`\n\nTest cases are prepared for those 3 new APIs. All test have been run without error. Please check and comment.\n"}}, {"doc": {"_id": 378, "title": "Handle rate limit: retry after requested delay", "content": "This suggestion requires to update tests/RateLimiting.py, as the call doesn't fail anymore (that's the whole point of this PR).\n"}}, {"doc": {"_id": 377, "title": "legacy_search_issues doesn't return paginated list", "content": "``` python\n    g = Github(username, password)\n    repo = g.get_repo(\"fetchrobotics/repo\")\n    issues = sandbox.legacy_search_issues(\"open\", \"searchterm\")\n\n    for issue in issues:\n        print \"#\" + str(issue.number), issue.title\n```\n\nI expect a list with dozens of results. But I'm getting 10. `issues` is also a plain list and not a paginated list. \n"}}, {"doc": {"_id": 376, "title": "ImportError: No module named \"request\"", "content": "I am using Python 2.7.8. When I run `import github`, this happens:\n\n```\n>>> import github\n\nTraceback (most recent call last):\n  File \"<pyshell#0>\", line 1, in <module>\n    import github\n  File \"C:\\Python27\\github\\__init__.py\", line 36, in <module>\n    from .MainClass import Github\n  File \"C:\\Python27\\github\\MainClass.py\", line 28, in <module>\n    import urllib.request, urllib.parse, urllib.error\nImportError: No module named request\n```\n\nDid I install PyGithub incorrectly?\n"}}, {"doc": {"_id": 375, "title": "Don't merge", "content": "This is @jacquev6 trying to fix integration with travis-ci.\n"}}, {"doc": {"_id": 374, "title": "Repository link needs updating", "content": "When you first visit github, the link above all of the code for PyGitHub links to http://jacquev6.github.io/PyGithub not http://pygithub.github.io/PyGithub/v1/index.html.\n\nOnly a person with merge rights may update this.\n"}}, {"doc": {"_id": 373, "title": "Links don't work in introduction.rst", "content": "In the documentation section, the [introduction.rst file](doc/introduction.rst) has links to pages which say \"Which class implements which API feature?\" They redirect to a 404 error page.\n"}}, {"doc": {"_id": 372, "title": "Add branch protection endpoint", "content": "Branch protection is in developer preview thus `get_branch` is duplicated to explicitly call the protected branch endpoint.\n\nI'm not sure if I've placed all of the tests in the correct file.\n"}}, {"doc": {"_id": 371, "title": "ImportError?", "content": "I get this error:\n\n```\nPython 3.5.1 (v3.5.1:37a07cee5969, Dec  6 2015, 01:38:48) [MSC v.1900 32 bit (Intel)] on win32\nType \"copyright\", \"credits\" or \"license()\" for more information.\n>>> from github import Github\nTraceback (most recent call last):\n  File \"<pyshell#0>\", line 1, in <module>\n    from github import Github\n  File \"C:\\Users\\DARREN\\AppData\\Local\\Programs\\Python\\Python35-32\\github\\__init__.py\", line 36, in <module>\n    from MainClass import Github\nImportError: No module named 'MainClass'\n>>> \n```\n\nHuh?\n"}}, {"doc": {"_id": 370, "title": "Commit Author's Email returns None", "content": "When I search a repo, I only get emails returning if the users profile has an email, but for the majority I simply get `None`, even though when I look at the API response by hand, I can see the email. \n\nExample below returns None for email:\n\ncommit: {\n         author: {\n                        name: \"George Lejnine\",\n                        email: \"lejnine@gmail.com\",\n                        date: \"2015-11-22T21:56:30Z\"\n}\n"}}, {"doc": {"_id": 369, "title": "adds update_content function", "content": "This PR supersedes https://github.com/PyGithub/PyGithub/pull/316\n\nI've pushed the changes to @ahmad88me's fork at first, but he was unresponsive for a couple of months.\n\nAdditionally to the original PR this adds:\n- Support for both Python2 and Python3\n- Tests\n- A proper return value\n"}}, {"doc": {"_id": 368, "title": "Protect a branch", "content": "I needed to protect some branches recently. I thought I'd share the code here. I'm sure the options will need to be changed.\n\n```\ndef protect_branch(self, branch):\n    \"\"\"\n    :calls: `PATCH /repos/:owner/:repo/branches/:branch <https://developer.github.com/v3/repos/#enabling-and-disabling-branch-protection>`\n    :param branch: string\n    :rtype: None\n    \"\"\"\n    post_parameters = {\n        \"protection\": {\n            \"enabled\": True,\n            \"required_status_checks\": {\n                \"enforcement_level\": \"everyone\",\n                \"contexts\": [\n                    \"required-status\"\n                ]\n            }\n        }\n    }\n    headers, data = self._requester.requestJsonAndCheck(\n        \"PATCH\",\n        self.url + \"/branches/\" + branch,\n        input=post_parameters,\n        headers={'Accept': 'application/vnd.github.loki-preview+json'}\n    )\n```\n"}}, {"doc": {"_id": 367, "title": "Repository.watchers_count and Repository.stargazers_count are always the same", "content": ".. and obviously wrong! The right number for the watchers should be the `subscribers_count`.\n\nRelated #318\n"}}, {"doc": {"_id": 366, "title": "How can I check a valid account?", "content": "Hi,\n\nI am writing a script to unfollow all of followings and stars and I used the basic authentication like the example in the introduction.\n\n```\nfrom github import Github\n\ng = Github(\"user\", \"password\")\nfor repo in g.get_user().get_repos():\n    print repo.name\n    repo.edit(has_wiki=False)\n```\n\nBut when I enter an incorrect password, I can also get a GitHub instance and a user.\nIs there a method that validates the user? \n\nThank you!\n"}}, {"doc": {"_id": 365, "title": "Add travis button on README.", "content": ""}}, {"doc": {"_id": 364, "title": "fix misspelling: https://github.com/PyGithub/PyGithub/issues/363", "content": "See #363 \n"}}, {"doc": {"_id": 363, "title": "misspelling in Team.add_membership", "content": "There's a misspelled call to requestJsonAndCheck in Team.add_membership.\n\n``` diff\n--- a/github/Team.py\n+++ b/github/Team.py\n@@ -128,7 +128,7 @@ class Team(github.GithubObject.CompletableGithubObject):\n         :rtype: None\n         \"\"\"\n         assert isinstance(member, github.NamedUser.NamedUser), member\n-        headers, data = self._requester.requestjsonandcheck(\n+        headers, data = self._requester.requestJsonAndCheck(\n             \"PUT\",\n             self.url + \"/memberships/\" + member._identity\n         )\n```\n\nPull request is imminent.\n\nThanks for a great library!\n"}}, {"doc": {"_id": 362, "title": "Sort direction in Repository.get_issues()", "content": "Hi,\n\nI have a problem that I can't really figure out. This is all new for me and I am posting for the first time ever on GitHub. If this is not the right place for my question: apologies. \n\nMy goal is to get all Issues from a project starting with the oldest one.\n\nWhen calling the function get_issues() on a Repository, I set the 'direction' parameter to the two possible values \"asc\" and \"desc\". However this doesn't change anything in the eventual order. Do you know on which property the sort takes place (creation date?). I understand this relates more to the GitHub api then the PyGithub library, but I wasn't able to find an answer, so I thought I just try here.\n\nAnother approach would maybe be to get the final page and call 'reverse' provided by the Pagination class? Or did I get that wrong.\n\nThanks for the help in advance.\n"}}, {"doc": {"_id": 361, "title": "Add read-only Releases API with Assets", "content": "Hi guys,\n\nI was using PyGithub to build a website yesterday, and found it was missing the release API, so I added it.\n\nI later noticed that there seemed to already be an in-progress release API but it looked incomplete and didn't match the current API, so I kept going with it.\n\nI also started on the Upload Asset function and discovered that the main API URL is hard-coded into Requester.py, so it'd take a lot more to get that feature to work.\n\nOh, I would have added to the development branch but there isn't one. >.>\n\nAnyway, lemme know what you think.\n"}}, {"doc": {"_id": 360, "title": "Add support for the \"base\" parameter in the repository get_pulls() method.", "content": "This is in addition to the direction parameter added in pull request #355\n"}}, {"doc": {"_id": 359, "title": "Added support to get the latest public events on github", "content": ""}}, {"doc": {"_id": 358, "title": "CommitStatus has no context", "content": "I can now set the context but not get it apparently.\n"}}, {"doc": {"_id": 357, "title": "Note explicit support for Python 3.5", "content": ""}}, {"doc": {"_id": 356, "title": "Unification of PR and ISSUE objects??", "content": "Hi we use the pygithub lib a lot, infact we have built our own tool on top of it. We did this because collecting data on PRs was getting difficult with 2 possible objects to look for information in. The PR obj contains lots of helpful info but doesn't contain the \"Labels\" or \"comments\" that aren't inline comments. These are contained in the \"Issue\" obj.\n\nSo my question/suggestion is would it be too much to add a sort of \"super class\" that would be a PR_ISSUE object that could contain a combination of the two together so that collecting multiple objects are not required? If this is just and insane idea and other people have implemented other ways to handle this we would love to hear about them. We understand that it's just a few calls to github but with our scripts we are making a lot of calls at once and hitting our max limits quickly. Any suggestions are very helpful and we would also be willing to contribute to the community as well. Thanks.\n\nMatt Babineau \nRelease Engineer\nDataXu\n\nhttps://github.com/dataxu/github-pr\n"}}, {"doc": {"_id": 355, "title": "add support for the direction parameter in Repository.get_pulls", "content": ""}}, {"doc": {"_id": 354, "title": "Add creator to get_issues", "content": "The `issues` endpoint of a repository has an optional parameter `creator` that is added here.\n\nhttps://developer.github.com/v3/issues/#list-issues-for-a-repository\n"}}, {"doc": {"_id": 353, "title": "get_repo() doesn't raise 404", "content": "I have code that is expecting get_repo() to raise an UnknownObjectException if it calls get_repo() on a repository that doesn't exist.  With the 1.26.0 release, this is no longer happening; get_repo() returns an object, then subsequent (unprotected) code is getting the UnknownObjectException when it attempts to refer to an attribute on that object (in this case, full_name).\n"}}, {"doc": {"_id": 352, "title": "Updating doc link for Github Commit Statuses", "content": "It seems that this new link should be the appropriate link to docs for Commit Statuses. The old one just seemed to be a place holder \"todo\"\n"}}, {"doc": {"_id": 351, "title": "Release needed", "content": "Hi,\n\nI'm using PyGitHub and found myself in the position of needing Commit Status Contexts desperately, eventually copying code from your development version into my prototype application. On long term it would be awesome if you could do a release :) (Given the last one was a year ago)\n"}}, {"doc": {"_id": 350, "title": "Unable to use Pygithub", "content": "Hey,\nI am trying to use pygithub but unfortunately can't be able to understand how to use this library as I am new to these sort of things. I am building an app based on github api for the very first time. I am having lots of problem. Is there any tutorial which can help me out? please suggest anything which will solve my problem.\n"}}, {"doc": {"_id": 349, "title": "[Need Help] How should I close one issue given its name or id? ", "content": "I'm using version 1.25.2, but I didn't find a proper [API](http://jacquev6.net/PyGithub/v1/apis.html) to do this. Any advice will be appreciated. \n"}}, {"doc": {"_id": 348, "title": "How could I rename a file?", "content": "I tried a lot of things, but I can't figure out how to simply rename a file in a repo using PyGithub.\n\nAny pointer?\n"}}, {"doc": {"_id": 347, "title": "Add repo.get_stargazers_with_dates()", "content": "Fixes #345 \n\nI've included a regression test and ensured that no new PEP8 errors were introduced.\n\ncc @jzelinskie\n"}}, {"doc": {"_id": 346, "title": "Thread headers through PaginatedList", "content": "See #345 \n\nThis would allow the use of endpoints which return different content depending on headers, e.g. `/stargazers`.\n"}}, {"doc": {"_id": 345, "title": "Support application/vnd.github.v3.star+json", "content": "See https://developer.github.com/v3/activity/starring/#list-stargazers\n\nWhen requesting a list of stargazers, you can set a custom media type to find out when each user starred your repo. It would be great if pygithub supported this.\n"}}, {"doc": {"_id": 344, "title": "Support for \"permissions\" and \"privacy\". Changed \"members\" to \"memberships\"", "content": ""}}, {"doc": {"_id": 343, "title": "support long integers in get_repo", "content": "Added support for long integers in MainClass.\n"}}, {"doc": {"_id": 342, "title": "Don't try to parse \"data\" if it's None", "content": "I suspect this is related to the cause of\nhttps://github.com/PyGithub/PyGithub/issues/278#issuecomment-58292338 in\nthat the response from the github API contains null for some elements.\n\nWith more time I'd like to capture the response from github to find out which elements are missing, and perhaps even work out in what situations they are absent. Two things of note:\n1. The versioned release of the parent repo is quite old - there is ~1 year of commits \n   That repo has some discussion (in https://github.com/PyGithub/PyGithub/issues/297) seeking another maintainer(s). It means that in the short term we're not likely to get our work merged into that repo, and so should consider using our fork.\n2. This fix sits atop all of that work - most of that is catching other null de-referencing issues such as this so we'll be bitten less often by other partially-missing responses.\n"}}, {"doc": {"_id": 341, "title": "Don't try to parse \"data\" if it's None", "content": "I suspect this is related to the cause of\nhttps://github.com/PyGithub/PyGithub/issues/278#issuecomment-58292338 in\nthat the response from the github API contains null for some elements.\n"}}, {"doc": {"_id": 340, "title": "Fixes #339 by allowing strings in the labels list.", "content": "Labels can be added from strings and there is no reason strings can't be allowed in the list for issue creation.  The change requires relaxing the assertion and adding a conditional to the adding of labels to the post.\n\nCurrently\n\n``` python\nrepo.create_issue('name', body = \"body\", labels = [repo.get_label('label')])\n```\n\nAfter the Change\n\n``` python\nrepo.create_issue('name', body = \"body\", labels = ['label'])\n```\n"}}, {"doc": {"_id": 339, "title": "Allow strings in the labels list of create_issue", "content": "Labels can be added from strings and there is no reason strings can't be allowed in the list for issue creation.  The change requires relaxing the assertion and adding a conditional to the adding of labels to the post.\n\nCurrently\n\n``` python\nrepo.create_issue('name', body = \"body\", labels = [repo.get_label('label')])\n```\n\nAfter the Change\n\n``` python\nrepo.create_issue('name', body = \"body\", labels = ['label'])\n```\n"}}, {"doc": {"_id": 338, "title": "travis status API isn't working", "content": "I think it needs to be deleted and remade because of the repo rename.\n"}}, {"doc": {"_id": 337, "title": "README: Remove searching maintainer note", "content": "There are obviously volunteers maintaining this project and this note is scaring people away.\n\nFixes https://github.com/PyGithub/PyGithub/issues/297\n"}}, {"doc": {"_id": 336, "title": "Fixing https://github.com/PyGithub/PyGithub/issues/335.", "content": "Issue.remove_from_labels fails when the label passed is a string with whitespace characters\n"}}, {"doc": {"_id": 335, "title": "Issue.remove_from_labels fails when the label passed is a string with whitespace characters", "content": "remove_from_labels should escape the spaces and other special characters in the label name, if passed as a string.\n"}}, {"doc": {"_id": 334, "title": "Add support for filter/role options in Organization.get_members()", "content": "This PR should address https://github.com/PyGithub/PyGithub/issues/310\n\n@jzelinskie: what is your policy for the Organization tests under `github/test/ReplayData`. Do you want to migrate to `PyGithub` as the organization used to generate the API responses?\n"}}, {"doc": {"_id": 333, "title": "Add support for getting latest release information.", "content": "Needed to add exception for `latest` release.\n"}}, {"doc": {"_id": 332, "title": "pygithub: test warning on python3", "content": "Hi, I would like to report a test that is throwing a warning with python3\n\n```\ntestGetIssuesEvents (github.tests.Repository.Repository) ... /tmp/buildd/pygithub-1.25.2/.pybuild/pythonX.Y_3.4/build/github/GithubObject.py:111: ResourceWarning: unclosed file <_io.BufferedReader name='/tmp/buildd/pygithub-1.25.2/.pybuild/pythonX.Y_3.4/build/github/tests/ReplayData/Persistence.setUp.txt'>\n  return _ValuedAttribute(value)\n/tmp/buildd/pygithub-1.25.2/.pybuild/pythonX.Y_3.4/build/github/GithubObject.py:111: ResourceWarning: unclosed file <_io.BufferedReader name='/tmp/buildd/pygithub-1.25.2/.pybuild/pythonX.Y_3.4/build/github/tests/ReplayData/Persistence.testLoadAndUpdate.txt'>\n  return _ValuedAttribute(value)\nok\ntestGetIssuesWithArguments (github.tests.Repository.Repository) ... ok\n```\n\nI'm not sure if it is bad or not, this is why I'm reporting there :)\n\nthanks!\n"}}, {"doc": {"_id": 331, "title": "the code doesn't work with python3", "content": "Hi, following up on bugs.debian.org/790655 I noticed that the code has many python3 incompatibilities\ne.g.\n\"import httplib\" is now \"import http.client\"\nand urlparse is not inside urllib\n-        o = urlparse.urlparse(base_url)\n-        o = urllib.parse(base_url)\n\nbut I stopped to this problem \n\n```\npython3 github/__init__.py \nTraceback (most recent call last):\n  File \"github/__init__.py\", line 36, in <module>\n    from MainClass import Github\n  File \"/tmp/pygithub-1.25.2/github/MainClass.py\", line 32, in <module>\n    import AuthenticatedUser\n  File \"/tmp/pygithub-1.25.2/github/AuthenticatedUser.py\", line 30, in <module>\n    import github.GithubObject\n  File \"/usr/lib/python3/dist-packages/github/__init__.py\", line 36, in <module>\n    from MainClass import Github\nImportError: cannot import name 'Github'\n```\n\ncan you please update the package to a python3 version?\n"}}, {"doc": {"_id": 330, "title": "Organization.has_in_members does not accept authenticated users", "content": "The following fails:\n\n``` python\n>>> u = g.get_user()\n>>> u\n<github.AuthenticatedUser.AuthenticatedUser at 0x7fd96b0762d0>\n>>> org = u.get_orgs()[0]\n>>> org\n<github.Organization.Organization at 0x7fd96b076750>\n>>> org.has_in_members(u)\n```\n\nExpected result: `True`. Instead, an exception is raised:\n\n``` pytb\nTraceback (most recent call last):\n  File \"<ipython-input-6-77c92f204530>\", line 1, in <module>\n    org.has_in_members(u)\n  File \"/usr/local/lib/python2.7/dist-packages/github/Organization.py\", line 557, in has_in_members\n    assert isinstance(member, github.NamedUser.NamedUser), member\nAssertionError: <github.AuthenticatedUser.AuthenticatedUser object at 0x7fd96b0762d0>\n```\n\nSo, apparently an authenticated user is not a \"named\" user. Is this a bug, or is it the intended behaviour?\n"}}, {"doc": {"_id": 329, "title": "The organization of a (private) repository of an organization (is not the same)", "content": "I have an organization which owns several (15) private repositories. I assign it to `org` via `get_organization('name_of_organization')`. Indeed,\n\n``` python\n>>> type(org)\ngithub.Organization.Organization\n```\n\nHowever, when I check the organization of a (private) repository owned by that organization, I get a different object with different properties.\n\nFor example,\n\n``` python\n>>> assert org.get_repos()[0].organization.total_private_repos == org.total_private_repos\n```\n\nfails.\n\nIn addition,\n\n``` python\n>>> org.get_repos()[0].organization.plan\n```\n\nis `None`, where\n\n``` python\n>>> org.plan.name\nu'silver'\n```\n\nIt may worth mentioning that\n\n``` python\nassert org.get_repos()[0].organization.id == org.id\n```\n\ndoes not fail.\n"}}, {"doc": {"_id": 328, "title": "get_stats_contributors() not iterable", "content": "Hi,\n\nI want to create a iterable object 'contributors' for particular repo using 'get_stats_contributors()'. However, when I loop through contributors object, it always returns a 'TypeError: 'NoneType' object is not iterable' for the first contributor. When I ran a second time, first contributor is fine but second will returns the same error. So on and so forth. \nIs that normal? Is there any trick to fix this error?\n\nThanks a lot!\n"}}, {"doc": {"_id": 327, "title": "Bugfix in issue.remove_from_labels", "content": "If a label name is passed in with a space (such as \"help wanted\") then issue.remove_from_labels raises a 400 error.\n\nThis is because the url sent to github includes a space.\n"}}, {"doc": {"_id": 326, "title": "Documentation: add git-gifi usage to list of projects using PyGithub", "content": ""}}, {"doc": {"_id": 325, "title": "Another project which is using PyGithub - git-gifi", "content": "Hey, \nMay I ask to list my project in the doc page?\n\nhttps://github.com/kokosing/git-gifi\n\nPyGithub is a great library, everything worked smoothly.\n\nThanks ;)\n"}}, {"doc": {"_id": 324, "title": "Add support for repository hooks", "content": "As far as I can tell, pygithub lacks support for repository hooks (both get and POST).\n"}}, {"doc": {"_id": 323, "title": "How to collect collaborators of a projects?", "content": "I try to collect the collaborators of some project, but the website send the message \"Requires authentication \". Could you  explain how to user your system to complete it? Thanks for your help.\n"}}, {"doc": {"_id": 322, "title": "Question about 'get_stats_contributors()'", "content": "Hi,\n\nI want to create a iterable object 'contributors' for particular repo using 'get_stats_contributors()'. However, when I loop through contributors object, it always returns a 'TypeError: 'NoneType' object is not iterable' for the first contributor. When I ran a second time, first contributor is fine but second will returns the same error. So on and so forth. \nIs that normal? Is there any trick to fix this error? \n\nThanks a lot!\n"}}, {"doc": {"_id": 321, "title": "Please write better examples for documentation", "content": "there's no way to know how to use this if you've never used the github API before. \n"}}, {"doc": {"_id": 320, "title": "Add loudr/asana-hub to introduction doc", "content": "We use PyGithub and love it. We'd love to be mentioned. :)\n\nhttps://github.com/Loudr/asana-hub\n"}}, {"doc": {"_id": 319, "title": "Getting zero count for every request", "content": "Hi\nI am trying to use the API to get the number of repositories for a particular `created` interval, but I am getting zero results.\n\nHere is the code snippet I am trying to execute:\n\n```\nIn [1]: import github as gt   \nIn [8]: g = gt.Github(\"my_token\")\nIn [9]: f = g.search_repositories(\"location:California created:2008-01-01..2008-01-28\")\nIn [10]: f.totalCount\nOut[10]: 0\n```\n\nI have tried changing the location as well as created interval, but still getting zero results.\nThe same search query gives results in github search bar, though:\n\n![image](https://cloud.githubusercontent.com/assets/1546532/8143746/35af5f8a-11d9-11e5-9b34-5b9792b86547.png)\n\nI have also tried using `search_issues` with similar filters, but getting zero count for the same as well.\n`search_users` seem to work fine though.\n"}}, {"doc": {"_id": 318, "title": "Repository object seems to be missing 'subscribers_count'", "content": "Just noticed the Repository object seems to be missing 'subscribers_count'.  (this is what shows up in the GitHub UI as the number of Watchers)\n\neg:\n\nrepo_data = gh.get_repo('sqlitebrowser/sqlitebrowser')\n\nrepo_data **should** have an integer property 'subscribers_count' containing the number of subscribers.  But it doesn't (on OSX 10.9 anyway). :frowning: \n\nDirectly calling the API using a browser shows the property:\n\n&nbsp; &nbsp; https://api.github.com/repos/sqlitebrowser/sqlitebrowser\n\nIt's just not getting into the Repository object.\n"}}, {"doc": {"_id": 317, "title": "get_dir_contents seem to build wrong file URLs", "content": "When trying to access the content of a file retrieved with `get_dir_contents` the resulting URL looks something like this:\nhttps://api.github.com/repos/owner/repo/contents/requirements.txt?ref=master?client_id=clientid&client_secret=secret - i.e. with a ? instead of an & after `ref=master`, causing GitHub to think the ref includes the client id, resulting in a `No commit found for the ref master?client_id=clientid` error.\n\nSeems like the ref is already set here: https://github.com/PyGithub/PyGithub/blob/master/github%2FRequester.py#L243\n\nI'm using version 1.25.2.\n"}}, {"doc": {"_id": 316, "title": "Added update_content function to update a file", "content": "Implemented the below\nhttps://developer.github.com/v3/repos/contents/#update-a-file\n"}}, {"doc": {"_id": 315, "title": "Freshen master with changes from develop", "content": ""}}, {"doc": {"_id": 314, "title": "ImportError: No module named 'MainClass'", "content": "Getting below error after installing GitHub and trying to run `from github import GitHub` on Python3.4\n\n```\nIn [1]: from github import Github\n---------------------------------------------------------------------------\nImportError                               Traceback (most recent call last)\n<ipython-input-1-04bd0daea4a5> in <module>()\n----> 1 from github import Github\n\n/ebs/PyGithub/github/__init__.py in <module>()\n     34 import logging\n     35\n---> 36 from MainClass import Github\n     37 from GithubException import GithubException, BadCredentialsException, UnknownObjectException, BadUserAgentException, RateLimitExceededException, BadAttributeException\n     38 from InputFileContent import InputFileContent\n\nImportError: No module named 'MainClass'\n\nIn [2]: from GitHub import *\n---------------------------------------------------------------------------\nImportError                               Traceback (most recent call last)\n<ipython-input-2-c0ff318d59b4> in <module>()\n----> 1 from GitHub import *\n\nImportError: No module named 'GitHub'\n\nIn [3]: from github import *\n---------------------------------------------------------------------------\nImportError                               Traceback (most recent call last)\n<ipython-input-3-51000bb5e3c9> in <module>()\n----> 1 from github import *\n\n/ebs/PyGithub/github/__init__.py in <module>()\n     34 import logging\n     35\n---> 36 from MainClass import Github\n     37 from GithubException import GithubException, BadCredentialsException, UnknownObjectException, BadUserAgentException, RateLimitExceededException, BadAttributeException\n     38 from InputFileContent import InputFileContent\n\nImportError: No module named 'MainClass'\n```\n"}}, {"doc": {"_id": 313, "title": "Add add_membership to Team", "content": "Ref #284\n"}}, {"doc": {"_id": 312, "title": "Add support for releases", "content": "This pull request adds support for getting + creating releases from tags. I have not added support for uploading assets to these releases as we do not currently require this functionality. \n"}}, {"doc": {"_id": 311, "title": "Moved repositories, get new full_name instead of \"not found\"", "content": "Hey,\n\nafter getting UnknownObjectException with PyGithub, is there a way check whether repository simply changed owner / was renamed, without writing a sophisticated custom webscrapper? \n\nI noticed that if accesing github.com/oldowner/oldname, github simply redirects to new page github.com/newowner/propername, but I want to recognize this in a KISS way in my python programs.\n\nBest Regards,\nOskar\n"}}, {"doc": {"_id": 310, "title": "Support for updated members list endpoint", "content": "Add support for the filter and role parameters.\n\nhttps://developer.github.com/v3/orgs/members/#members-list\n"}}, {"doc": {"_id": 309, "title": "Connect through a proxy with authentication", "content": "Issue 172 is closed (https://github.com/PyGithub/PyGithub/issues/172), but was never resolved.  Since it's quite old, you may not be interested in this change.  But if you are, this change will allow PyGithub to connect through a proxy that requires authentication.\n"}}, {"doc": {"_id": 308, "title": "Fixed documentation link", "content": ""}}, {"doc": {"_id": 307, "title": "Support recording tests when using an OAuth token", "content": "This is how I solved #306. It is probably an incomplete solution as I didn't address the issue of tests that rely on a specific authentication mechanism (I have no idea what that would entail).\n\nIt worked for me, at least.\n"}}, {"doc": {"_id": 306, "title": "Recording new unit tests fails for accounts with 2-factor", "content": "Today I tried to add some unit tests and the --record option would fail as Github requires an OTP, which can't be provided via GithubCredentials.py.\n\nI solved the issue by hacking support to tests using the token by default instead of the username/password. I'll create a pull request with my hack, but it's likely that it doesn't cover all cases cleanly, since there are some tests that explicitly test token authentication, etc.\n"}}, {"doc": {"_id": 305, "title": "Add support to create Repository objects lazily in MainClass.", "content": "This lets users do the following without issuing an unnecessary request:\n\nissues_of_my_repository = g.get_repo('PyGithub/PyGithub').get_issues()\n\nSince the GithubObject layer handles laziness transparently, lazy\nloading is enabled by default, and can be disabled via the `lazy`\nkwarg. This does not affect any test except tests that pertain to\ncaching or laziness itself.\n"}}, {"doc": {"_id": 304, "title": "How could a noob start learning PyGithub?", "content": "Hello, everyone,\n\nSorry to disturb you asking such a simple question.\n\nI'm a non computer science major, but may need employ PyGithub(according to [this](http://stackoverflow.com/questions/10625190/most-suitable-python-library-for-github-api-v3)) to conduct my experiment without knowing that if PyGithub would help me capture data I need from GitHub. \nMore background: I know Python, and am familiar with basic command line skills of GitHub.\n\nI've found little tutorial or documentation straightforward and useful to me, including [this one](http://jacquev6.net/PyGithub/v1/). \n\nAll relevant info about the aforementioned experiment is detailed [here](https://github.com/opencollaborativeclass/OpenResearch/issues/3). Anyone who would help to provide any suggestions or tips is highly appreciated. And more, should anyone show any interest in our attempt, please just let me know, I would send you a member invitation of our organization. \n\nThanks for your time and attention. Millions of thanks in advance. \n"}}, {"doc": {"_id": 303, "title": "Team add_membership method needs a test", "content": ""}}, {"doc": {"_id": 302, "title": "Fork a repo", "content": "I couldn't find how to fork a repo, according to github APIs page <POST /repos/:owner/:repo/forks> can be used to do a fork,\n\nthanks,\n"}}, {"doc": {"_id": 301, "title": "fixed small typo", "content": ""}}, {"doc": {"_id": 300, "title": "Connection to Git repo failed", "content": "Traceback (most recent call last):\n  File \"try-git.py\", line 132, in <module>\n    main()\n  File \"try-git.py\", line 23, in create_repositories\n    org = g.get_organization(\"My-organization\")\n  File \"/usr/lib/python2.6/site-packages/github/MainClass.py\", line 187, in get_organization\n    \"/orgs/\" + login\n  File \"/usr/lib/python2.6/site-packages/github/Requester.py\", line 169, in requestJsonAndCheck\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, cnx))\n  File \"/usr/lib/python2.6/site-packages/github/Requester.py\", line 210, in requestJson\n    return self.__requestEncode(cnx, verb, url, parameters, headers, input, encode)\n  File \"/usr/lib/python2.6/site-packages/github/Requester.py\", line 247, in __requestEncode\n    status, responseHeaders, output = self.__requestRaw(cnx, verb, url, requestHeaders, encoded_input)\n  File \"/usr/lib/python2.6/site-packages/github/Requester.py\", line 271, in __requestRaw\n    requestHeaders\n  File \"/usr/lib64/python2.6/httplib.py\", line 914, in request\n    self._send_request(method, url, body, headers)\n  File \"/usr/lib64/python2.6/httplib.py\", line 951, in _send_request\n    self.endheaders()\n  File \"/usr/lib64/python2.6/httplib.py\", line 908, in endheaders\n    self._send_output()\n  File \"/usr/lib64/python2.6/httplib.py\", line 780, in _send_output\n    self.send(msg)\n  File \"/usr/lib64/python2.6/httplib.py\", line 739, in send\n    self.connect()\n  File \"/usr/lib64/python2.6/httplib.py\", line 1112, in connect\n    sock = socket.create_connection((self.host, self.port), self.timeout)\n  File \"/usr/lib64/python2.6/socket.py\", line 567, in create_connection\n    raise error, msg\nsocket.error: [Errno 111] Connection refused\n"}}, {"doc": {"_id": 299, "title": "Can't access the contents of gist files", "content": "I'm trying to access the full content of my gists' files from a Python program. I can retrieve the Gist and GistFile objects alright, but the GistFile objects are missing the `content` attribute.\n\nEverything else seems to be working fine. Here's what I'm doing.\n\n```\ng = Github(username, password)\ngists = g.get_gists()\ngist = gists[0]\nfile = gist.files[filename]\n```\n\nAnd that all seems to work fine. file.type outputs at \"text/plain\" as expected, but there's simply no file.content attribute.\n\nSo is there something I'm doing wrong here? How do I access the content of gist files?\n"}}, {"doc": {"_id": 298, "title": "How to init a repository", "content": "I am creating a repository the following way:\n\n```\ng = Github(token)\nuser = g.get_user()\nr = user.create_repo(name)\n\nt1 = r.create_git_tree([InputGitTreeElement(\"test.txt\",\"100644\",\"blob\",content=\"File created by PyGithub\")])\nc1 = r.create_git_commit(tree=t1, message=\"first commit\", parents=[])\nref = r.create_git_ref(ref=\"refs/heads/feature\", sha=c1.sha)\n```\n\nI am missing to initialise the repository. I don't want to use the `auto_init=True` flag since this creates a unwanted readme.md. Is there another way to initialise the repository?\n"}}, {"doc": {"_id": 297, "title": "Maintain PyGithub - looking for volunteers", "content": "Hello everyone,\n\nI've obviously neglected PyGithub in the last few months and my current priorities are hardly compatible with doing a good job on PyGithub.\n\nI'm looking for volunteer(s) to take over PyGithub. I would transfer ownership of the main PyGithub repository to a GitHub organization, and give admin permissions on the PyPI package as well.\n\nPlease comment on this issue if you're interested.\n"}}, {"doc": {"_id": 296, "title": "Fix broken links under \"What's next?\"", "content": ""}}, {"doc": {"_id": 295, "title": "Fix paginated list handling of 204 No Content", "content": "I discovered this error trying to get the contributors of a repo that has no contributors. \n"}}, {"doc": {"_id": 294, "title": "Allow access to preview versions of the server-side API", "content": "Developers can preview / test their code against new versions of the Github APIs by setting an Accept header\n\nhttps://developer.github.com/changes/2014-12-08-organization-permissions-api-preview/\n\nThis change allows PyGithub users to try the new APIs by setting api_preview=True when constructing the Github object\n"}}, {"doc": {"_id": 293, "title": "doc: add github-icalendar to list of projects using pygithub", "content": ""}}, {"doc": {"_id": 292, "title": "Added sort option to get_pulls.", "content": "Valid option for get pulls: https://developer.github.com/v3/pulls/\n"}}, {"doc": {"_id": 291, "title": "documentation link DNE", "content": "I started looking into using PyGithub for somethings. While digging around in documentation, I found a dead link (that seems pretty important from a reference stand point).\n\nhttps://github.com/jacquev6/PyGithub/blob/master/doc/introduction.rst#what-next has a `reference of classes` link that goes to:\nhttps://github.com/jacquev6/PyGithub/blob/master/doc/github_objects.html\n\nThe above link returns a 404 for me. It seems like the following issue previously reported it:\nhttps://github.com/jacquev6/PyGithub/issues/248\n"}}, {"doc": {"_id": 290, "title": "Change InputGitAuthor to reflect that time is an optional parameter.", "content": "Admittedly, the documentation at https://developer.github.com/v3/git/commits/ is rather ambiguous (this change is bordering on undefined behavior). Despite that, this change works and is pretty convenient for me, so I thought I'd put it out there if you're interested.\n"}}, {"doc": {"_id": 289, "title": "Add optional context when creating a status for a commit", "content": "Hi,\n\nThis pull request allows optional context to be given when creating a status for a commit.\n\nFrom https://developer.github.com/v3/repos/statuses/#create-a-status the `context` is a string label to differentiate the current status from the status of other systems. The default is \"default\", which means any status created through `v1.x` will always have a context of \"default\". Even though the API specifies the default context to be \"default\", I have matched the code based for existing optional arguments by using `github.GithubObject.NotSet`.\n\nCheers,\nAndy\n"}}, {"doc": {"_id": 288, "title": "Remove URL scheme assertion.", "content": "This part of the URL isn't used and can be wrong due to bugs in GitHub\nEnterprise.\n\nThis fixes #287.\n"}}, {"doc": {"_id": 287, "title": "Another assertion error (reverse of #80)", "content": "We have a customer using an instance of GitHub Enterprise with a SSL-terminating proxy in front of it. This means that URLs to the server need to be HTTPS, but URLs received from the API responses are HTTP. I contacted GitHub and they do not support GHE behind an SSL-terminating proxy, but were considering supporting.\n\nThus we hit this assertion:\n\n``` python\nFile \"/endpoints/trigger.py\", line 222, in list_build_sources\n  for repo in org.get_repos(type='member'):\nFile \"/venv/local/lib/python2.7/site-packages/github/PaginatedList.py\", line 48, in __iter__\n  newElements = self._grow()\nFile \"/venv/local/lib/python2.7/site-packages/github/PaginatedList.py\", line 60, in _grow\n  newElements = self._fetchNextPage()\nFile \"/venv/local/lib/python2.7/site-packages/github/PaginatedList.py\", line 158, in _fetchNextPage\n  parameters=self.__nextParams\nFile \"/venv/local/lib/python2.7/site-packages/github/Requester.py\", line 169, in requestJsonAndCheck\n  return self.__check(*self.requestJson(verb, url, parameters, headers, input, cnx))\nFile \"/venv/local/lib/python2.7/site-packages/github/Requester.py\", line 210, in requestJson\n  return self.__requestEncode(cnx, verb, url, parameters, headers, input, encode)\nFile \"/venv/local/lib/python2.7/site-packages/github/Requester.py\", line 238, in __requestEncode\n  url = self.__makeAbsoluteUrl(url)\nFile \"/venv/local/lib/python2.7/site-packages/github/Requester.py\", line 299, in __makeAbsoluteUrl\n  assert o.scheme == self.__scheme or o.scheme == \"https\" and self.__scheme == \"http\"  # Issue #80\nAssertionError\n```\n\nMy initial response is simply to delete this assertion. Correct me if I am wrong, but I believe that you are appending path+queryparams to the base URL, and thus the scheme shouldn't really matter anyway.\n"}}, {"doc": {"_id": 286, "title": "User-Agent header is required for some calls?", "content": "I ran into this when trying to retrieve an organization. It might be good to either provide a parameter to allow setting the User-Agent header, or just send PyGithub as default.\n\nhttps://developer.github.com/v3/#user-agent-required\n"}}, {"doc": {"_id": 285, "title": "Unable to get the list of collaborators for a repository", "content": "I am trying to get the list of collaborators for a repository using the following code:\n\nb = PyGithub.BlockingBuilder()\nb.OAuth (OAUTH_TOKEN)\nb.UserAgent (\"MyWonderfulApplication-1.0.0\")\ng = b.Build()  \nuser = g.get_authenticated_user()\nrepositories = user.get_repos (per_page = 10)\nfor repo in repositories:\n    print repo.get_collaborators()\n\nOn running this snippet, the following error is thrown:\n\nprint repo.get_collaborators()\n  File \"build\\bdist.win32\\egg\\PyGithub\\Blocking\\Repository.py\", line 1853, in get_collaborators\nTypeError: expand() takes exactly 2 arguments (1 given)\n\nAdding per_page argument to get_collaborators() gives the following error:\nTypeError: get_collaborators() got multiple values for keyword argument 'per_page'\n\nPlease let me know how I can get the list of collaborators for a repository.\n"}}, {"doc": {"_id": 284, "title": "Add team membership add call", "content": "This should fix https://github.com/jacquev6/PyGithub/issues/280\n"}}, {"doc": {"_id": 283, "title": "SSLError", "content": "I'm using stock debian, python 2.7, pygithub v0.5, requests v0.14.0, OpenSSL 1.0.1e, libssl1.0.0.\n\nI run this program:\n\n```\nimport pygithub3\ngh = pygithub3.Github(user='vanceza')\ngh.repos.list().all()\n```\n\nAnd get the following output:\n\n```\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/usr/local/lib/python2.7/dist-packages/pygithub3/core/result/base.py\", line 109, in all\n    return list(self.iterator())\n  File \"/usr/local/lib/python2.7/dist-packages/pygithub3/core/result/base.py\", line 104, in iterator\n    for page in self:\n  File \"/usr/local/lib/python2.7/dist-packages/pygithub3/core/result/base.py\", line 100, in next\n    return self.__next__()\n  File \"/usr/local/lib/python2.7/dist-packages/pygithub3/core/result/smart.py\", line 91, in __next__\n    if self.page <= self.pages:\n  File \"/usr/local/lib/python2.7/dist-packages/pygithub3/core/result/smart.py\", line 101, in pages\n    return self.getter.last\n  File \"/usr/local/lib/python2.7/dist-packages/pygithub3/core/result/smart.py\", line 47, in last\n    self()\n  File \"/usr/local/lib/python2.7/dist-packages/pygithub3/core/result/smart.py\", line 16, in wrapper\n    return func(self, page)\n  File \"/usr/local/lib/python2.7/dist-packages/pygithub3/core/result/smart.py\", line 39, in __call__\n    response = self.method(page=page)\n  File \"/usr/local/lib/python2.7/dist-packages/pygithub3/core/client.py\", line 83, in get\n    response = self.request('get', request, **kwargs)\n  File \"/usr/local/lib/python2.7/dist-packages/pygithub3/core/client.py\", line 70, in wrapper\n    return func(self, verb, request, **kwargs)\n  File \"/usr/local/lib/python2.7/dist-packages/pygithub3/core/client.py\", line 76, in request\n    response = self.requester.request(verb, request, **kwargs)\n  File \"/usr/local/lib/python2.7/dist-packages/requests/sessions.py\", line 252, in request\n    r.send(prefetch=prefetch)\n  File \"/usr/local/lib/python2.7/dist-packages/requests/models.py\", line 632, in send\n    raise SSLError(e)\nrequests.exceptions.SSLError: [Errno 8] _ssl.c:504: EOF occurred in violation of protocol\n```\n\nCan someone reproduce? If it's not a pygithub problem, a simplified case to pass upstream to 'requests' would be great--I really don't understand what's going on enough to find the fault myself.\n"}}, {"doc": {"_id": 282, "title": "Cache, load/save, rate limit, oh my.", "content": "I don't think I'm asking for more than a discussion about how to approach the problem I'm working on ... but here goes.\n\nI copy my issues for reporting and housekeeping purposes into a local database.   PyGithub made this easy and fun.  But then I ran up against the rate limit.  I can slow things down and spread copy work over some hours; so there's that.\n\nI don't think it matters to what follows but I'm adding fields for things like priority, and adding a more complex set of states an issue can move thru.  Those are derived from labels on the issues.  From time to time I fetch recent events and if is issue related I regenerate it's entry in my db; so I don't need to do a full copy that often.   My db is designed so i can discard it at any time and regenerate it - at the cost of a few hours.  Imperfections mean that happens: a) I'm imperfect, and b) at least one change to an issue doesn't generate an event.\n\nAll my report generation runs without contacting github.  I have one script that contacts github which can bootstrap my db, update it, and make misc. updates that arise out of the housekeeping.\n\nReading #26 was interesting.\n\nI noticed update,save and load methods, and thinking of ways to make the full copy less rate limited.\n\nI figured the scan that does the copy could check a cache of pickles (key'd by URL), and use 'em + update to reduce the load.   So I cheerfully went off and built my cache of pickled issues.\n\nThe scan is roughly:\n\n``` python\nfor github_issue in repo.get_issues(state=u'all'):\n    digest(github_issue)\n```\n\nNaively I now yearn to write `repo.get_urls_of_issues(state_u'all')`\n\nThe wonder of pygithub is that I really didn't need to read the github doc at all; but I feel there may well be more to this.  For example how deep is the save/load?  Do I have to cache users, milestones, label objects too?  If so patching the restored objects looks tedious.\n\nIn more grandiose thinking ... it might be possible ... to plumb a mode into pygit that always has a cache of pickled objects and which try those+update whenever possible.  Looking at the fetching code made it clear that I shouldn't try to do that and I really ought to get back to the real work.\n"}}, {"doc": {"_id": 281, "title": "set_label add_to_labels no longer works", "content": "```\nIn [11]: g = Github(settings.GITHUB_USERNAME, settings.GITHUB_PASSWORD)\n\nIn [12]: repo = g.get_repo('...')\n\nIn [13]: issue = repo.get_issue(2973)\n\nIn [14]: issue.set_labels('exception')\n---------------------------------------------------------------------------\nUnknownObjectException                    Traceback (most recent call last)\n<ipython-input-14-5171ec2f3edf> in <module>()\n----> 1 issue.set_labels('exception')\n\n/Users/.../.virtualenv/lib/python2.7/site-packages/github/Issue.py in set_labels(self, *labels)\n    372             \"PUT\",\n    373             self.url + \"/labels\",\n--> 374             input=post_parameters\n    375         )\n    376 \n\n/Users/.../.virtualenv/lib/python2.7/site-packages/github/Requester.pyc in requestJsonAndCheck(self, verb, url, parameters, headers, input, cnx)\n    167 \n    168     def requestJsonAndCheck(self, verb, url, parameters=None, headers=None, input=None, cnx=None):\n--> 169         return self.__check(*self.requestJson(verb, url, parameters, headers, input, cnx))\n    170 \n    171     def requestMultipartAndCheck(self, verb, url, parameters=None, headers=None, input=None):\n\n/Users/.../.virtualenv/lib/python2.7/site-packages/github/Requester.pyc in __check(self, status, responseHeaders, output)\n    175         output = self.__structuredFromJson(output)\n    176         if status >= 400:\n--> 177             raise self.__createException(status, responseHeaders, output)\n    178         return responseHeaders, output\n    179 \n\nUnknownObjectException: 404 {u'documentation_url': u'https://developer.github.com/v3/issues/labels/#replace-all-labels-for-an-issue', u'message': u'Not Found'}\n\nIn [17]: repo.get_label('exception')\nOut[17]: <github.Label.Label at 0x10d4ba490>\n```\n\nSame exception happens whatever method I use to set labels.\n\n```\nIn [19]: label = repo.get_label('exception')\n\nIn [20]: issue.add_to_labels(label)\n\nUnknownObjectException: 404 {u'documentation_url': u'https://developer.github.com/v3/issues/labels/#replace-all-labels-for-an-issue', u'message': u'Not Found'}\n```\n"}}, {"doc": {"_id": 280, "title": "Adding unaffiliated members in now broken (API changes)", "content": "https://developer.github.com/changes/2014-08-05-team-memberships-api/\n"}}, {"doc": {"_id": 279, "title": "commit.author returns NoneType, if author is not an active GitHub username", "content": "The only way to find the date of the commit is to get the author or commiter and get the date from either one. For https://api.github.com/repos/jacquev6/PyGithub/git/commits/e6520adb487e49188913905af6f028ef8b7e9582 the commit.author appears to return 'NoneType' object, as Adrian Petrescu seems to be an inactive user in GitHub. \n\nhttps://github.com/jacquev6/PyGithub/commit/e6520adb487e49188913905af6f028ef8b7e9582\n\nWith an active author NamedUser like, for example, akfish, this problem doesn't occur\n\nhttps://github.com/jacquev6/PyGithub/commit/ea4bd8c9ad94a2e38bc272c9f9ff8cfdccea4c03\n\nAn error in my own project (that uses PyGithub as a library), where I discovered this:\n\nAttribute Error for sha(e6520adb487e49188913905af6f028ef8b7e9582) 'NoneType' object has no attribute 'created_at'\nTraceback (most recent call last):\n  File \"/Users/bgt/git/GitHubResearchDataMiner/src/GitHubResearchDataMiner.py\", line 19, in <module>\n    connection.getCsv()\n  File \"/Users/bgt/git/GitHubResearchDataMiner/src/GitHubConnection.py\", line 41, in getCsv\n    fileh.write(self.getCsvLineFromCommit(commit)+'\\n')\n  File \"/Users/bgt/git/GitHubResearchDataMiner/src/GitHubConnection.py\", line 65, in getCsvLineFromCommit\n    reva = commit.sha+\";\"+str(commitauthor.created_at)+\";\"+commitfiles+\";\"+commitadds+\";\"+commitdels+\";\"+commitchanges+\";\"+commitcommit.message\nAttributeError: 'NoneType' object has no attribute 'created_at'\n"}}, {"doc": {"_id": 278, "title": "Iterating through repo.get_tags() throws NoneType TypeError for repositories with lots of tags", "content": "For repositories with lots of tags (git, linux, etc.), iterating through _repo.get_tags()_ throws a NoneType _TypeError_. Please see the following for the steps to recreate:\n\n```\neric@white:~/autoport> pip freeze|ack pygithub\nPyGithub==1.25.0\n\neric@white:~/autoport> python\nPython 2.7.3 (default, Feb 27 2014, 20:00:17) \n[GCC 4.6.3] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> from github import Github\n>>> tags = Github(\"...\").get_repo(2325298).get_tags()\n>>> for tag in tags:\n...     print tag\n... \n<github.Tag.Tag object at 0xb6e1848c>\n<github.Tag.Tag object at 0xb6e18e8c>\n...\n<github.Tag.Tag object at 0xb6d14b0c>\n<github.Tag.Tag object at 0xb6d14c0c>\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/usr/local/lib/python2.7/dist-packages/github/PaginatedList.py\", line 48, in __iter__\n    newElements = self._grow()\n  File \"/usr/local/lib/python2.7/dist-packages/github/PaginatedList.py\", line 60, in _grow\n    newElements = self._fetchNextPage()\n  File \"/usr/local/lib/python2.7/dist-packages/github/PaginatedList.py\", line 177, in _fetchNextPage\n    for element in data\n  File \"/usr/local/lib/python2.7/dist-packages/github/GithubObject.py\", line 74, in __init__\n    self._storeAndUseAttributes(headers, attributes)\n  File \"/usr/local/lib/python2.7/dist-packages/github/GithubObject.py\", line 86, in _storeAndUseAttributes\n    self._useAttributes(attributes)\n  File \"/usr/local/lib/python2.7/dist-packages/github/Tag.py\", line 73, in _useAttributes\n    if \"commit\" in attributes:  # pragma no branch\nTypeError: argument of type 'NoneType' is not iterable\n```\n"}}, {"doc": {"_id": 277, "title": "Added MANIFEST.in", "content": "Hi. (Not only) In the latest version, the COPYING and COPYING.LESSER files are missing when `setup.py sdist` is run. This commit rectifies that through the usage of MANIFEST.in.\n"}}, {"doc": {"_id": 276, "title": "Error installing via pip on Arch Linux", "content": "```\n$ sudo pip install pygithub3\n  Downloading/unpacking pygithub3 (from -r packages.txt (line 4))\n  Downloading pygithub3-0.5.tar.gz\n  Running setup.py (path:/tmp/pip_build_root/pygithub3/setup.py) egg_info for package pygithub3\n    Traceback (most recent call last):\n      File \"<string>\", line 17, in <module>\n      File \"/tmp/pip_build_root/pygithub3/setup.py\", line 7, in <module>\n        import pygithub3\n      File \"/tmp/pip_build_root/pygithub3/pygithub3/__init__.py\", line 10, in <module>\n        from github import Github\n    ImportError: No module named 'github'\n    Complete output from command python setup.py egg_info:\n    Traceback (most recent call last):\n\n  File \"<string>\", line 17, in <module>\n\n  File \"/tmp/pip_build_root/pygithub3/setup.py\", line 7, in <module>\n\n    import pygithub3\n\n  File \"/tmp/pip_build_root/pygithub3/pygithub3/__init__.py\", line 10, in <module>\n\n    from github import Github\n\nImportError: No module named 'github'\n\n----------------------------------------\nCleaning up...\nCommand python setup.py egg_info failed with error code 1 in /tmp/pip_build_root/pygithub3\nStoring debug log for failure in /root/.pip/pip.log\n```\n"}}, {"doc": {"_id": 275, "title": "Capitalization of the 2FA OTP request header", "content": "Running\n\n``` python\nfrom github import Github\nuser = Github(login_or_token='username', password='password').get_user()\ntry:                                                                               \n    auth = user.create_authorization(scopes=['repo'], note='test')\nexcept GithubException:                                                         \n    password = input()                                                             \n    auth = user.create_authorization(scopes=['repo'], note='test', onetime_password=password)\n```\n\nyields a `TwoFactorException` with the following traceback:\n\n```\nTraceback (most recent call last):\n  File \"./mygithub.py\", line 9, in <module>\n    auth = user.create_authorization(scopes=['repo'], note='test')\n  File \"/home/tradej/.local/lib/python3.3/site-packages/github/AuthenticatedUser.py\", line 436, in create_authorization\n    headers=request_header,\n  File \"/home/tradej/.local/lib/python3.3/site-packages/github/Requester.py\", line 169, in requestJsonAndCheck\n    return self.__check(*self.requestJson(verb, url, parameters, headers, input, cnx))\n  File \"/home/tradej/.local/lib/python3.3/site-packages/github/Requester.py\", line 177, in __check\n    raise self.__createException(status, responseHeaders, output)\ngithub.GithubException.TwoFactorException: 401 {'documentation_url': 'https://developer.github.com/v3/auth#working-with-two-factor-authentication', 'message': 'Must specify two-factor authentication OTP code.'}\n```\n\nThis is caused by the OTP header string being all lowercase. If it is properly uppercased as in this pull request, the authentication process finishes correctly.\n"}}, {"doc": {"_id": 274, "title": "v2 don't seem to work with uritemplate.py", "content": "The uritemplate syntax used, doesn't seem to work with the uritemplate.py library in requirements (unless it's not the one at https://github.com/uri-templates/uritemplate-py/ ?)\n\n``` py\nTraceback (most recent call last):\n  File \"./testit.py\", line 26, in <module>\n    r = g.get_repo('jacquev6/PyGithub')\n  File \"./PyGithub.git/PyGithub/Blocking/Github.py\", line 443, in get_repo\n    url = uritemplate.expand(\"https://api.github.com/repos/{owner}/{repo}\", owner=repo[0], repo=repo[1])\nTypeError: expand() got an unexpected keyword argument 'owner'\n```\n\nThe required syntax seems to be:\n\n``` py\nuritemplate.expand(\"https://api.github.com/repos/{owner}/{repo}\", {'owner':repo[0], 'repo':repo[1]})\n```\n\nTested with uritemplate 0.5 and 0.6\n"}}, {"doc": {"_id": 273, "title": "Enable Sourcegraph", "content": "I want to use [Sourcegraph code search and code review](https://sourcegraph.com) with PyGithub. A project maintainer needs to enable it to set up a webhook so the code is up-to-date there.\n\nCould you please enable PyGithub on @Sourcegraph by going to https://sourcegraph.com/github.com/jacquev6/PyGithub and clicking on Settings? (It should only take 15 seconds.)\n\nThank you!\n"}}, {"doc": {"_id": 272, "title": "g.get_user() returns a Named user without a URL", "content": ""}}, {"doc": {"_id": 271, "title": "Point to an example of the oAuth feature.", "content": "Hello.\n\nCan you please point me to an example of oauth new feature on v2, I really want start to test it in our internal enviroment (making public the code) to allow us propose improvements and allow create v2 ASAP, but I could not understand the logic behind what is already done, user:password authentication is not enought for us already and we think we can help a lot in finish your amazing pythonistic implementation.\n\nThanks in advance.\n"}}, {"doc": {"_id": 270, "title": "Add helpers for structured input", "content": "Helpers would be useful to build input for all methods accepting something structured:\n- search queries\n- git author, committer or tagger\n- create_git_tree\n- ...\n"}}, {"doc": {"_id": 269, "title": "Passing Milestone=None to create_issue?", "content": "I want to assign a label to my issues, but had to make a fake milestone to successfully run for the moment. `issue = repo.create_issue(title,comment)` works fine per https://github.com/jacquev6/PyGithub/issues/132 but right now am doing the following. How do I pass `None`?\n\n```\nfrom github import Github\n#--------\nowner = '<me>'\npassword = '<pass>'\nproject = '<project name>'\n#--------\ng = Github(owner,password)\nrepo = g.get_user(owner).get_repo(project)\n#--------\ntitle = 'test title'\nassignee = owner\ncomment = 'some comment goes here.'\n#--------\ntry:\n    milestone = repo.create_milestone('fake milestone')\nexcept:\n    milestone = repo.get_milestone(1)\n#--------\ntry:\n    repo.create_label('comment','fbca04')\n    print('debug: created comment label')\nexcept:\n    print('debug: comment label already made')\nfinally:\n    label = repo.get_label('comment')\n#issue = repo.create_issue(title,comment)\nissue = repo.create_issue(title,comment,assignee,milestone,[label])\n```\n"}}, {"doc": {"_id": 268, "title": "Git Refs and :ref", "content": "Let's go to API: https://developer.github.com/v3/git/refs/\n\n> The ref in the URL must be formatted as `heads/branch`, not just `branch`. For example, the call to get the data for a branch named skunkworkz/featureA ...\n\nYour Doc:\n\n> `Repository.get_git_ref(ref)`\n> Calls the GET /repos/:owner/:repo/git/refs/`:ref` end point.\n> This is the only method calling this end point.\n> Parameters:   `ref` \u2013 mandatory string\n> Return type:  GitRef\n\nLet's implement GitHub's examples:\n\n``` python\nrepo = instance.get_repo((\"octocat\", \"Hello-World\")\nref = repo.get_git_ref(\"heads/skunkworkz/featureA\")\n```\n\n**Expected**: `GitRef` Instance\n**Received**: AssertionError - `assert ref.startswith(\"refs/\")`\n\n**Proposition**: Refactor behaviour of [get_git_ref](https://github.com/jacquev6/PyGithub/blob/develop_v2/PyGithub/Blocking/Repository.py#L1597) accordingly to GitHub API Docs (remove \"requirements\" of `ref/` in `:ref`).\n"}}, {"doc": {"_id": 267, "title": "Implement try_xxx methods", "content": "Github.try_get_user(login) will return None if GET https://api.github.com/users/{login} return 404\n\nGeneraly, try_xxx will raise only on 5XX, not on 4XX.\n\nGood applications include PullRequest.try_merge(), Repository.try_merge(), etc.\n"}}, {"doc": {"_id": 266, "title": "Differentiate between \"no stats to generate\" (204) and \"not ready\" (202)", "content": "Hi.,\n\nis it possible to improve method Repository.get_stats_contributors(self) and other similar methods on stats to distinct between no result on empty, new repos and no results due generation time on the server side? Because PyGithub in both will return None. Or maybe there is some method to directly read HTTP response code, so I will use this, but couldn't find such..\n\nExample:\n\n``` shell\n(supra-repos)oskar@yoshimune:~/data/supra-repos$ curl -i https://api.github.com/repos/wiki-worker1/testowy/stats/contributors\nHTTP/1.1 204 No Content\nServer: GitHub.com\nDate: Sun, 03 Aug 2014 10:25:46 GMT\nStatus: 204 No Content\nX-RateLimit-Limit: 60\nX-RateLimit-Remaining: 53\nX-RateLimit-Reset: 1407065078\nX-XSS-Protection: 1; mode=block\nX-Frame-Options: deny\nContent-Security-Policy: default-src 'none'\nAccess-Control-Allow-Credentials: true\nAccess-Control-Expose-Headers: ETag, Link, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval\nAccess-Control-Allow-Origin: *\nX-GitHub-Request-Id: 5BE6DE53:2B9A:5E561BE:53DE0E29\nStrict-Transport-Security: max-age=31536000; includeSubdomains\nX-Content-Type-Options: nosniff\nVary: Accept-Encoding\nX-Served-By: 62a1303ae95931e56e387e87d354bb24\n\n(supra-repos)oskar@yoshimune:~/data/supra-repos$ curl -i https://api.github.com/repos/wikiteams/linda-nlp/stats/contributors\nHTTP/1.1 202 Accepted\nServer: GitHub.com\nDate: Sun, 03 Aug 2014 10:26:20 GMT\nContent-Type: application/json; charset=utf-8\nStatus: 202 Accepted\nX-RateLimit-Limit: 60\nX-RateLimit-Remaining: 52\nX-RateLimit-Reset: 1407065078\nX-GitHub-Media-Type: github.v3\nX-XSS-Protection: 1; mode=block\nX-Frame-Options: deny\nContent-Security-Policy: default-src 'none'\nContent-Length: 5\nAccess-Control-Allow-Credentials: true\nAccess-Control-Expose-Headers: ETag, Link, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval\nAccess-Control-Allow-Origin: *\nX-GitHub-Request-Id: 5BE6DE53:0441:258191F:53DE0E4C\nStrict-Transport-Security: max-age=31536000; includeSubdomains\nX-Content-Type-Options: nosniff\n\n{\n\n}\n```\n"}}, {"doc": {"_id": 265, "title": "labels_url in Pull request class is None", "content": "Does not matter if I pass Label instance or string, it always complains with this:\n\n```\nIn [18]: pull.add_to_labels(needs_rebase)\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n<ipython-input-18-8bcf0296eaae> in <module>()\n----> 1 pull.add_to_labels(needs_rebase)\n\n/lib/python2.7/site-packages/PyGithub-2.0.0_alpha.3-py2.7.egg/PyGithub/Blocking/Issue.py in add_to_labels(self, *label)\n    262         label = _snd.normalizeList(_snd.normalizeLabelName, label)\n    263 \n--> 264         url = uritemplate.expand(self.labels_url)\n    265         postArguments = label\n    266         r = self.Session._request(\"POST\", url, postArguments=postArguments)\n\n/lib/python2.7/site-packages/uritemplate/api.py in expand(uri, var_dict, **kwargs)\n     31 \n     32     \"\"\"\n---> 33     return URITemplate(uri).expand(var_dict, **kwargs)\n     34 \n     35 \n\n/lib/python2.7/site-packages/uritemplate/template.py in __init__(self, uri)\n     61         #: :class:`URIVariable`\\ s\n     62         self.variables = [\n---> 63             URIVariable(m.groups()[0]) for m in template_re.finditer(self.uri)\n     64         ]\n     65         #: A set of variable names in the URI.\n\nTypeError: expected string or buffer\n\nIn [19]: pull.labels_url\n\n\n```\n"}}, {"doc": {"_id": 264, "title": "orgs not users", "content": "Thank you this is the library I've been looking for!\n\nI am able to get and print all my repos\n\n```\nrepo_list = g.get_user().get_repos();\nprint \"%s has %d repos\" % (user, repo_count(repo_list))\n```\n\nthis takes a user and a password. Is there a way to search by organizations? We work with many orgs I'm looking to do something like\n\n```\nfor orgs in orgs_list:\n    repo_list = g.get_org().get_repos()\n```\n\nThank you for any help and feed back, I'm using the stable 1.25 version\n"}}, {"doc": {"_id": 263, "title": "get list of labels on a repository", "content": "`get_label` will return a single label, I would like to be able to get a list of all labels that exist.\n"}}, {"doc": {"_id": 262, "title": "Make Github.get_user return an Organization if needed", "content": "Do we really want to do that? Or maybe Github.get_entity?\n\n/users/:org_login works and returns the org:\n\nGET https://api.github.com/users/github\n{\n  \"login\": \"github\",\n  \"type\": \"Organization\",\n  \"name\": \"GitHub\",\n  ...\n}\n"}}, {"doc": {"_id": 261, "title": "Integrate and display external tools", "content": "Coveralls\nTravis\nWaffle?\nBountysource? GitTip?\n\nBrag a bit with https://pypip.in  [![Downloads](https://pypip.in/d/PyGithub/badge.svg)](https://pypi.python.org/pypi/PyGithub)\n\nReview everything available at http://shields.io\n\nhttps://caniusepython3.com/project/PyGithub\n"}}, {"doc": {"_id": 260, "title": "Implement the Enterprise-specific end-points", "content": "/api/...\n/setup/...\n"}}, {"doc": {"_id": 259, "title": "Implement all comments end-points", "content": "Gist comments, commit comments, issue and pull comments.\n"}}, {"doc": {"_id": 258, "title": "Implement (de)serialization save/load", "content": ""}}, {"doc": {"_id": 257, "title": "Implement equality comparison for two objects", "content": "Are a Contributor and and User or AuthenticatedUser representing the same user equal?\n\nSome classes and structures compare on all attributes, some only on a subset (Entity.login, Repository.full_name, Plan.name)\n"}}, {"doc": {"_id": 256, "title": "PullRequest.mergeable spuriously returns None on first run", "content": "I have a script which fetches pull requests, iterates through them and prints the value of `p.mergeable`. \nCuriously, when I run this script for the first time, the value is often `None`:\n\n```\nnr 3078, mergeable:True\nnr 3076, mergeable:True\nnr 3058, mergeable:True\nnr 3046, mergeable:None\nnr 3045, mergeable:None\nnr 3042, mergeable:None\nnr 3004, mergeable:None\nnr 3001, mergeable:None\nnr 2990, mergeable:True\nnr 2974, mergeable:None\n```\n\nbut if I run this script a second time, the correct values appear:\n\n```\nnr 3078, mergeable:True\nnr 3076, mergeable:True\nnr 3058, mergeable:True\nnr 3046, mergeable:True\nnr 3045, mergeable:True\nnr 3042, mergeable:False\nnr 3004, mergeable:False\nnr 3001, mergeable:False\nnr 2990, mergeable:True\nnr 2974, mergeable:True\n```\n\nWhat could be the reason behind this, and how can I work around it in the meantime?\n\nThis is using PyGithub 1.25.0 under Python 3 (but I have also previously observed this under Python2)\n"}}, {"doc": {"_id": 255, "title": "Enable automated testing on Python 3.4", "content": ""}}, {"doc": {"_id": 254, "title": "Add oauth authentication", "content": "Hi,\n\nI implemented this, and I would like to make it better so that we can integrate it in the package.\nI would like your feedback.\n\nI used these methods to authenticate and they work.\n\nThanks!\n\nTODOs:\n- [ ] Get feedback about naming/style\n- [ ] Write tests\n- [ ] Update the class\n"}}, {"doc": {"_id": 253, "title": "Problems with watchers_count property", "content": "Hi,\n\nI checked with newest 1.25 version. I have some questions:\n\n1) Whats the difference between watchers and watchers_count in Repository.py?\n2) Why both return number of stars while number of watchers is much different in reality for a repo ? (checked on resume/resume.github.com/)\n\nregards,\nOs.J.\n"}}, {"doc": {"_id": 252, "title": "change api-connectivity options for PyGithub objects", "content": "Hi,\n\nis it possible to change GitHub API connection options (e.g. login/pass, token, client_id etc) for instance objects of PyGithub classes, like Repository, User? Let's say I have a an instance of Repository as a result of get_repo(key), but because of quota depletion I want to modify connection to GitHub API ad-hoc and call from that same Repository object get_contributors() or make some other action..\nWould such feature be accepted in future versions if me or sb implement it? (yet didnt made enough research on code, maybe its impossible with current architecture).\n\nBest Regards,\nOs.J.\n"}}, {"doc": {"_id": 251, "title": "Get githhub users between 2 dates", "content": "I wanted to know what will be the python script to get details of githhub users(such as id, location, etc....) between two dates using PyGitHub api. \n"}}, {"doc": {"_id": 250, "title": "unable to retrieve download_count", "content": "I am not able to retrieve download_count for download object.\nI have tried all possible ways to use Repository.get_download(id) method but it is not clear which id this method takes and how to get that id.\nIf i call the repository.get_downloads() method as shown below then I get a  traceback error and I am not able to find out where I am going wrong:\n    for repo in Github().search_repositories(\"test\"):\n        repo_has_download=repo.has_downloads\n        if repo_has_download==True:\n            for download in repo.get_downloads():\n                download_count= download.download_count()\n                print download_count\n\n```\n    else:\n        repo_download_count=0\n        print repo_download_count\n```\n\nthe error is as shown below:\nTraceback (most recent call last):\n      File \"D:\\2014-Jason Beach\\python\\Final Python script\\getting_downloads.py\", line 12, in <module>\n        for download in repo.get_downloads():\n      File \"C:\\Python27\\lib\\site-packages\\github\\PaginatedList.py\", line 48, in **iter**\n        newElements = self._grow()\n      File \"C:\\Python27\\lib\\site-packages\\github\\PaginatedList.py\", line 60, in _grow\n        newElements = self._fetchNextPage()\n      File \"C:\\Python27\\lib\\site-packages\\github\\PaginatedList.py\", line 158, in _fetchNextPage\n        parameters=self.__nextParams\n      File \"C:\\Python27\\lib\\site-packages\\github\\Requester.py\", line 169, in requestJsonAndCheck\n        return self.__check(*self.requestJson(verb, url, parameters, headers, input, cnx))\n      File \"C:\\Python27\\lib\\site-packages\\github\\Requester.py\", line 177, in __check\n        raise self.__createException(status, responseHeaders, output)\n    GithubException: 403 {u'documentation_url': u'https://developer.github.com/v3/#rate-limiting', u'message': u\"API rate limit exceeded for 197.226.157.45. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)\"}\n    >>> \n"}}, {"doc": {"_id": 249, "title": "documentation typos", "content": ""}}, {"doc": {"_id": 248, "title": "Broken links in documentation", "content": "http://jacquev6.github.io/PyGithub/v1/introduction.html contains a couple of links to http://jacquev6.github.io/PyGithub/v1/todointernallink in the \"What next?\" section which don't work, which isn't very newcomer-friendly!\n"}}, {"doc": {"_id": 247, "title": "v3 changes gist.user to gist.owner", "content": "https://developer.github.com/v3/versions/#differences-from-beta-version\n\nThis works for me, however I'm not entirely sure how to modify existing tests since the github output changed.\n"}}, {"doc": {"_id": 246, "title": "Implement support for getting repo by id", "content": "This allows the Github class to retrieve repos by either their full name\nor id. If the user passes in an id for a repo which doesn't exist or in which\nthey don't have sufficient permissions, an UnknownObjectException will\nbe raised. This addresses issue #245.\n"}}, {"doc": {"_id": 245, "title": "Implement getting repo by id", "content": "I had an exchange with James Dennes from GitHub regarding this. My original question was something to the effect of \"is there a way to get a repo by its id rather than its name?\" The motivation for this is, while a repo's name can change, its id cannot.\n\nTo summarize what James said:\n\n> We haven't documented this yet, however you've welcome to use repository endpoints like this:\n> \n> /repositories/:id\n> \n> For example, these two curls produce identical results:\n> \n> curl https://api.github.com/repos/github/linguist\n> curl https://api.github.com/repositories/1725199\n> \n> These should eventually be documented, however I can't promise exactly when that will be. However, you can definitely rely on these endpoints.\n\nThis also works with private repos, provided an access token is included in the request and the user has sufficient permissions.\n\nAs far as I can tell, this functionality is not provided in PyGithub. James indicated that this will eventually be documented and is a stable endpoint, so I think it should be included in the library.\n\nExamples of how I think this should work:\n\n``` python\ngh = github.Github('my_access_token')\nrepo = gh.get_user().get_repo(1234567)\nrepo = gh.get_repo(1234567)\n```\n\nThe only issue I see with this is that `get_repo` would be delegating to one of two endpoints, `/repos/:owner/:repo` or `/repositories/:id`, depending on whether a name or an id is passed in. The other option would be to have an explicit `get_repo_by_id` which seems less ideal.\n\nI'm hoping to work on a PR when I get a chance this week.\n\nThoughts, @jacquev6?\n"}}, {"doc": {"_id": 244, "title": "got multiple values for keyword argument 'headers'", "content": "```\nimport PyGithub\ng = PyGithub.BlockingBuilder().Login('login', 'password').Build()\nu = g.get_authenticated_user()\n```\n\n```\nTraceback (most recent call last):\n  File \"follow.py\", line 3, in <module>\n    u = g.get_authenticated_user()\n  File \"/usr/local/lib/python2.7/dist-packages/PyGithub-2.0.0_alpha.1-py2.7.egg/PyGithub/Blocking/Github.py\", line 186, in get_authenticated_user\n    r = self.Session._request(\"GET\", url)\n  File \"/usr/local/lib/python2.7/dist-packages/PyGithub-2.0.0_alpha.1-py2.7.egg/PyGithub/Blocking/Session.py\", line 88, in _request\n    request = requests.Request(verb, url, params=urlArguments, data=data, headers=headers)\nTypeError: __init__() got multiple values for keyword argument 'headers'\n```\n"}}, {"doc": {"_id": 243, "title": "Linux compatability", "content": "how do i install this program on Linux?\n"}}, {"doc": {"_id": 242, "title": "Python 3 compatibility", "content": "These lines cause errors in Python 3:\n\nhttps://github.com/jacquev6/PyGithub/blob/develop_v2/PyGithub/Blocking/_receive.py#L68\n\n```\n            except _ConversionException, e:\n```\n\nhttps://github.com/jacquev6/PyGithub/blob/develop_v2/PyGithub/Blocking/_receive.py#L120\n\n```\n            except (ValueError, TypeError), e:\n```\n\nIf I'm reading http://python3porting.com/noconv.html correctly, they could be written like this, which would work for Python 2.6 and later:\n\n```\n            except _ConversionException as e:\n            except (ValueError, TypeError) as e:\n```\n"}}, {"doc": {"_id": 241, "title": "v2 module names do not conform to PEP8", "content": "I noticed that the module names in version 2 do not conform to [PEP8](http://legacy.python.org/dev/peps/pep-0008/#package-and-module-names): \"Modules should have short, _all-lowercase_ names.\" The files in the `develop_v2` branch are camel-cased. Can the filenames be changed to lowercase?\n"}}, {"doc": {"_id": 240, "title": "Repository.get_commits should not default to filter the author", "content": "Since this [isn't a required parameter](http://developer.github.com/v3/repos/commits/), it shouldn't be specified with a default value.  Currently, this is limiting the commits returned to just the logged-in user.  \n\nI believe that removing these lines resolves the issue:\n\nhttps://github.com/jacquev6/PyGithub/blob/master/github/Repository.py#L1154-L1155 \n"}}, {"doc": {"_id": 239, "title": "Creating Event object via GitHub web hook", "content": "Greetings,\n\nWhat's the correct way to create an Event object via Github webhook?  Using a very simple bottle.py-based server you would think you could do\n\n```\nfrom bottle import route, run, template, request, response\nimport github\nimport json\n\n@route(\"/\", method='POST')\ndef index():\n    e = github.Event.Event(request.json)\n\nrun(host='xxx.xxx.xxx.xxx', port=8080, debug=True)\n```\n\nbut in looking at the code that obviously won't work.  Is there a parsing method somewhere that I could use?\n"}}, {"doc": {"_id": 238, "title": "import PyGithub does not work", "content": "I've followed the [instructions](http://jacquev6.github.io/PyGithub/v2/introduction.html) for installing the version 2 alpha. According to the introduction guide the module should be imported with `import PyGithub` but this cause an `No module named PyGithub` error.\n\nThis works following the [introduction guide of the version 1](http://jacquev6.github.io/PyGithub/v1/introduction.html): `from github import Github` in this case the import seems to work\n"}}, {"doc": {"_id": 237, "title": "Change quote to quote_plus and avoid double-escaping some problematic characters.", "content": "References issue #236.\n"}}, {"doc": {"_id": 236, "title": "Issue search not working", "content": "I was very excited to see issue search become a part of PyGithub.  Unfortunately I can't seem to make it work.  If I call the following via curl:\n\n```\ncurl -i --user '***:***' 'https://api.github.com/search/issues?l=&q=updated:>2014-03-04T18:28:11Z+repo:saltstack/salt+type=Issues'\n```\n\nI get 5 issues back.  If I try the same query via PyGithub:\n\n```\nfrom github import Github\nfrom github import enable_console_debug_logging\n\ng = Github('***','***')\nenable_console_debug_logging()\n\nfor i in g.search_issues('type:Issues+updated:>2014-03-04T18:28:11Z+repo:saltstack/salt'):\n    print i.title\n```\n\nor any of a number of other permutations of the search criteria like `g.search_issues('',  repo='saltstack/salt-api', type='Issues', updated='>2014-03-04T18:28:11Z')` I never get anything back.  I did notice in the debug log\n\n```\nGET https://api.github.com/search/issues?q=type%253AIssues%252Bupdated%253A%253E2014-03-04T18%25\n3A28%253A11Z%252Brepo%253Asaltstack%2Fsalt {'Authorization': 'Basic (login and password removed)\n', 'User-Agent': 'PyGithub/Python'} null ==> 200 {'status': '200 OK', 'x-ratelimit-remaining': '\n29', 'x-github-media-type': 'github.beta; format=json', 'x-content-type-options': 'nosniff', 'ac\ncess-control-expose-headers': 'ETag, Link, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remainin\ng, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval', 'x-github-reque\nst-id': 'CCE495D9:1E89:2337E0D:5317D580', 'cache-control': 'no-cache', 'vary': 'Accept-Encoding'\n, 'content-length': '28', 'server': 'GitHub.com', 'x-ratelimit-limit': '30', 'access-control-all\now-credentials': 'true', 'date': 'Thu, 06 Mar 2014 01:55:12 GMT', 'access-control-allow-origin':\n '*', 'content-type': 'application/json; charset=utf-8', 'x-ratelimit-reset': '1394070972'} {\"to\ntal_count\":0,\"items\":[]}\n```\n\nthe URL escaping seems weird, and if I pass that URL via curl, I get nothing back.  Is the library escaping too much?\n"}}, {"doc": {"_id": 235, "title": "Implement connection to Github Enterprise", "content": ""}}, {"doc": {"_id": 234, "title": "Implement the 'Public Keys' end-points", "content": "http://developer.github.com/v3/repos/keys/ and http://developer.github.com/v3/users/keys/\n"}}, {"doc": {"_id": 233, "title": "Implement the 'Repository Content' end-points", "content": "http://developer.github.com/v3/repos/contents/\n"}}, {"doc": {"_id": 232, "title": "Implement the 'Misc' end-points (Emojis, Gitignore, etc.)", "content": "http://developer.github.com/v3/misc/\n"}}, {"doc": {"_id": 231, "title": "Implement the 'Activity' and 'Events' end-points", "content": "http://developer.github.com/v3/activity/ and sub-pages\n"}}, {"doc": {"_id": 230, "title": "Implement the 'Search' end-points", "content": "http://developer.github.com/v3/search/\n"}}, {"doc": {"_id": 229, "title": "Implement the 'Git data' end-points", "content": "http://developer.github.com/v3/git/\nhttps://developer.github.com/v3/repos/commits/\nhttps://developer.github.com/v3/repos/#list-tags\n"}}, {"doc": {"_id": 228, "title": "Implement the 'Issues' and 'Pull requests' end-points", "content": "http://developer.github.com/v3/issues/ and http://developer.github.com/v3/pulls/ and sub-pages.\n"}}, {"doc": {"_id": 227, "title": "Implement the 'Gists' end-points", "content": "http://developer.github.com/v3/gists/ and http://developer.github.com/v3/gists/comments/\n"}}, {"doc": {"_id": 226, "title": "Support older Python 2.x versions", "content": ""}}, {"doc": {"_id": 225, "title": "Add OAuth helpers", "content": "See https://github.com/jacquev6/PyGithubOAuthDemo/blob/master/PyGithubOAuthDemoProj/PyGithubOAuthDemoApp/views.py\n\nIt would be nice if PyGithub provided helpers to generate the URLs used in the OAuth flow.\n"}}, {"doc": {"_id": 224, "title": "Add support for repository, user, issue code search", "content": "Hey, great project, thanks for all the work.\n\nI needed the search API, so I added it for repositories, users, issues, and code. Maybe it works for you.\n\nThe __grow() change is optional, but I think it is useful to have the totalCount property.\nSearch results also populate a 'score' attribute for each element, but I think it's enough that this can be accessed via obj.raw_data.\n"}}, {"doc": {"_id": 223, "title": "Add users/starred (GET)", "content": "Maybe I have missed the way to get the repos starred by a user, nevertheless with this you can do it. Example:\n\nfor repo in g.get_user().get_starred():\n    data.append((repo.name,repo.stargazers_count,repo.html_url))\ndata = sorted(data,key=lambda data: data[1],reverse=True)\npprint.pprint(data,width=255)\n\nShould I add here the rest of http://developer.github.com/v3/activity/starring or in another file?\n"}}, {"doc": {"_id": 222, "title": "Labels inconsistency in API", "content": "I noticed that when you create an issue you must pass a list of Label objects, however when you edit an issue you simply pass a list of strings.\n\nI would propose that both methods accept either a list of strings or a list of label objects. I can make a pull request to fix this issue, are there any other similar inconsistencies that can be cleaned up as well?\n"}}, {"doc": {"_id": 221, "title": "fix typos", "content": ""}}, {"doc": {"_id": 220, "title": "Added onetime_password to create_authorization", "content": "## About\n\ngithub.AuthenticatedUser.create_authorization has been modified to\nsupport two-factor authentication. When two-factor authentication\nis enabled create_authorization will throw an TwoFactorException.\nThe onetime password can be then be passed to create_authorization\non a subsequent call.\n## Usage\n\nBelow is an example of how to login when two-factor authorization is enabled.\n\n``` python\nfrom github import Github\n\ng = Github(username, password)\nuser = g.get_user()\ntry:\n    authorization = user.create_authorization(scopes=['repo'], note='test')\nexcept TwoFactorException:\n    authorization = user.create_authorization(\n        scopes=['repo'], note='test', onetime_password=password)\n\ng = Github(authorization.token)\n```\n"}}, {"doc": {"_id": 219, "title": "Two-factor authentication", "content": "Below is my hacked together version to deal with two-factor authentication. Is there is a better way to use PyGithub to handle this or is this feature needed?\n\nBasically, you run this twice, The first time without code_2fa. If you get the Require2FAError then you run it again with code_2fa. the code_2fa is put into the header of the next authentication request.\n\n``` python\ndef request_token(\n        username, password, scopes, user_agent, code_2fa=None,\n        base_url=MainClass.DEFAULT_BASE_URL,\n        timeout=MainClass.DEFAULT_TIMEOUT,\n        client_id=None, client_secret=None,\n        per_page=MainClass.DEFAULT_PER_PAGE):\n\n    requester = Requester(username, password, base_url, timeout,\n            client_id, client_secret, user_agent, per_page)\n\n    if code_2fa:\n        request_header = {'x-github-otp': code_2fa}\n    else:\n        request_header = None\n\n    status, headers, data = requester.requestJson(\n            \"POST\", \"/authorizations\",\n            input={\"scopes\": scopes, \"note\": str(user_agent)},\n            headers=request_header)\n\n    try:\n        if status == 401 and re.match(r'.*required.*', headers['x-github-otp']):\n            raise Require2FAError()\n        else:\n            data = json.loads(data)\n            return Authorization(requester, headers, data, True)\n    except KeyError:\n        raise AuthenticationError()\n```\n"}}, {"doc": {"_id": 218, "title": "Can now specify assignee as a string", "content": "Issue #214\n\nWhen calling pygithub for calls associated with assignees you can now simply pass a string instead of a NamedUser object. This applies to the following methods:\n- issue.edit()\n- repo.create_issue()\n- repo.get_issues()\n- repo.has_in_assignees()\n- repo.has_in_collaborators()\n- repo.remove_from_collaborators()\n- repo.add_to_collaborators()\n"}}, {"doc": {"_id": 217, "title": "General discussion about v2", "content": "This issue is just a forum for discussions about v2\n"}}, {"doc": {"_id": 216, "title": "Unsure how to use PaginatedList", "content": "Going by the documentation, I thought this would print out a list of all my repositories:\n\n```\ncnt = 0\nfor repo in g.get_user(\"manifoldsquid\").get_repos():\n    cnt += 1\n    print(str(cnt) + \" :\" + repo.name)\n```\n\nBut it only prints the names of the first 30 repos. (I created 33 for this account.) I can set g.per_page to 100 and get all the repos printed, but I was wondering what the right way to do this was -- if i had more than 100 repos, I'd be back in the same situation.\n\nThanks, and apologies if this is a dumb question; I'm new to this.\n"}}, {"doc": {"_id": 215, "title": "Is there an example of editing a file?", "content": "I been able to get the content of a file by getting a repo first and then use the get_file_contents method to get the content, is there sample on how to update the content of the file? i tried to set the content attribute but got the \"can't set attribute\" error. Thanks\n"}}, {"doc": {"_id": 214, "title": "accept strings for assignee", "content": "In the github API you can simply pass the login string to set an assignee, it would be nice to simply pass this string (in place of github.NamedUser.NamedUser).\n"}}, {"doc": {"_id": 213, "title": "Add /user/teams (GET)", "content": ""}}, {"doc": {"_id": 212, "title": "Added 'stargazers_count' property to Repository", "content": ""}}, {"doc": {"_id": 211, "title": "Added 'stargazers_count' property to Repository", "content": "Not sure if I should push to master or develop\n"}}, {"doc": {"_id": 210, "title": "No stargazers_count in Repository", "content": "There should be a stargazers_count property in the Repository class\n"}}, {"doc": {"_id": 209, "title": "Add initial version of getemojis", "content": "First commit for 24pullrequests.. please let me know what return style this should be (as unicode dicts may not be the preferred way here)\n"}}, {"doc": {"_id": 208, "title": "Implement the 'Releases' end-points", "content": "Hi :)\n\nIn case you plan to implement another API call, I'm voting for [Releases](http://developer.github.com/v3/repos/releases/#list-releases-for-a-repository) :+1: \n\nAnd thanks again for this great module, I'm using it as a data mining tool for my Master's Thesis.\n\nBest regards,\nNaor.\n"}}, {"doc": {"_id": 207, "title": "Tag creation date", "content": "Hi again :)\n\nI'm using [Repository.get_tags](http://jacquev6.github.io/PyGithub/github_objects/Repository.html#github.Repository.Repository.get_tags), and I have a question about the `last_modified` attribute.\n\nHere's a code example:\n\n``` python\nfrom github import Github\ng = Github(username, password)\nrepository_obj = g.get_repo('textmate/textmate')\ntags = repository_obj.get_tags()\nt5 = tags[5]\nprint(t5.name) ## v2.0-alpha.9485\nprint(t5.last_modified) ## Sun, 24 Nov 2013 03:06:39 GMT\nprint(t5.commit.stats.last_modified) ## Sat, 05 Oct 2013 12:23:50 GMT\n```\n\nPlease notice the difference between the 2 `last_modified` results.\nChecking this tag on [github.com/textmate](https://github.com/textmate/textmate/releases/tag/v2.0-alpha.9485) shows that `t5.commit.stats.last_modified` is the correct date.\n\nMy question:\nWhat date is stored in `t5.last_modified`?\n\nThanks again for a great module!\nNaor.\n\nps. `t5.last_modified` is not documented in [PyGitHub's reference](http://jacquev6.github.io/PyGithub/github_objects/Tag.html#github.Tag.Tag), nor in [GitHub's API reference](http://developer.github.com/v3/repos/#list-tags).\n"}}, {"doc": {"_id": 206, "title": "Repository's stargazers/watchers by date", "content": "Hi,\n\nThanks again for a great module!\n\nIs there a way to fetch the list of stargazers/watchers for a specific repository, by date?\ni.e. when every stargazer/watcher was added.\n\nI couldn't find it in the reference, so maybe I missed it?\n\nThanks :)\n"}}, {"doc": {"_id": 205, "title": "Implement file deletion", "content": "Unless I am missing something, there does not seem to be a way to delete a file via the Github API with PyGithub currently : \n\nhttp://developer.github.com/v3/repos/contents/#delete-a-file\n"}}, {"doc": {"_id": 204, "title": "Repository.get_commits - author parameter", "content": "Hi,\n\nThanks again for a great module!\n\nI wanted to use the [GET /repos/:owner/:repo/commits](http://developer.github.com/v3/repos/commits/#list-commits-on-a-repository) API to fetch all commits by a certain user to a specific repository.\n\nWhile the API supports filtering by author, it looks like [Repository.get_commits](http://jacquev6.github.io/PyGithub/github_objects/Repository.html#github.Repository.Repository.get_commits) doesn't.\n\nAm I missing something?\n\nRegards,\nNaor.\n"}}, {"doc": {"_id": 203, "title": "Feature request: stats API", "content": "Thank for a a great module!\n\nIn case you're considering to implement the missing APIs, I'm voting for implementing the \"stats\" APIs:\nhttp://developer.github.com/v3/repos/statistics/\n\nCheers,\nNaor.\n"}}, {"doc": {"_id": 202, "title": "Accept strings as labels of issues", "content": "As noted in #200.\n\nThis will be in next release: user will be able to pass strings in methods currently expecting Labels.\n"}}, {"doc": {"_id": 201, "title": "Objects for the same User retrieved in different ways are not equal", "content": "The NamedUser class should probably implement a **eq** method which checks that login  is the same.\n"}}, {"doc": {"_id": 200, "title": "Reconsider use of None values for optional parameters", "content": "A common pattern is used throughout the code where optional values are required to either be `github.GithubObject.NotSet` or an instance of one of the API response types.\nIt would be very convenient if this were more Pythonic and treated `None` as the same as `NotSet`.\n"}}, {"doc": {"_id": 199, "title": "Possible bug with repo.edit", "content": "Thanks for the great library!\nMay have found a small bug with repo.edit\nCan use it to change the repo name, but doesn't change repo from public to private like this:\n\n``` python\nrepo.edit(repo.name,public=False)\n```\n\n(but when I do the same change using curl it works fine)\n"}}, {"doc": {"_id": 198, "title": "Broken link in docs", "content": "http://oddshocks.com/blog/2012/08/02/developing-charsheet/ is a 404\n\nThanks for PyGithub! It is really useful.\n"}}, {"doc": {"_id": 197, "title": "Add DevAssistant to \"Projects using PyGithub\"", "content": "Hi, I'm one of the developers of DevAssistant (https://github.com/bkabrda/devassistant, http://devassistant.org). We're using PyGithub for creating repositories for users etc. It'd be great you could list us in Projects using PyGithub :)\n"}}, {"doc": {"_id": 196, "title": "Feature request: Add Github.get_hook()", "content": "The current Github api supports /hooks/<name> to get the data regarding a single hook, instead of having to get the entire list of them.  It would be convenient if there was a get_hook() method to retrieve the descriptor for a single hook, instead of having to filter it from the list retrieved via get_hooks().  It would probably also be faster, for that matter.\n"}}, {"doc": {"_id": 195, "title": "AssertionError triggered for bug in Github", "content": "It's bad form to use assert to check the results from Github; the general advice is, \"Be liberal in what you accept,\" and the violation of this principle has tripped me up.  A minor bug in our local Github instance resulted in an assertion error popping up.  This is a general complaint, but the specific case has to do with the Github.get_hooks() call; in our local Github instance, the \"events\" key of the \"circleci\" hook ends up being:\n\n```\n[[u'commit_comment', u'create', u'delete', u'download', u'follow', u'fork', u'fork_apply', u'gist', u'gollum', u'issue_comment', u'issues', u'member', u'public', u'pull_request', u'pull_request_review_comment', u'push', u'status', u'team_add', u'watch']]\n```\n\nThis makes it impossible to use get_hooks() to get the list of defined hooks.\n"}}, {"doc": {"_id": 194, "title": "GitHub 400 \"Problems parsing JSON\" when creating an issue", "content": "I'm working from the `develop` branch and consistently get an `HTTP 400: Problems parsing JSON` when trying to create an issue.\n\nThe traceback, including the actual API call, is:\n\n```\nTraceback (most recent call last):\n  File \"import.py\", line 68, in <module>\n    issue=repo.create_issue(title=i['description'],body=comment,labels=ilabels)\n  File \"/home/kmaxwell/PyGithub/github/Repository.py\", line 557, in create_issue\n    post_parameters\n  File \"/home/kmaxwell/PyGithub/github/Requester.py\", line 171, in requestJsonAndCheck\n    return self.__check(*self.requestJson(verb, url, parameters, input))\n  File \"/home/kmaxwell/PyGithub/github/Requester.py\", line 182, in __check\n    raise self.__createException(status, output)\ngithub.GithubException.GithubException: 400 {u'message': u'Problems parsing JSON'}\n```\n\nAdditionally, I enabled console logging while debugging (per the contribution guidelines) and have the following logs:\n\n```\nPOST https://api.github.com/repos/vz-risk/VCDB/issues {'Content-Type': 'application/json', 'Authorization': 'token (oauth token removed)', 'User-Agent': 'PyGithub/Python'} {\"body\": \"http://www.heraldonline.com/2013/08/27/5152564/advanced-data-processing-inc-notification.html\\n\\nAnother of the ADP Partner breaches  There are several more on the pinboard--search term is ADP.\\n\\nhttp://posttrib.suntimes.com/news/porter/22190511-418/valpo-ambulance-users-could-have-had-personal-information-stolen.html\\n\\nhttp://www.healthdatamanagement.com/news/breach-notification-hipaa-privacy-security-46520-1.html\\n\\n\\n2013 DataBreach NC\", \"labels\": [\"Breach\"], \"title\": \"VALPARAISO, Ind., Aug. 27, 2013: Advanced Data Processing, Inc.: Notification of Possible Unauthorized Access of Patient Information | PRNewswire | Rock Hill Herald Online\"} ==> 400 {'status': '400 Bad Request', 'x-ratelimit-remaining': '4993', 'x-github-media-type': 'github.beta; format=json', 'x-content-type-options': 'nosniff', 'access-control-expose-headers': 'ETag, Link, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes', 'x-github-request-id': '54c3445d-e229-4b45-b3f1-ef528f1325be', 'x-accepted-oauth-scopes': 'repo, public_repo', 'content-length': '35', 'server': 'GitHub.com', 'x-ratelimit-limit': '5000', 'access-control-allow-credentials': 'true', 'date': 'Wed, 04 Sep 2013 03:27:33 GMT', 'access-control-allow-origin': '*', 'content-type': 'application/json; charset=utf-8', 'x-oauth-scopes': 'user, public_repo, repo, gist', 'x-ratelimit-reset': '1378268851'} {\"message\":\"Problems parsing JSON\"}\n```\n"}}, {"doc": {"_id": 193, "title": "Add Conditional Request and Data Persistence Support Alternative Solution", "content": "An alternative solution to pull request #189 based on #192. I am making this new pull request for clarity.\n## Change List\n1. Add support to [Conditional Request](http://developer.github.com/guides/getting-started/#conditional-requests) API.\n   - Add `GithubObject.etag` property\n   - Add `GithubObject.last_modified` property\n   - Modify `Requester` class to handle 304 response code\n   - Modify `Requester` class to enable making conditional request\n   - Add `NotModifiedException` class for 304 response code\n   - Add `GithubObject.update()` method\n   - Add a few private helper methods to make this work\n2. Add methods for Data Persistence\n   - Add `GithubObject.save(file_fname)` method\n   - Add `GithubObject.load(file_fname)` class method\n3. Test class for conditional request\n## Usage\n\n``` python\n# Get remote issue list and cache locally when syncing\nfor issue in repo.get_issues():\n    issue.save(local_file_path)\n\n# Offline use/Quick restore previous work state\nfor local_file_path in cache.get_files():\n    cached_issue = issue.load(local_file_path)\n    #do something with it\n\n# And check for update when needed\nif (cached_issue.update()):\n    print \"Issue synced\u201c\n\n```\n"}}, {"doc": {"_id": 192, "title": "Refactor: add response header field to GithubObject", "content": "This pull request is provided as a common base for an alternative solution for conditional request API implementation different from Pull Request #189. Both 2 branches solve the issue of how to introduce **response header** information into `GithubObjects`, which is currently discarded but necessary for unsupported GitHub API such as [Conditional Request](http://developer.github.com/guides/getting-started/#conditional-requests). \n\nWhile PR #189 aiming at reducing changes made to the source tree, this branch is more drastic. The signature of `GithubObject`'s constructor is changed to:\n\n``` python\ndef __init__(self, requester, headers, attributes, completed):\n        # ...\n```\n\nThus enforces initialization with header information and exposes all constructor call for modification. That reduces the chance of introduction bugs from human error such as forget to set header values, comparing to more simple solution such as introducing a simple `@property`. \n\nAll constructor calls are resolved to new signature incrementally and thoroughly tested along the way. The chances of introducing bugs are low (if there are any, it should only affect new features involving response headers).\n\nNew testing code for headers are also implemented by hooking up callbacks between `GithubObject` and `Requester` class. Thus every constructor call can be intercepted for assertion. \n\nAlthough this would be a more permanent solution, the downside is obvious for the relatively large amount of changes. But I think in the long run it's worth this trouble and would be better to solve any conflicts before introducing new features involving response headers.\n"}}, {"doc": {"_id": 191, "title": "Know your parent", "content": "Generalize #181\n"}}, {"doc": {"_id": 190, "title": "Rationalize main class", "content": "- constructor's parameters\n- access to values retrieved from headers (rate limiting, etc.)\n- check that all methods are really top-level\n"}}, {"doc": {"_id": 189, "title": "Add Conditional Request and Data Persistence Support ", "content": "## Change List\n1. Add support to [Conditional Request](http://developer.github.com/guides/getting-started/#conditional-requests) API.\n   - Add `GithubObject.etag` property\n   - Add `GithubObject.last_modified` property\n   - Modify `Requester` class to retreive `ETag, Last-Modified` response header values and store in `raw_data`\n   - Modify `Requester` class to enable making conditional request\n   - Add `NotModifiedException` class\n   - Add `CompletableGithubObject.update()` method\n   - Add a few private helper methods to make this work\n2. Add methods for Data Persistence\n   - Add `GithubObject.save(file_fname)` method\n   - Add `GithubObject.load(file_fname)` class method\n## Example\n\nI am working on a project ([git-issue](https://github.com/akfish/git-issue)) to add issue tracking extension to Git. It syncs with GitHub's issue tracker. Local caching and update check is essential for performance and usability. With these modification, workflow like below can be implemented:\n\n``` python\n# Get remote issue list and cache locally when syncing\nfor issue in repo.get_issues():\n    issue.save(local_file_path)\n\n# Offline use/Quick restore previous work state\nfor local_file_path in cache.get_files():\n    cached_issue = issue.load(local_file_path)\n    #do something with it\n\n# And check for update when needed\nif (cached_issue.update()):\n    print \"Issue synced\u201c\n\n```\n\nThis will help avoiding expensive and slow network requests when they are not necessarily required.\n"}}, {"doc": {"_id": 188, "title": "Getting the status of GitHub", "content": "Maybe I haven't found it, but it would be very useful to have methods for checking the status of the GitHub API (https://status.github.com/api)\n"}}, {"doc": {"_id": 187, "title": "Adding since, until parameters to Repository.getCommits()", "content": "Should be self-explanatory. According to [the docs](http://developer.github.com/v3/repos/commits/), the `:repo//commits/` endpoint supports since/until date parameters, but PyGithub doesn't. This adds them.\n"}}, {"doc": {"_id": 186, "title": "Minor enhancements to rate limiting information", "content": "If rate limiting information hasn't been retrieved already, it will be checked (against the `/rate_limit` endpoint) rather than just assuming 5000 requests remaining of 5000.\n\nAdd an additional attribute `rate_limiting_resettime` to reflect github's new `X-RateLimit-Reset` header. This integer value is a unix timestamp. (In order to avoid breaking anyone's code, I added a new attribute rather than adding a third value to the `rate_limiting` tuple.)\n\nRateLimiting unit test updated accordingly. I'm pretty sure I did the right thing in re-recording the replay data, but please double-check this.\n"}}, {"doc": {"_id": 185, "title": "Minor enhancements to rate limiting information", "content": "If rate limiting information hasn't been retrieved already, it will be checked (via the /rate_limit endpoint, so the request won't count against the limit) rather than just assuming 5000 requests remaining of 5000.\n\nAdd an additional attribute `rate_limiting_resettime` to reflect github's new `X-RateLimit-Reset` header. This integer value is a unix timestamp. (In order to avoid breaking anyone's code, I opted for a new attribute rather than a third value in the `rate_limiting` tuple).\n\nRateLimiting unit test updated accordingly. I am pretty confident that I did the right thing in recording the replay data, but please have a look at this to be sure.\n\nAdditional new attributes may be required once the search limit API is finalized.\n"}}, {"doc": {"_id": 184, "title": "Allow reverse pagination", "content": "Introduced a feature to `PaginatedList` to allow iteration in reversed order.\nAs a follow up do the discussion in https://github.com/jacquev6/PyGithub/issues/180\n"}}, {"doc": {"_id": 183, "title": "Question: Is PyGitHub Thread Safe?", "content": "Is PyGitHub thread safe? For example, if I were to use a thread pool to repeatedly make calls a function like get_followers() which is calling http://developer.github.com/v3/users/followers/ under the hood, is there any danger that you know of within 1) PyGitHub itself and 2) with the way that GitHub's API would respond?\n"}}, {"doc": {"_id": 182, "title": "Handle github api response that isn't valid json", "content": "For some reason the Github api started returning a 503 + an html fragment on a the repository comparison call for me today, and the html seems to have tripped up error handling.  Here is the stack trace I saw:\n\n```\nModule github.Repository:327 in compare\n>>  None\nModule github.Requester:95 in requestJsonAndCheck\n>>  return self.__check(*self.requestJson(verb, url, parameters, input))\nModule github.Requester:101 in __check\n>>  output = self.__structuredFromJson(output)\nModule github.Requester:125 in __structuredFromJson\n>>  return json.loads(data)\nModule json:326 in loads\n>>  return _default_decoder.decode(s)\nModule json.decoder:366 in decode\n>>  obj, end = self.raw_decode(s, idx=_w(s, 0).end())\nModule json.decoder:384 in raw_decode          view\n>>  raise ValueError(\"No JSON object could be decoded\")\nValueError: No JSON object could be decoded\n```\n\nThis pull request catches the json parser error and returns the text of the data so that the HTTP code error handle up the stack trace can handle the errror properly.  This is the new stack trace:\n\n```\nModule github.Repository:327 in compare\n>>  None\nModule github.Requester:95 in requestJsonAndCheck\n>>  return self.__check(*self.requestJson(verb, url, parameters, input))\nModule github.Requester:103 in __check\n>>  raise self.__createException(status, output)\nGithubException: 503 {'data': '<html><body><h1>503 Service Unavailable</h1>\\nNo server is available to handle this request.\\n</body></html>\\n'}\n```\n"}}, {"doc": {"_id": 181, "title": "Populates Issue's repository from URL when not in response.", "content": "Issues created from `Repository.get_issue()` have their `repository` field set to None.  This pull request manually sets the Issue's repository using the Issue's URL, when the repository has not already been set.\n\nI've also modified the test in `tests.Issue.Issue.testAttributes` to verify that the repository is correctly set.  The modified test does fail if I remove my changes to the library.\n"}}, {"doc": {"_id": 180, "title": "fetching comments in reverse order", "content": "I want to add a feature of fetching comments from repos in descending order.\nAFAIK the github API doesn't support that for the comments endpoint.\nI implemented it by using the \"last\" url in the links header and going to the \"prev\" page from there.\n\nDo you think this is something you would like to add to PyGithub?\nIf it is, I could submit a pull request for that.\n"}}, {"doc": {"_id": 179, "title": "Automatic rety, empty repo handling and updated arguments for get_commits", "content": "This PR adds:\n1. Automatic retrying on failure of an idempotent request, up to a default of 5 times.\n2. Handling and raising of EmptyRepositoryException which can be emitted by a call to get_commits\n3. Updated arguments for Repository.get_commits, reflecting the url_params for Github API V3\n\nPlease let me know if you have any feedback on style, etc. I will happily address. \n"}}, {"doc": {"_id": 178, "title": "How to get all user's details(login, name, location etc)", "content": "Thanks for providing your library, I really appreciate your good work.\nCurrently I am using your library to fetch user's details. code snippet is as follow.\n    `gh = Github(login_or_token=\"rakeshcusat\", password=pswd, per_page=100)\n    user_pages = gh.get_users().get_page(0)\n    print_page(user_pages)   #This method prints all user details.`\nThis works. it prints 135 user details. But I want to print all user details. I am facing two problems. \n1. I don't know how to get the total number of pages, so I can iteratively pass the page number in get_page() method.\n2. As we know there is rate limit on the API call, I want to know the current remaining limit for API call. API call returns \"X-RateLimit-Remaining\" value in header but I don't know how to access this value. Is there any interface available to access this value?\n"}}, {"doc": {"_id": 177, "title": "New issue URLs: 404", "content": "The URLs of new issues seem to give a 404. The URLs I get are of the following shape:\n\nhttps://api.github.com/repos/[owner]/[repo-name]/issues/[issue-number]\n\nwhen the correct URL should be\n\nhttps://github.com/[owner]/[repo-name]/issues/[issue-number]\n"}}, {"doc": {"_id": 176, "title": "bugfix: using custom per_page in repo.get_comments", "content": "I got an exception when trying to fetch 100 comments per page from a repo.\nBefore this fix I was getting an exception when line 102 set the `per_page` key in `self.__nextParams`.\nThis is because `self.__nextParams` was `None` in this case.\n"}}, {"doc": {"_id": 175, "title": "Publish version 1.17.0", "content": ""}}, {"doc": {"_id": 174, "title": "Support http 302 redirect responses in get_dir_contents", "content": "I'm seeing http 302 responses for the Repo.get_dir_contents function call:\nhttp://jacquev6.github.io/PyGithub/github_objects/Repository.html#github.Repository.Repository.get_dir_contents\n\nI don't know if any of this is releated, but it is a private repo owned by an organization (not a user).  \n\nI had originalized gone to add the redirect handling at a lower level, but after some experimentation this seems to be the only function call that's exhibiting this behavior.\n"}}, {"doc": {"_id": 173, "title": "Get all github users.", "content": "I have seen GitHub API (GET /users) but I haven't seen any corresponding method/function in your library. Can you please tell me whether it is implemented or not? If it is not implemented then how to get all github users?\n"}}, {"doc": {"_id": 172, "title": "can not get access to github API through proxy", "content": "My environment is within in a local network with a http proxy, I wonder whether there is a simple method to get access the github API. Thank you very much for your help in advance\n"}}, {"doc": {"_id": 171, "title": "Replace doc url", "content": "I'm not sure to understand the `v3/todo` url. Should there be example of a url that returns a commit object (like the current comment would suggest) or the url to the github reference page (in which case I'd like to slightly change the sentance).\n\nIMO, the second solution is better.\n\nI'll update this PR depending on your answer.\n\nPS: thx for this nice library.\n"}}, {"doc": {"_id": 170, "title": "Add html_url attribute to comments.", "content": "html_url attributes were missing from IssueComment and PullRequestComment.\nAdded to both as per the GitHub API.\n\nI made an attempt to add some tests, but I couldn't get the replay data recorded correctly.\n\nErrors I received were:\na) Issues are disabled for this repo.\nb) Not found.\n\nMy apologies.\n"}}, {"doc": {"_id": 169, "title": "No SSL certificate validation", "content": "PyGithub does not default to validating SSL certificates, as evidenced by a simple proxy I created (with an invalid certificate):\n\n```\n>>> import github\n>>> g = github.Github(base_url=\"https://api.github.com.geofft.scripts.mit.edu\")\n>>> g.get_user(\"geofft\").name\nu'Geoffrey Thomas'\n```\n\nPyGithub currently uses httplib (http.client in Python 3), which doesn't support certificate validation on either Python 2 or 3. There are a couple of options:\n- Incorporate one of the snippets running around the web (e.g. [http://code.activestate.com/recipes/577548-https-httplib-client-connection-with-certificate-v/](this one from ActiveState); see also [http://stackoverflow.com/questions/3280603/adding-server-certificate-validation-to-httplib-httpsconnection](this StackOverflow discussion).\n- Switch to [http://docs.python-requests.org/en/latest/](Requests), and add a dependency on it and urllib3.\n- Switch to [https://pypi.python.org/pypi/urllib3](urllib3), on which Requests is based, and add a dependency upon it.\n- Switch to [http://code.google.com/p/httplib2/](httplib2), and add a dependency on it.\n- Switch to [http://pycurl.sourceforge.net/](PyCurl), and add a dependency on it.\n\nSome of these (especially Requests) are significantly higher-level than the current httplib approach, so they'd be a fair amount of change. I think httplib2 would probably be the smallest change of them all, and lots of people are likely to have it due to having Requests installed.\n\nThe first approach would avoid an external dependency when on Python 2.6 and up, but there's no `ssl` module in older versions of Python, so it'd bring in a dependency on M2Crypto, if those versions are still worth supporting.\n\nDo you have opinions on which route you prefer? I'm happy to implement any of them and send in a pull request.\n"}}, {"doc": {"_id": 168, "title": "Bug in user.create_key function 404 message Not FOUND", "content": "PyGithub version is 1.14.2\nIn our python module we are using this:\n\ngh = github.Github(cls._token)\ntry:\n      result = ClHelper.run_command(\"git remote show origin\")\n      has_remote = True\nexcept exceptions.ClException as e:\n       pass\n\nuser = gh.get_user()\nif not has_push:\n            # create ssh keys here\n            rsa_key = \"{0}/.ssh/dev_assistant_rsa\".format(os.path.expanduser('~'))\n            if os.path.isfile(\"{0}.pub\".format(rsa_key)) == False:\n                ClHelper.run_command(\"ssh-keygen -t rsa -f {0} -N \\\"\\\" -C \\\"Developer Assistant\\\"\".format(rsa_key), True, True)\n            public_content = ClHelper.run_command(\"cat {0}.pub\".format(rsa_key))\n        if not has_remote:\n            try:\n                ClHelper.run_command(\"git remote add origin https://github.com/{0}/{1}\".format(username, reponame), True, True)\n            except exceptions.ClException as e:\n                pass # TODO: what exactly happens here?\n        try:\n            user.create_key(\"DeveloperAssistant\",public_content)\n            ClHelper.run_command(\"git push -u origin master\", True, True)\nBut it failed with this:\n File \"/home/phracek/work/devassistant/devassistant/assistants/commands.py\", line 194, in _github_push\n    user.create_key(\"DeveloperAssistant\",public_content)\n  File \"/usr/lib/python2.7/site-packages/github/AuthenticatedUser.py\", line 399, in create_key\n    post_parameters\n  File \"/usr/lib/python2.7/site-packages/github/Requester.py\", line 95, in requestJsonAndCheck\n    return self.__check(*self.requestJson(verb, url, parameters, input))\n  File \"/usr/lib/python2.7/site-packages/github/Requester.py\", line 103, in __check\n    raise self.__createException(status, output)\ngithub.GithubException.UnknownObjectException: 404 {u'message': u'Not Found'}\n\nOr is there something wrong in our code?\n"}}, {"doc": {"_id": 167, "title": "Updates api reference url in docstrings for repository keys", "content": ""}}, {"doc": {"_id": 166, "title": "Complete listing of issues", "content": "The three APIs described in http://developer.github.com/v3/issues/#list-issues are not fully covered in PyGithub.\n\nThis was reported by mail by Daehyok Shin\n"}}, {"doc": {"_id": 165, "title": "Download error", "content": "```\n# easy_install-3.3 -U PyGithub\nSearching for PyGithub\nReading http://pypi.python.org/simple/PyGithub/\nReading http://vincent-jacques.net/PyGithub\nDownload error on http://vincent-jacques.net/PyGithub: timed out -- Some packages may not be found!\n```\n"}}, {"doc": {"_id": 164, "title": "Implement __len__ for PaginatedListBase", "content": "Not sure if I'm missing something, but it might be nice to get the length of a Paginated List. Sorry if I'm not seeing how this is already implemented.\n"}}, {"doc": {"_id": 163, "title": "Looking to help out", "content": "Hey my friend introduced me to your project and we have already started to use it in our small projects.I am looking to help out. Is there anything that i can do to help out in your project. If there is anything that I can help you with, please let me know. Thank you\n"}}, {"doc": {"_id": 162, "title": "Publish version 1.14.2", "content": ""}}, {"doc": {"_id": 161, "title": "Add default user agent", "content": "Github appears to have just started enforcing the requirement for a user-agent.\nhttp://developer.github.com/v3/#user-agent-required\n\nso calls now fail without a user-agent (including the tests in PyGithub which make calls to github API)\n\nI've changed github object to have a default user-agent of 'PyGithub/Python'. However, this makes a bunch of tests fail (since they detect an extra header).\n\nPlease let me know if you agree with this change and I'll fix all the failing tests.\n"}}, {"doc": {"_id": 160, "title": "Error message: Missing or invalid User Agent string. See http://developer.github.com/v3/#user-agent-required'", "content": "Several of my PyGithub scripts that were working flawlessly before are now throwing this exception.     Is there a new authentication requirement that the Github API is newly imposing that PyGithub isn't supplying?\n\nThe error message suggests checking this page: http://developer.github.com/v3/#user-agent-required\n\nThe \"g\" object in the traceback below was obtained by supplying a valid username and password---and that username/password has full admin access to the organization in question.   (The script was working flawlessly until today.)\n\n  File \"./updateForLab.py\", line 65, in <module>\n    org= g.get_organization(\"UCSB-CS56-S13\")\n  File \"./PyGithub/github/Github.py\", line 111, in get_organization\n    None\n  File \"./PyGithub/github/Requester.py\", line 84, in requestJsonAndCheck\n    return self.__check(*self.requestJson(verb, url, parameters, input))\n  File \"./PyGithub/github/Requester.py\", line 92, in __check\n    raise GithubException.GithubException(status, output)\ngithub.GithubException.GithubException: 403 {u'message': u'Missing or invalid User Agent string. See http://developer.github.com/v3/#user-agent-required'}\n"}}, {"doc": {"_id": 159, "title": "Publish version 1.14.1", "content": ""}}, {"doc": {"_id": 158, "title": "Duplicate parameters in URL", "content": "I must confess I don't understand the internals all that well, but I seem to be getting malformed requests when using oauth authentication. There is already client_secret and client_id in the URL that is passed into this function and it is passed as part of parameters dictionary too. The add parameters method adds them again. Surely this isn't correct? I'm not able to isolate this but it seems to come from the while loop in PaginatedList, but my debugger doesn't go further than this.\n\nhttps://github.com/jacquev6/PyGithub/blob/master/github/Requester.py#L149\n"}}, {"doc": {"_id": 157, "title": "Publish version 1.15.0", "content": ""}}, {"doc": {"_id": 156, "title": "renaming files in a gist", "content": "looking at the InputFileContent class, it doesn't appear to support renaming a file in a gist. am i mistaken?\n"}}, {"doc": {"_id": 155, "title": "Publish version 1.14.0", "content": ""}}, {"doc": {"_id": 154, "title": "Check that all `# pragma no cover` are legitimate", "content": "Following #153, let's check that the \"100% test coverage\" feeling is appropriate.\n"}}, {"doc": {"_id": 153, "title": "Error \"500 None\" in python3", "content": "Hi, \nIm using PyGithub (1.13.0, installed with pip and pip-3.2) on Ubuntu 12.04 with python version 2.7.3 (there it works just fine) an version  3.2.3 where i get some issues\n\nI posted the testcase and the testouput for the run with python3 here:  https://gist.github.com/8efb393ddaefc614f225\n\nFYI: I ran the testsuite too(`python3 -m github.tests`). The result was  \n\n```\nRan 319 tests in 1.630s\n\nOK\n```\n\nCheers,\nSebastian\n"}}, {"doc": {"_id": 152, "title": "How to work with the GithubException object", "content": "I have a question about how to work with the GithubException object\n\nSample Code:\n     try:\n        team = org.create_team(teamName,\n                         [],\n                         \"push\");\n     except GithubException as e:\n         print (e)\n\nWhen I print (e) I get:\n\n```\n 422 {u'message': u'Validation Failed', u'errors': [{u'field': u'name', u'code': u'already_exists', u'resource': u'Team'}]}\n```\n\nWhat I'd like to be able to do is see the list of attributes and member functions of  the GithubException object so that I can pull out various stuff to check for particular events... but I can'f find this in the documentation for the PyGithub API.    Maybe I just need to understand better the relationship between the PyGithub API and the underlying github RESTful API.\n\nFrom the source, it appears that there are two properties of the GithubException object:\n\nhttps://github.com/jacquev6/PyGithub/blob/master/github/GithubException.py\n\n```\nstatus\ndata\n```\n\nand putting that together with the output, it appears the 422 is the status (perhaps returned by the API?), and the data is a dictionary object (perhaps an encoding of the JSON that got returned?)  but these are only guesses.    \n\nIt appears that the only place GithubException occurs in the source is in Requester.py---and this tends to confirm my guesses.\n\nIs there somewhere in the documentation for the github API itself where one can find the keys that one would expect to find in the JSON object, i.e. in this case \"message\", \"errors\", and then within \"errors\", \"field\", \"code\", \"and \"resource\"?   \n\nFrom trial and error guesswork, I settled on code like this, but this feels \"hacky---I'd be more comfortable if I knew whether I was doing this right...\n\n```\nteam = False   # Sentinel to see if it succeeded or failed\ntry:\n   team = org.create_team(teamName,\n                     [],\n                     \"push\");\n   print(\" team {0} created...\".format(teamName),end='')\nexcept GithubException as e:\n   if (e.data['errors'][0]['code']=='already_exists'):\n      print(\" team {0} already exists...\".format(teamName),end='') \n   else:\n      print (e)\n\nif (team != False):\n   # do something with team...\n```\n\nAm I on the right track?\n"}}, {"doc": {"_id": 151, "title": "Recently random 401 Bad Credentials exceptions", "content": "Hi,\n\nPyGithub is a part of https://github.com/Borkason/google-code-issues-migrator, which is a fork by itself from an abandoned project, and recently I get random 401 Bad Credentials exceptions with that script. This exception did not show up in the past, that's why I think it might have to do with how PyGithub handles the Credentials. Maybe Github changed something in the past 1 or 2 months?\n\nI could not find any pattern in the appearance of the exceptions, yet. I think it's random.\n\n**This is what I do**\nI authenticate once in `__main__`: https://github.com/Borkason/google-code-issues-migrator/blob/master/migrateissues.py#L493.\nThen I start migrating all the issues. The script fetches all issues, does some things with the google code api and then creates new issues in github, including comments. Mostly during the issue creation I recieve the exceptions. Always at a random point (sometimes after adding 2 issues, sometimes after adding 100 issues ...\n\n_I hope you can help in any way._\n\n**This is the exception**\n\n```\nTraceback (most recent call last):\n  File \"migrateissues.py\", line 529, in <module>\n    process_gcode_issues(existing_issues)\n  File \"migrateissues.py\", line 332, in process_gcode_issues\n    add_comments_to_issue(github_issue, gid)\n  File \"migrateissues.py\", line 236, in add_comments_to_issue\n    existing_comments = [ comment.body for comment in github_issue.get_comments() ]\n  File \"/usr/local/lib/python2.7/dist-packages/PyGithub-1.12.2-py2.7.egg/github/PaginatedList.py\", line 35, in __iter__\n    newElements = self.__grow()\n  File \"/usr/local/lib/python2.7/dist-packages/PyGithub-1.12.2-py2.7.egg/github/PaginatedList.py\", line 47, in __grow\n    newElements = self._fetchNextPage()\n  File \"/usr/local/lib/python2.7/dist-packages/PyGithub-1.12.2-py2.7.egg/github/PaginatedList.py\", line 104, in _fetchNextPage\n    headers, data = self.__requester.requestJsonAndCheck(\"GET\", self.__nextUrl, self.__nextParams, None)\n  File \"/usr/local/lib/python2.7/dist-packages/PyGithub-1.12.2-py2.7.egg/github/Requester.py\", line 84, in requestJsonAndCheck\n    return self.__check(*self.requestJson(verb, url, parameters, input))\n  File \"/usr/local/lib/python2.7/dist-packages/PyGithub-1.12.2-py2.7.egg/github/Requester.py\", line 92, in __check\n    raise GithubException.GithubException(status, output)\ngithub.GithubException.GithubException: 401 {u'message': u'Bad credentials'}\n```\n"}}, {"doc": {"_id": 150, "title": "Error when trying to iterate past a certain event", "content": "Hello,\n\nI have written a python script to get the entire history of events/issues/commits from a repository.\n\nIn this instance its this repository hadley/ggplot2\nBut when I try to get the event after this specific event \n\n\"1660615977 2013-01-23 21:15:50 Aaron Wolen ForkEvent\" \n\nI get all gibberish like this \n\n\"1660498980 2013-01-23 18:29:13 1660498980 2013-01-23 18:29:13 1660498980 2013-01-23 18:29:13 1660498980 2013-01-23 18:29:13 1660498980 2013-01-23 18:29:13 1660498980 2013-01-23 18:29:13 1660498980 2013-01-23 18:29:13 1660498980 2013-01-23 18:29:13 1660498980 2013-01-23 18:29:13 1660498980 2013-01-23 18:29:13 1660498980 2013-01-23 18:29:13 1660498980 2013-01-23 18:29:13 1660498980 2013-01-23 18:29:13 1660498980 2013-01-23 18:29:13 1660498980 2013-01-23 18:29:13 1660498980 2013-01-23 18:29:13 1660498980 2013-01-23 18:29:13 16604989\"\n\nI'm accessing the event like this:\n\nusing an i counter to increment\nprintEvents(events[i:i+1])      \n\nprintEvents does this:  \ndef printEvents(pageOfEvents):\n\n```\ni=0\n\nfor e in pageOfEvents:\n    print e.id, e.created_at, e.actor.name, e.type\n    i=i+1\n\nif (i == 0):\n    raise IndexError(\"Index out of range\")\nreturn\n```\n\nAny idea why this is happening? It works fine before and after that one event.... Thanks.\n"}}, {"doc": {"_id": 149, "title": "Test failures with python3", "content": "Hi,\nI'm experiencing dozens of failures with Python 3. Is this expected or is something wrong on my side? It seems that some of the failures are connected with random order of dict items in str(headers) in ReplayingConnection.request, but there are also other.\n"}}, {"doc": {"_id": 148, "title": "Notification API", "content": "implementation of Notification API #108\n"}}, {"doc": {"_id": 147, "title": "this fixes #108", "content": ""}}, {"doc": {"_id": 146, "title": "Publish version 1.13.0", "content": ""}}, {"doc": {"_id": 145, "title": "Configure default requests with per_page=100", "content": "Per http://developer.github.com/v3/#pagination, the max items that can possibly be requested is 100 as opposed to the default of 30. From what I can tell, the default is used in all requests and there's no way to override it without modifying the source. Hence, about 1/3 of the available data is being returned on lots of requests\n\nIs there a reason not to go ahead and add a default per_page=100 to all API requests? Best case, it results in faster access to data, and worst case, it has no effect. For my particular uses, I'm making lots of requests, and a speedup of ~3.3x would be a big help.\n\nThoughts?\n"}}, {"doc": {"_id": 144, "title": "Store original JSON response for objects and expose it for document-oriented storage", "content": "I'd like to be able to serialize a GithubObject and get back the original JSON that was used to initially construct it for purposes of serializing out to a document oriented store like MongoDB where this representation would be a natural (and highly portable) fit for storage. From looking at how objects are constructed, it seems as though it would be pretty trivial to keep around the JSON and expose it as necessary as opposed to just discarding it.\n\nPerhaps `__str__` could return the readable JSON representation and `__repr__` could contain what currently happens from `__str__` (the unambiguous object with its address)?\n\nIf there are concerns over memory, perhaps this could be a configurable option?\n\nAt any rate, I could help put together the patch but would first like to get your thoughts and whether or not you're open to merging in such a pull request\n"}}, {"doc": {"_id": 143, "title": "Version 1.12.2 does not work with Python 3(.3) because of 2to3 issues", "content": "In trying to pip install PyGithub with Python 3.3 just now, I see the following in the console:\n\nDownloading/unpacking PyGithub\n  Downloading PyGithub-1.12.2.tar.gz (1.6MB): 1.6MB downloaded\n  Running setup.py egg_info for package PyGithub\n\nInstalling collected packages: PyGithub\n  Running setup.py install for PyGithub\n    Fixing build/lib/github/**init**.py build/lib/github/AuthenticatedUser.py \n\n...\n\n```\n  File \"/Users/matthew/virtual-environments/mtsw2e/lib/python3.3/site-packages/github/AuthenticatedUser.py\", line 16\n    from . import github.GithubObject\n                        ^\nSyntaxError: invalid syntax\n\n.... more of the same errors ...\n```\n\nIn looking at the source on GitHub for this version (such as https://github.com/jacquev6/PyGithub/blob/v1.12.2/github/UserKey.py), it appears that you are just doing straight imports as \"import github.X\" which is causing 2to3 to produce invalid imports when it rewrites.\n"}}, {"doc": {"_id": 142, "title": "Bug with Python 3?", "content": "Hi! \nI'm currently in the process of switching a program to python 3.2. I encounter the following problem: `TypeError: can't use a string pattern on a bytes-like object`\n\n```\nimport github\ngh_instance = github.Github('<my-token>')\nuser = gh_instance.get_user()\nuser.name\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n<ipython-input-4-ec5376e00d61> in <module>()\n----> 1 user.name\n\n/usr/local/lib/python3.2/dist-packages/github/AuthenticatedUser.py in name(self)\n    166         :type: string\n    167         \"\"\"\n--> 168         self._completeIfNotSet(self._name)\n    169         return self._NoneIfNotSet(self._name)\n    170 \n\n/usr/local/lib/python3.2/dist-packages/github/GithubObject.py in _completeIfNotSet(self, value)\n     61     def _completeIfNotSet(self, value):\n     62         if not self.__completed and value is NotSet:\n---> 63             self.__complete()\n     64 \n     65     def __complete(self):\n\n/usr/local/lib/python3.2/dist-packages/github/GithubObject.py in __complete(self)\n     68             self._url,\n     69             None,\n---> 70             None\n     71         )\n     72         self._useAttributes(data)\n\n/usr/local/lib/python3.2/dist-packages/github/Requester.py in requestJsonAndCheck(self, verb, url, parameters, input)\n     77 \n     78     def requestJsonAndCheck(self, verb, url, parameters, input):\n---> 79         return self.__check(*self.requestJson(verb, url, parameters, input))\n     80 \n     81     def requestMultipartAndCheck(self, verb, url, parameters, input):\n\n/usr/local/lib/python3.2/dist-packages/github/Requester.py in __check(self, status, responseHeaders, output)\n     83 \n     84     def __check(self, status, responseHeaders, output):\n---> 85         output = self.__structuredFromJson(output)\n     86         if status >= 400:\n     87             raise GithubException.GithubException(status, output)\n\n/usr/local/lib/python3.2/dist-packages/github/Requester.py in __structuredFromJson(self, data)\n     92             return None\n     93         else:\n---> 94             return json.loads(data)\n     95 \n     96     def requestJson(self, verb, url, parameters, input):\n\n/usr/lib/python3.2/json/__init__.py in loads(s, encoding, cls, object_hook, parse_float, parse_int, parse_constant, object_pairs_hook, **kw)\n    307             parse_int is None and parse_float is None and\n    308             parse_constant is None and object_pairs_hook is None and not kw):\n--> 309         return _default_decoder.decode(s)\n    310     if cls is None:\n    311         cls = JSONDecoder\n\n/usr/lib/python3.2/json/decoder.py in decode(self, s, _w)\n    351 \n    352         \"\"\"\n--> 353         obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n    354         end = _w(s, end).end()\n    355         if end != len(s):\n\nTypeError: can't use a string pattern on a bytes-like object\n```\n\nIt's `PyGithub-1.12.1` installed via `pip-3.2` and python `'3.2.3 (default, Oct 19 2012, 19:53:57) \\n[GCC 4.7.2]'`\n"}}, {"doc": {"_id": 141, "title": "Publish version 1.12.0", "content": ""}}, {"doc": {"_id": 140, "title": "Repository.get_contents does not return directory information", "content": "The GitHub API returns a list of all files in a directory when you use Get Contents on a directory.\n\nexample:\nhttps://api.github.com/repos/twitter/bootstrap/contents/js/?ref=d28343dc3ad53a411ae3685e7d6a7866c8c22d6b\n\nCurrently PyGithub only returns None when using this API to query a directory.\n"}}, {"doc": {"_id": 139, "title": "Typo in GithubObject \"self._completed\" -> \"self.__completed\"?", "content": "I noticed that calls to a user object (e.g. user.email, user.location etc) caused multiple calls to GitHub. Looking at GithubObject.py I see several references to __completed and one to _completed (single underscore) on line 72. Changing line 72 to use a double underscore removed the repeated calls to Github.\n\nI tried to run your tests but can't figure out how to do so? I'd have left you a pull request if so. I tried \"python -m unittest discover\" and also just running the files, I'm not familiar with the format you've used. I'm happy to run with logs etc if that's useful (some guidance on how to run the tests would be super helpful too). Thanks, Ian.\n"}}, {"doc": {"_id": 138, "title": "Restore *.md and tests/ReplayData/*.txt files in source distribution", "content": ""}}, {"doc": {"_id": 137, "title": "Publish version 1.11.1", "content": ""}}, {"doc": {"_id": 136, "title": "Dynamically create a NamedUser or Organization where needed", "content": "For example, PullRequest.head.user can be an Organization (see tests reproducing #131)\n"}}, {"doc": {"_id": 135, "title": "get_repo modification to allow access to repository objects not owned by logged in user", "content": "Very simple patch that allows me to get a repo object for a repository that is not owned by the logged in user. This is very useful for creating a new issue in that repo.\n\nTested using oauth and username and password. Both methods work.\n"}}, {"doc": {"_id": 134, "title": "Can't verify authorizations of token-authorized user", "content": "Hi!\nI think I've found a bug. I successfully created an API authorization with some scopes. In the program I want to use this autorization in, I'm trying to verify the correct scopes before proceeding, but this does not work as expected. From iPython:\n\n``` python\nfrom github import Github\nuser = Github(some_token).get_user()\nauths=user.get_authorizations()\nauths\nOut[5]: <github.PaginatedList.PaginatedList instance at 0xad31bac>\nfor a in auths:\n    print a.note\n---------------------------------------------------------------------------\nGithubException                           Traceback (most recent call last)\n<ipython-input-6-b49dc83bedec> in <module>()\n----> 1 for a in auths:\n      2     print a.note\n\n/usr/local/lib/python2.7/dist-packages/github/PaginatedList.pyc in __iter__(self)\n     33             yield element\n     34         while self._couldGrow():\n---> 35             newElements = self.__grow()\n     36             for element in newElements:\n     37                 yield element\n\n/usr/local/lib/python2.7/dist-packages/github/PaginatedList.pyc in __grow(self)\n     45 \n     46     def __grow(self):\n---> 47         newElements = self._fetchNextPage()\n     48         self.__elements += newElements\n     49         return newElements\n\n/usr/local/lib/python2.7/dist-packages/github/PaginatedList.pyc in _fetchNextPage(self)\n     83 \n     84     def _fetchNextPage(self):\n---> 85         headers, data = self.__requester.requestAndCheck(\"GET\", self.__nextUrl, self.__nextParams, None)\n     86 \n     87         links = self.__parseLinkHeader(headers)\n\n/usr/local/lib/python2.7/dist-packages/github/Requester.pyc in requestAndCheck(self, verb, url, parameters, input)\n     78         output = self.__structuredFromJson(output)\n     79         if status >= 400:\n---> 80             raise GithubException.GithubException(status, output)\n     81         return headers, output\n     82 \n\nGithubException: 404 {u'message': u'Not Found'}\n```\n\nis this a bug or am I doing something wrong/impossible. \n\nbtw, when creating a github instance with an authorization token, this does not error out when the token is invalid, i.e. I can say `Github(\"mySillyString\")` without error message - is this by design?\n"}}, {"doc": {"_id": 133, "title": "Fix failing get_page function", "content": "- if firstParams was None, PaginatedList was calling dict(None)\n  which fails with a TypeError. If firstParams is None, just use\n  an empty tuple, which dict() handles properly\n"}}, {"doc": {"_id": 132, "title": "Unable to create issue using oAuth token ", "content": "Hi,\n\nI am trying to create an issue using library. But always get GithubException: 404 {u'message': u'Not Found'} error message . Please help\n\nmy code looks as fellow. let me know if i am doing something wrong\n\nrepo_service = Github('Token')\nrepo_service.get_repo('Repo Name').create_issue('test', 'TestSam', assignee=None, milestone=None, labels = None)\n"}}, {"doc": {"_id": 131, "title": "Fix PullRequestPart when using get_pulls() and the head user is an Organization", "content": "Error can be reproduced with the following example:\n\n```\nimport github\nrepo = github.Github().get_user(\"openmicroscopy\").get_repo(\"ome-documentation\")\n\nassert repo.get_pull(204).head.user.login == 'imcf'\n\nfor pr in list(repo.get_pulls('closed')):\n    if pr.number == 204:\n        assert pr.head.user is None\n```\n\n/cc @joshmoore\n"}}, {"doc": {"_id": 130, "title": "Get a user's public ssh keys", "content": "See end of http://developer.github.com/changes/2013-01-08-new-user-scopes/\n"}}, {"doc": {"_id": 129, "title": "Add Suppport For the GitHub Hooks PubSubHub", "content": "Add Suppport For the [GitHub Hooks PubSubHub](http://developer.github.com/v3/repos/hooks/#pubsubhubbub)\n"}}, {"doc": {"_id": 128, "title": "PyGithub on Notifico", "content": "Heyo,\n\npygithub is used by Notifico for its \"Import/Sync From Github\" functionality. \n\nRepo -> https://github.com/TkTech/notifico\nSite -> http://n.tkte.ch\n"}}, {"doc": {"_id": 127, "title": "Publish version 1.11.0", "content": ""}}, {"doc": {"_id": 126, "title": "Get all Issue or Pull comments", "content": "http://developer.github.com/changes/2012-12-04-List-comments-for-repo/\nhttp://developer.github.com/v3/issues/comments/#list-comments-in-a-repository\nhttp://developer.github.com/v3/pulls/comments/#list-comments-in-a-repository\n"}}, {"doc": {"_id": 125, "title": "Complete `AuthenticatedUser.create_authorization`", "content": "See http://developer.github.com/changes/2012-12-06-create-authorization-for-app/ and http://developer.github.com/v3/oauth/#create-a-new-authorization\n\nAdd `client_id` and `client_secret` parameters to `AuthenticatedUser.create_authorization`.\n"}}, {"doc": {"_id": 124, "title": "Fixed Issue #123: Repository.get_contents does not accept ref=branch", "content": "Tested and validated. This change does not break API compatibility.\n"}}, {"doc": {"_id": 123, "title": "Repository.get_contents does not accept ref=branch", "content": "As per the documentation:\nhttp://developer.github.com/v3/repos/contents/\n\nThe Get Contents GitHub API accepts an optional parameter `ref` which allows the user to specify the branch. Otherwise this parameter defaults to `master`.\n\nPlease implement this optional parameter on Repository.get_contents, which currently only accepts a single parameter to specify the path.\n"}}, {"doc": {"_id": 122, "title": "push/pull timeout or ssh user/pass dialog detect", "content": "remote.push(repo.head.reference) is freezing then git push ask user&pass\n\ngist.github.com is now 204.232.175.94 (old ip is  207.97.227.243).\nadd ssh connection check to prevent this bug in future:\n\nfrom envoy import run\nassert run(\"ssh -T git@gist.github.com\").status_code==1 # ok\n"}}, {"doc": {"_id": 121, "title": "Update AuthenticatedUser.get_repo to accept a full repo path", "content": "### Why?\n- For projects I dont own, but I am a collaborator, or for directly accessing organisation repos without needing to traverse user.get_orgs.\n### Example\n\n``` python\nuser.get_repo(\"my_repo\") # existing behaviour still works\nuser.get_repo(\"my_org/repo\") # this is now possible\n```\n\nThanks,\nLuke Cawood\n"}}, {"doc": {"_id": 120, "title": "Implement retrieval of gitignore templates", "content": "http://developer.github.com/v3/gitignore/\n"}}, {"doc": {"_id": 119, "title": "gists new api", "content": "https://github.com/blog/1276-welcome-to-a-new-gist . git:// not work, new urls is https://\n"}}, {"doc": {"_id": 118, "title": "Modify setup.py to allow .egg distribution of PyGithub", "content": "In setup.py change:\n\n`from distutils.core import setup, Command`\n\nto:\n\n`from setuptools import setup, Command, find_packages`\n\nThus users can also distribute or use PyGithub in as an .egg via this command:\n\n`python setup.py bdist_egg`\n\nAFAIK this will not impact the remainder of the existing use of setup.py?\n"}}, {"doc": {"_id": 117, "title": "Publish version 1.9.1", "content": ""}}, {"doc": {"_id": 116, "title": "Assertion failure on big numbers", "content": "(Issue reported by private mail)\n\nIn some Github Enterprise install, there can be a plan with 999999999999 private repositories. This doesn't fit in an int, but in a long. The assertion `isinstance(attributes[\"private_repos\"], int)` on https://github.com/jacquev6/PyGithub/blob/master/github/Plan.py#L50 fails.\n\nI will replace all occurrences of `isinstance(xxx, int)` by `isinstance(x, (int, long))`.\n"}}, {"doc": {"_id": 115, "title": "Publish version 1.10.0", "content": ""}}, {"doc": {"_id": 114, "title": "typo in ReadMe.md", "content": ""}}, {"doc": {"_id": 113, "title": "Change the gist comment URIs", "content": "http://developer.github.com/changes/2012-10-31-gist-comment-uris/\n"}}, {"doc": {"_id": 112, "title": "Allow for using OAuth id and secret to increase rate limit", "content": "API Doc section for the change\nhttp://developer.github.com/v3/#rate-limiting\n"}}, {"doc": {"_id": 111, "title": "Add 'assignee' attribute to PullRequest", "content": "It seems as though this may have been added to\nthe github API and was not being included in the\nPullRequest object.\n\nI stumbled upon this when attempting to get the current\nassignee of a pull request while playing with the API,\nand noticed I could not get it via PyGithub. I need this\nfor a project I'm working on.\n\nThis verifies that the attribute's existence in github's API:\n`curl -i \"https://api.github.com/repos/jacquev6/PyGithub/pulls/31\" | grep assignee`\nOutput:\n`\"assignee\": null,`\n\nI was also going to update the tests to include the attribute,\nbut I wasn't able to set the assignee on the test data.\n"}}, {"doc": {"_id": 110, "title": "Add encoding comment to source files", "content": "This is a minor thing.  It\u2019s a convention, not a rule (obviously)\u2014but it\u2019s also a best practice.\n\nMany text editors look for this kind of comment as the first line\u2014or second line, if there is a shebang (the `#!/usr/bin/env python`, or whatever else)\u2014and make use of this to determine the file\u2019s encoding.\n"}}, {"doc": {"_id": 109, "title": "Send a customizable User-Agent header", "content": "See http://developer.github.com/changes/2012-10-14-rate-limit-changes/ It will soon be requested.\n"}}, {"doc": {"_id": 108, "title": "Finish implementation of the notifications API", "content": "See http://developer.github.com/changes/2012-10-26-notifications-api/\n"}}, {"doc": {"_id": 107, "title": "Set the default branch of a repository", "content": "See http://developer.github.com/changes/2012-10-24-set-default-branch/\n"}}, {"doc": {"_id": 106, "title": "Implement auto-init of repositories", "content": "See http://developer.github.com/changes/2012-9-28-auto-init-for-repositories/\n"}}, {"doc": {"_id": 105, "title": "Publish version 1.9.0", "content": ""}}, {"doc": {"_id": 104, "title": "Add optional revert of #102", "content": "#102 is a breaking change in the behavior, so it would be nice to provide a simple mechanism to restore the old behavior in a program that need it.\n\nMaybe an attribute of the Github class.\n"}}, {"doc": {"_id": 103, "title": "Publish version 1.8.1", "content": ""}}, {"doc": {"_id": 102, "title": "get_git_ref does not prepend 'refs'", "content": "The docs say get_git_refs performs `/repos/:user/:repo/git/refs/:ref`, but actually performs `/repos/:user/:repo/git/:ref`. For example:\n\n```\n>>> github.Github().get_user(\"jacquev6\").get_repo(\"PyGithub\").get_git_ref('heads/master')\n# => 404, but should work\n>>> github.Github().get_user(\"jacquev6\").get_repo(\"PyGithub\").get_git_ref('refs/heads/master')\n# => works, but should 404\n```\n\n`refs/` is prepended to a provided reference in the Github api: http://developer.github.com/v3/git/refs/#get-a-reference.\n"}}, {"doc": {"_id": 101, "title": "Work around Github API problem with percent signs", "content": "It looks like many functions that accept string parameters, like Repository.create_issue, fail with a 500 error if the string contains a percent sign.\n\nAccording to [this discussion](https://github.com/github/github-flavored-markdown/issues/63) it's the result of a limitation in Github's API, and patching Requester.py to add a Content-Type header, as suggested, does indeed solve the problem.\n\nI don't know whether this might have unexpected side-effects, though.\n"}}, {"doc": {"_id": 100, "title": "Fix failures due to % in markup. ", "content": "See https://github.com/github/github-flavored-markdown/issues/63\n\nPrevents error 500 when creating issues with \"%\" in a code block.\n"}}, {"doc": {"_id": 99, "title": "Issue with percent % in title created by PyGithub", "content": ""}}, {"doc": {"_id": 98, "title": "Issue created by PyGithub", "content": "Percent % in body\n"}}, {"doc": {"_id": 97, "title": "Issue with escaped percent %25 in title created by PyGithub", "content": ""}}, {"doc": {"_id": 96, "title": "Issue created by PyGithub", "content": "Escaped percent %25 in body\n"}}, {"doc": {"_id": 95, "title": ".get_branches() does not honor base_url as defined ", "content": "Using .get_branches() returns at https:// URL with an enterprise github server instead of honoring base http as defined with base_url)\n\nExample:\n\n``` python\nimport github as Github\n ghe = Github(base_url = \"http://github.companyx.net/api/v3\")\n        org = ghe.get_organization('ExampleOrg')\n        repos = org.get_repos()\n        for repo in repos:\n            print repo.name\n            print \"   \", repo.description\n            for branch in repo.get_branches():\n                if branch.name == 'stable':\n                    print \"   Branch Name: \", branch.name\n                    print type(branch)\n                    pprint (vars(branch))\n                    print branch.commit.sha\n                    print branch.commit.url\n                    break\n            else:\n                print \"    No Stable Branch Found - Not an install/update candidate\"\n```\n\nExample output below:\n\n``` console\nhello_world\n    Hello World - Example developer plugin template for Test\n   Branch Name:  stable\n<class 'github.Branch.Branch'>\n{'_commit': <github.Commit.Commit object at 0x1019b51d0>,\n '_name': u'stable',\n '_requester': <github.Requester.Requester instance at 0x10198bea8>}\n84a8a1cd2e05925d545714a53a9a3d114a155b92\nhttps://github.companyx.net/api/v3/repos/ExampleOrg/hello_world/commits/84a8a1cd2e05925d545714a53a9a3d114a155b92'\n```\n\nNotice that value returned by branch.commit.url as a https URL but should honor based on http:// as defined above at ghe = Github(base_url = \"http://github.companyx.net/api/v3\")\n\nThis likely will break several things that are child / dependent upon this. \n\nVersion found in [Version 1.7]\n"}}, {"doc": {"_id": 94, "title": "Add a CONTRIBUTING.md file", "content": "Cf https://github.com/blog/1184-contributing-guidelines\n"}}, {"doc": {"_id": 93, "title": "Support Python 3", "content": ""}}, {"doc": {"_id": 92, "title": "Issue with escaped percent %25 in title created by PyGithub", "content": ""}}, {"doc": {"_id": 91, "title": "Issue created by PyGithub", "content": "Escaped percent %25 in body\n"}}, {"doc": {"_id": 90, "title": "Installation problem", "content": "Hello, I am trying to use PyGithub but have been unable to. I got an error upon import:\n\n``` python\nPython 3.2.2 (default, Sep  4 2011, 09:07:29) [MSC v.1500 64 bit (AMD64)] on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>>\n>>> from github import Github\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"C:\\Program Files\\Python\\3.2.2\\lib\\site-packages\\github\\__init__.py\", line 14, in <module>\n    from Github import Github\nImportError: No module named Github\n```\n\nI've just installed with `pip` and this one should work fine as I've been able to install other packages successfully. Why it does not work escape me though. There is a _Github.py_ file in the installation path (C:\\Program Files\\Python\\3.2.2\\Lib\\site-packages\\github). And still it complains no module with that name exists. Do you have any suggestions on what I could check to make it work?\n"}}, {"doc": {"_id": 89, "title": "Foo %", "content": ""}}, {"doc": {"_id": 88, "title": "Use Python logging to log raw requests", "content": "I replaced the commented-out print statement in Requester.py with a call to Python [logging](http://docs.python.org/library/logging.html) so that users have the option to trace low-level api.github.com requests without having to hack their installed PyGithub package: they just put `logging.getLogger('github').setLevel(logging.DEBUG)` in their script.\n\nI don't have any strong opinion as to whether you should pull this change or not.  I found it useful while debugging #87, you may decide you don't like it; no problem.\n"}}, {"doc": {"_id": 87, "title": "Repository.create_issue() fails on percent '%' character", "content": "If the **title** or **body** parameter of `Repository.create_issue()` contains a percent character `%` then it provokes a 500 error from `api.github.com`.\n\nCuriously, if the percent character is followed by two hex digits, eg `%2F` then the request succeeds.  In this case, the `%2F` is not url-decoded: it remains as `%2F` in the body text of the issue, not as a slash `/`.\n\nThis looks like it could be GitHub's issue: eg, their API is enforcing urlencoded input but is not actually decoding it.\n\nWhatever the case, it is impossible to create an issue using PyGithub that contains text like \u201cworks 25% of the time\u201d.\n"}}, {"doc": {"_id": 86, "title": "Include tests in pypi tarball", "content": "Will help QA and regression test the devel/py-pygithub FreeBSD port\n"}}, {"doc": {"_id": 85, "title": "How to convert list of strings to PaginatedList ? ", "content": "``` python\n\nimport argparse\nimport sys\nimport os\nfrom github import Github\n\n\ndef getargs():\n    \"\"\" get command line args \"\"\"\n\n    parser = argparse.ArgumentParser()\n\n    parser.add_argument(\n        '-r',\n        '--repos',\n        required=False,\n        default=None)\n\n    parser.add_argument(\n        '-x',\n        '--excluded-repos',\n        required=False,\n        default=None)\n\n    parser.add_argument(\n        '-o',\n        '--org',\n        required=False,\n        default=\"Borg\")\n\n    parser.add_argument(\n        '-u',\n        '--user',\n        required=True,\n        default=None)\n\n    parser.add_argument(\n        '-p',\n        '--password',\n        required=True,\n        default=None)\n\n    parser.add_argument(\n        '-b',\n        '--base-url',\n        required=False,\n        default=\"http://github-enterprise.internal-server.com/api/v3\")\n\n    return(vars(parser.parse_args()))\n\ndef main():\n    \"\"\" Main street. \"\"\"\n\n    args = getargs()\n\n        my_gh = Github( args[\"user\"], args[\"password\"], args[\"base_url\"])\n        all_repos = my_gh.get_organization( args[\"org\"] ).get_repos()\n\n        if not args[\"excluded_repos\"]:\n            repos = [ item for item in all_repos  ]\n\n        else:\n            repos = [ item for item in all_repos if item not in args[\"excluded_repos\"].split(\",\") ]\n\n    else:\n        repos =  [ item for item in  args[\"repos\"].split(\",\") ]\n\n    for repo in repos:\n        print \"--> \" + repo.name\n\n        for hook in repo.get_hooks():\n            print \"-----> \",\n            print hook.config\n\nif __name__ == \"__main__\":\n    sys.exit(main())\n\n```\n\nSo if I call the above script with the --repos my-sandbox1,all-inclusive  then I get the following:\n\n``` python\n\nTraceback (most recent call last):\n  File \"utils/github-hooks.py\", line 112, in <module>\n    sys.exit(main())\n  File \"utils/github-hooks.py\", line 96, in main\n    print \"--> \" + repo.name\nAttributeError: 'str' object has no attribute 'name'\n\n```\n\nAnd similar errors when I use --exclude-repos and give it a comma separated list like I did with --repos. \n\nI'm probably doing this incorrectly, but I thought this would be something that will be commonly done\nand might be a good thing to have as part of the cookbook / tutorial as well, so good to have it documented here.\n"}}, {"doc": {"_id": 84, "title": "Publish version 1.8.0", "content": ""}}, {"doc": {"_id": 83, "title": "Switch to Semantic Versioning", "content": "See http://semver.org/\n\nSay it in the ReadMe\n"}}, {"doc": {"_id": 82, "title": "Improve documentation", "content": "Documentation of PyGithub is a bit rudimentary.\n\nLet's think about what we could do to improve it.\n"}}, {"doc": {"_id": 81, "title": "Complete Legacy.convertXxx", "content": "Legacy.convertXxx discards some useful information and this leads to API calls that could be avoided.\n"}}, {"doc": {"_id": 80, "title": "Assertion Failure ??", "content": "``` python\n>>> from github import Github\n>>> gh = Github( \"login\", \"password\", \"base_url\")\n>>> for repo in gh.get_user().get_repos():\n...         print repo.name\n...\nrepo1\nrepo2\nmy-person-linux-kernel-repo\nthe-secret-macosx-repo\n\n>>> for repo in gh.get_organization( org_name ).get_repos():\n...         print repo.name\n...\n\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"build/bdist.macosx-10.7-intel/egg/github/Organization.py\", line 311, in get_repos\n  File \"build/bdist.macosx-10.7-intel/egg/github/Requester.py\", line 60, in requestAndCheck\n  File \"build/bdist.macosx-10.7-intel/egg/github/Requester.py\", line 76, in requestRaw\nAssertionError\n\n```\n\nIs this because of my lack of knowledge about python, or is there something else going on here ? \n\nWhat I would like to do is be able to get a list of the hooks in all the repos in an organization and also go through that list of repos in an organization and be able to create hooks.  \n"}}, {"doc": {"_id": 79, "title": "AuthenticatedUser.get_keys() / .create_key() raises github.GithubException.GithubException: 404 {u'message': u'Not Found'}`", "content": "When I instantiate a AuthenticatedUser and attempt to manage keys I am getting the following error:\n\n```\n>>> g = Github('token')\n>>> g.get_user().url\n'/user'\n>>> g.get_user().name\nu'Sam Alexander'\n>>> g.get_user().get_keys()\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-   packages/github/AuthenticatedUser.py\", line 445, in get_keys\n    None\n  File \"/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/github/Requester.py\", line 66, in requestAndCheck\n    raise GithubException.GithubException( status, output )\ngithub.GithubException.GithubException: 404 {u'message': u'Not Found'}`\n```\n"}}, {"doc": {"_id": 78, "title": "Improve documentation", "content": "- ChangeLog.md: create and take History from ReadMe.md\n- ReadMe.md: add links to other *.md files\n- doc/ReferenceOfClasses.md: check (at least remove Github.search_repo)\n"}}, {"doc": {"_id": 77, "title": "No ability to fetch specific page with search api", "content": "legacy_search_repos - keyword and language but no start_page parameter\nHow to get eg 3rd page right?\n"}}, {"doc": {"_id": 76, "title": "Publish version 1.7", "content": ""}}, {"doc": {"_id": 75, "title": "Separate code generation artifacts", "content": "And remove the 'generated code' header\n"}}, {"doc": {"_id": 74, "title": "Support clearing of issue milestone and assignee", "content": "I could find no way to use the PyGithub API to clear an Issue's milestone or assignee.  So I created this patch to make Issue.edit() accept None for the milestone and assignee parameters.  I have tested it on a real GitHub issue, and it works, but I have not created any test cases.\n"}}, {"doc": {"_id": 73, "title": "Restore support of Python 2.5", "content": "Was dropped by #62 and should not be too difficult to restore\n"}}, {"doc": {"_id": 72, "title": "org.has_in_member does not work as expected", "content": "Hello\n\nI am trying to find out if a commit was written by a member of a project or not...\n\nthe following test program should tell me that hanatos is a member of the project... but it fails.\n\ndid I not understand something wrt PyGithub ?\n\nthx in advance\n\nBoucman\n\n``` python\n#!/usr/bin/env python\nfrom github import Github\ngithub = Github()\norg = github.get_organization(\"darktable-org\");\nrepo = org.get_repo(\"darktable\");\ncommit = repo.get_commit(\"699975ad5e609e813eaccc1265cc738ec3f92094\")\nfor member in org.get_members():\n    print member.id\nprint \"aaaaaaaaaaaa\"\nprint commit.author.id\n\nif(org.has_in_members(commit.author)):\n    print \"found\"\nelse:\n    print \"not found\"\n```\n"}}, {"doc": {"_id": 71, "title": "Implement multi-step release of starring/watching", "content": "See http://developer.github.com/changes/2012-9-5-watcher-api/ \n\nWe have to modify methods related to watchers to allow them to manage subscriptions.\n"}}, {"doc": {"_id": 70, "title": "Repository starring/watching", "content": "Implement APIs described in http://developer.github.com/v3/repos/starring/, and in http://developer.github.com/v3/repos/watching/\n\nKeep in mind this post: http://developer.github.com/changes/2012-9-5-watcher-api/\n"}}, {"doc": {"_id": 69, "title": "Merging", "content": "Implement APIs described in http://developer.github.com/v3/repos/merging/\n"}}, {"doc": {"_id": 68, "title": "Assignees", "content": "Implement APIs described in http://developer.github.com/v3/issues/assignees/\n"}}, {"doc": {"_id": 67, "title": "Statuses", "content": "Implement APIs described in http://developer.github.com/v3/repos/statuses/\n"}}, {"doc": {"_id": 66, "title": "Publish version 1.6", "content": ""}}, {"doc": {"_id": 65, "title": "GET /repos/:user/:repo/contents/:path", "content": "I have not been able to figure out how to access the github API request for GET /repos/:user/:repo/contents/[:path] using PyGithub. Perhaps I'm missing something?\n\nPlease advise.\nThanks, Bernd\n"}}, {"doc": {"_id": 64, "title": "Publish version 1.5", "content": ""}}, {"doc": {"_id": 63, "title": "PyGithub on Upverter", "content": "Hi Vincent, I wanted to let you know that we've started using PyGithub over at Upverter. You can see an example of it in action here: https://upverter.com/JBionics/a07fd2563a253ccf/Programmable-RC-Car-Controller-Arduino-Shield/\n\nUpverter is a web-based schematic capture and PCB layout tool for people who design electronics. Like github, it's free for anyone to use as long as they publish their designs with an open-source license. We let designers attach a github project to an Upverter project, and use PyGithub to pull in some basic stats about the project (including a README file), and show them on the project's main page.\n\nCheers,\nAlex\n"}}, {"doc": {"_id": 62, "title": "Add timeout option", "content": "Add support of `timeout` option. Unfortunately drops python < 2.6 support.\n"}}, {"doc": {"_id": 61, "title": "Add timeout option", "content": "I just realized that there is no option to set timeout for github api requests. There is no timeout at all in `Requester`.\nIn python2.6 was added option `timeout` for `httplib.HTTPConnection` and `httplib.HTTPSConnection`. It seems that it will drop support of python<2.6.\nAnother way to change the way that `Requester` works. You can use `requests` library from @kennethreitz. BTW it will simplify whole `Requester` API.\n"}}, {"doc": {"_id": 60, "title": "delete repo", "content": "I'm just starting to to use PyGithub (and python).  Thanks for creating such a useful tool.  I'm teaching a large class and using PyGithub to programmatically manage hundreds of repos.\n\nIs there a way to delete a repo via PyGithub?  github API v3 includes this, but I don't see a Repository.delete() method in PyGithub.\n\nAnother minor (and unrelated) issue: Is there a way to get_team by name (instead of by id)?  The only way I can see to find a team by name is by iterating over all teams and looking at team.name.\n\nThanks for your help.\n"}}, {"doc": {"_id": 59, "title": "No Comments returned for PullRequest", "content": "Hello, here is the problem.\nNo Comments returned. But comments count showing proper value.\n\np = z.pulls[1]\np\nOUTPUT: <github.PullRequest.PullRequest object at 0x104e6e5d0>\nOUTPUT: u'\\u041d\\u0435 \\u043f\\u0440\\u0438\\u043d\\u0438\\u043c\\u0430\\u0442\\u044c =)'\np.comments\nOUTPUT: 1\np.get_comments()\nOUTPUT: <github.PaginatedList.PaginatedList instance at 0x104cd6c68>\nlist(p.get_comments())\nOUTPUT: []\n\nAny ideas ?\n"}}, {"doc": {"_id": 58, "title": "Publish version 1.4", "content": ""}}, {"doc": {"_id": 57, "title": "Allows connection to GitHub Enterprise installs on local URLs", "content": "This patch allows you to use the module with local (i.e. Enterprise) GitHub installs. Passes the tests here, defaults to connecting to api.github.com.\n"}}, {"doc": {"_id": 56, "title": "Implement markdown rendering", "content": "Cf http://developer.github.com/v3/markdown/\n"}}, {"doc": {"_id": 55, "title": "Publish version 1.3", "content": ""}}, {"doc": {"_id": 54, "title": "GitAuthor.date should return datetime, not string", "content": "Hi!\n\nIt's great that all date-like objects are datetime.datetime now, makes working with it so easy. However, I think you missed GitAuthor.date, it would be great if this would also return datetimes.\n\nBackground: To get the dates of tags, I did `MyTag.commit.commit.committer.date`, and expected this to return a datetime object (like all the others do), but it returns a string.\n"}}, {"doc": {"_id": 53, "title": "Publish version 1.2", "content": ""}}, {"doc": {"_id": 52, "title": "Issue created by PyGithub to test issue #50", "content": ""}}, {"doc": {"_id": 51, "title": "Docs seem to be out of sync with code?", "content": "Hi!\nBack again. :-) I started playing around with 1.1, and it seems many things happened in the meantime. \nFor one, the docs seem to be out of sync with the code. For example, get_issues seems to return a PaginatedList, but I can't find a mention of that class in the /doc folder. \n\nBackground: With the old version, I got a list of all the issues (open & closed) by saying\n\n```\n Issues=repo.get_issues(state='open') + repo.get_issues(state='closed')\n```\n\nThis worked perfectly well with the method returning normal lists, but running my code now, it complains about `TypeError: unsupported operand type(s) for +: 'instance' and 'instance'`\nAlso, later on I hit the issue that `PaginatedList instance has no attribute '__len__'` when I want to count the number of issues with `len(Issues)` as worked before.\n\nI realize that this is maybe not a proper issue report, since I'm asking how to do stuff, but I don't see where/how else I can find out to do these things \"properly\" because the docs don't seem to offer this information. Those two errors are probably only symptoms of the changes in the library, and I'm of course willing to fix those myself, but I don't know where to find info about that, if not in the doc folder.\nThanks for any help anyway! :-)\n"}}, {"doc": {"_id": 50, "title": "[Issue] Replace label _identity with name", "content": ""}}, {"doc": {"_id": 49, "title": "Support new Search API", "content": "New API ported from v2 but i have trouble with adopting ask's library for v2 API to support v3 style for searching. \nhttp://developer.github.com/v3/search/\n\nIts not described in the page about parameters that search for repos API supports.\nThey are same as in v2 API, you can look them in ask's library.\nIn v2 was like that https://github.com/api/v2/json/repos/search/testing?start_page=2&language=Python\nIn v3 is https://api.github.com/legacy/repos/search/testing?start_page=2&language=Python\n"}}, {"doc": {"_id": 48, "title": "data_files install location", "content": "Installing on OS X 10.7 via:\n    $ pip install PyGithub\n\n(Using the Python 2.7 package from python.org, and not OS X's python2.6 flavour)\n\nGot an error message:\n    running install_data\n    copying ReadMe.md -> /System/Library/Frameworks/Python.framework/Versions/2.7/\n    error: /System/Library/Frameworks/Python.framework/Versions/2.7/ReadMe.md: Permission denied\n\nWhile I can use sudo to make the error message go away, I don't think `/System/Library/Frameworks/Python.framework/Versions/2.7/` is the correct location for the documentation. I don't know much about writing setup.py files, but after looking at gunicorn, flask, and numpy, it doesn't look like any of them use data_files for installing documentation.\n"}}, {"doc": {"_id": 47, "title": "Just a small patch to make PyGithub compatible with Python 2.5", "content": "Seems to work otherwise.\n"}}, {"doc": {"_id": 46, "title": "TypeError when Attribute doesn't exist", "content": "Hi @jacquev6 When a github user's name has not been entered, I get a TypeError:\n`TypeError: coercing to Unicode: need string or buffer, NoneType found`\n\nUsing:\n\n```\nuser = gh.get_user('username')\nprint user.id\nprint user.login + ' -> ' + user.name\n```\n\nAlso happens with `getattr`:\n\n```\nprint getattr(user, u'login') + ' -> ' + getattr(user, u'name', u'No name entered')\n#(or)\nprint getattr(user, 'login') + ' -> ' + getattr(user, 'name', 'No name entered')\n```\n\nIs this the expected behaviour for missing (non-mandatory) attributes? I used `except TypeError:` as a workaround.\n"}}, {"doc": {"_id": 45, "title": "Please clarify licensing", "content": "The project has both COPYING and COPYING.LESSER files, containing the GPL and LGPL respectively.  The file headers seem to suggest the project is LGPL licensed, but the COPYING file suggests it is GPL licensed.\n\nCould you please clarify your intent (for example, by removing an unneeded COPYING\\* file, or indicating in the license headers that you intend to dual license it [1]).\n\nThanks!  PyGithub looks great, and I'd love to be able to use it!\n\n[1] I personally do not recommend dual licensing under GPL and LGPL\n"}}, {"doc": {"_id": 44, "title": "Type all parameters", "content": ""}}, {"doc": {"_id": 43, "title": "Make all attributes either optional or mandatory", "content": ""}}, {"doc": {"_id": 42, "title": "Create enumerations for string attributes/arguments with a finite set of values", "content": ""}}, {"doc": {"_id": 41, "title": "Use type datetime.datetime for appropriate attributes/arguments", "content": ""}}, {"doc": {"_id": 40, "title": "Generate a docs.python.org-like documentation", "content": "It would be good to have a doc that is more like other documentations of Python libraries.\n"}}, {"doc": {"_id": 39, "title": "Pull request to be merged by PyGithub with a custom commit message", "content": ""}}, {"doc": {"_id": 38, "title": "Remove _identity from the json description", "content": ""}}, {"doc": {"_id": 37, "title": "Understand and implement POST /repos/:user/:repo/pulls/:number/comments with in_reply_to", "content": "Cf http://developer.github.com/v3/pulls/comments/#alternative-input, but my first tests did not succeed.\n"}}, {"doc": {"_id": 36, "title": "Re-implement url parameters", "content": "For example, in `Organization.get_repos( type )`, `type` should be added to the url, as described in http://developer.github.com/v3/repos/#list-organization-repositories\n"}}, {"doc": {"_id": 35, "title": "Implement https://api.github.com/hooks", "content": "https://api.github.com/hooks is not documented, but it is referred by http://developer.github.com/v3/repos/hooks/#create-a-hook\n"}}, {"doc": {"_id": 34, "title": "Check that there is no more `todo`s in code", "content": ""}}, {"doc": {"_id": 33, "title": "get_issues() returns max. 250 items", "content": "As the title says, `get_issues()` seems to return a max of 250 items. \nIt can't be a pagination thing I think because a page is max. 100 items long as per http://developer.github.com/v3/#pagination\n\nRepro:\n\n```\nfrom github import Github\ng = Github()\ntest=g.get_user('openframeworks').get_repo('openFrameworks').get_issues()\nlen(test)\n```\n\nThis repo hast 940 closed and 340 open issues.\n"}}, {"doc": {"_id": 32, "title": "Creation of a pull request from an issue is not covered by integration tests", "content": ""}}, {"doc": {"_id": 31, "title": "Title edited by PyGithub", "content": "Body edited by PyGithub\n"}}, {"doc": {"_id": 30, "title": "Issue also created by PyGithub", "content": "Body created by PyGithub\n"}}, {"doc": {"_id": 29, "title": "Publish version 0.7", "content": ""}}, {"doc": {"_id": 28, "title": "Issue created by PyGithub", "content": "Body edited by PyGithub\n"}}, {"doc": {"_id": 27, "title": "Facilitate IDE autocompletion", "content": "As per discussion in 6945921c529be14c3a8f566dd1e483674516d46d\n\nI have observed that autocompletion (using PyDev+Eclipse in my case) is pretty erratic.\nFor example, in the tutorial from the readme, `g.get_u` gets autocompleted correctly, but `g.get_user().get_r` (or any method or attribute applicable to `NamedUsers`/`AuthenticatedUser`, really) does not show autocompletion to `g.get_user().get_repo()`.\n\nThis makes exploring the library/API a bit cumbersome. \n"}}, {"doc": {"_id": 26, "title": "Rate limiting?", "content": "Hi!\n\nI tried to find a function which returns the number of API requests I have remaining due to [rate limiting](http://developer.github.com/v3/#rate-limiting). Is this somewhere in the library and I can't find it? If not, I think it would be a great feature to have, to be able to keep track of how many requests certain actions use up.\n"}}, {"doc": {"_id": 25, "title": "List project(s) using PyGithub", "content": "List known clients.\n\nFirst known client: http://pypi.python.org/pypi/tratihubis/ (cf #24)\n"}}, {"doc": {"_id": 24, "title": "Improve error messages on broken requests", "content": "Thanks for PyGithub, it is easy to use and very complete. I just successfully used it to convert Trac tickets to Guthub issues.\n\nBut I had to learn the hard way that `create_issue()` expectes the milestone as number instead of a title. To track this down, I added the following `print` statement to `Requester.py`:\n\n``` python\ndef __statusCheckedRequest( self, verb, url, parameters, input ):\n    status, headers, output = self.__rawRequest( verb, url, parameters, input )\n    if status < 200 or status >= 300:\n        print output # <--- Added by me.\n        raise UnknownGithubObject() # <--- sadly lacks any error details\n    return headers, output\n```\n\nAs `output` already contains all the information needed (as JSON dump), it would be helpful if the exception raised here would include this information in the exception message.\n"}}, {"doc": {"_id": 23, "title": "UnknownGithubObject on get_download() with invalid key", "content": "This is probably user error (I don't really know what I'm doing) but if I execute `repo.get_download(1)` or `repo.get_download('foobar')` (I'm not sure what the proper id for a download is), I get the following error trace:\n\n```\nTraceback (most recent call last):\n  File \"/Applications/WingIDE.app/Contents/MacOS/src/debug/tserver/_sandbox.py\", line 1, in <module>\n# Used internally for debug sandbox under external interpreter\n  File \"/Library/Python/2.6/site-packages/PyGithub-0.6-py2.6.egg/github/GithubObjects/GithubObject/GithubObject.py\", line 77, in <lambda>\n  File \"/Library/Python/2.6/site-packages/PyGithub-0.6-py2.6.egg/github/GithubObjects/GithubObject/List.py\", line 114, in __execute\n  File \"/Library/Python/2.6/site-packages/PyGithub-0.6-py2.6.egg/github/GithubObjects/GithubObject/TypePolicies.py\", line 25, in createNonLazy\n  File \"/Library/Python/2.6/site-packages/PyGithub-0.6-py2.6.egg/github/GithubObjects/GithubObject/GithubObject.py\", line 73, in __init__\n  File \"/Library/Python/2.6/site-packages/PyGithub-0.6-py2.6.egg/github/GithubObjects/GithubObject/GithubObject.py\", line 103, in __fetchAttribute\n  File \"/Library/Python/2.6/site-packages/PyGithub-0.6-py2.6.egg/github/GithubObjects/GithubObject/Basic.py\", line 62, in updateAttributes\n  File \"/Library/Python/2.6/site-packages/PyGithub-0.6-py2.6.egg/github/Github.py\", line 10, in _dataRequest\n  File \"/Library/Python/2.6/site-packages/PyGithub-0.6-py2.6.egg/github/Requester.py\", line 17, in dataRequest\n  File \"/Library/Python/2.6/site-packages/PyGithub-0.6-py2.6.egg/github/Requester.py\", line 39, in __statusCheckedRequest\ngithub.Requester.UnknownGithubObject:\n```\n\nAlso possibly related: `repo.get_download()` (what weird things users do, eh?) causes a shorter trace ending in Type Error. \n"}}, {"doc": {"_id": 22, "title": "Publish version 0.6", "content": ""}}, {"doc": {"_id": 21, "title": "KeyError executing tutorial example?", "content": "Did easy_install on Mac OS 10.6 (python 2.6) and attempt to execute tutorial sequence:\n\n```\n>>> from github import Github\n>>> gh = Github('tallforasmurf','<redacted>')\n>>> au = gh.get_user()\n>>> au.id\n1137018\n>>> r = au.get_repos()\nTraceback (most recent call last):\n  File \"/Applications/WingIDE.app/Contents/MacOS/src/debug/tserver/_sandbox.py\", line 1, in <module>\n    # Used internally for debug sandbox under external interpreter\n  File \"/Library/Python/2.6/site-packages/PyGithub-0.5-    py2.6.egg/github/GithubObjects/GithubObject/GithubObject.py\", line 77, in <lambda>\n  File \"/Library/Python/2.6/site-packages/PyGithub-0.5-py2.6.egg/github/GithubObjects/GithubObject/List.py\", line 176, in __execute\n  File \"/Library/Python/2.6/site-packages/PyGithub-0.5-py2.6.egg/github/GithubObjects/GithubObject/TypePolicies.py\", line 22, in createLazy\n  File \"/Library/Python/2.6/site-packages/PyGithub-0.5-py2.6.egg/github/GithubObjects/GithubObject/GithubObject.py\", line 69, in __init__\n  File \"/Library/Python/2.6/site-packages/PyGithub-0.5-py2.6.egg/github/GithubObjects/GithubObject/GithubObject.py\", line 87, in _updateAttributes\nKeyError: u'permissions'\n```\n\nSame error on `get_repo('name of existing repo')`\n"}}, {"doc": {"_id": 20, "title": "Rework GitTree.recursive", "content": ""}}, {"doc": {"_id": 19, "title": "Rework Github.get_gists", "content": "In general, when you get a collection, you should get an iterable, and the pagination should be done only if needed. This is mandatory for Github.get_gists\n"}}, {"doc": {"_id": 18, "title": "Remove _identity", "content": "`_identity` exists only in `Label`, `NamedUser` and `Repository`, and should be replaced by proper attribute (`urlquote( self.name)`, `self.login` and `self.full_name`) in methods like `AuthenticatedUser.add_to_following`\n"}}, {"doc": {"_id": 17, "title": "Document issue reporting", "content": ""}}, {"doc": {"_id": 16, "title": "Add copyright and license notice", "content": ""}}, {"doc": {"_id": 15, "title": "Implement all authentication schemes", "content": "One would want to use the API without authentication, with login+password, and with OAuth token. Let's cover these use-cases.\n"}}, {"doc": {"_id": 14, "title": "Rework BaseUrl to use tuples instead of string concatenation", "content": ""}}, {"doc": {"_id": 13, "title": "Remove the _repo hugly hack", "content": ""}}, {"doc": {"_id": 12, "title": "Type all attributes", "content": ""}}, {"doc": {"_id": 11, "title": "Implement alternative inputs", "content": ""}}, {"doc": {"_id": 10, "title": "Separate GithubObjects.py in several files", "content": ""}}, {"doc": {"_id": 9, "title": "Publish version 1.0", "content": "Check that there is no more `todo`s in code\nCheck that we have 100% test coverage\n"}}, {"doc": {"_id": 8, "title": "Publish version 0.5", "content": ""}}, {"doc": {"_id": 7, "title": "Publish version 0.4", "content": ""}}, {"doc": {"_id": 6, "title": "Review exceptions policy when receiving error HTTP status", "content": ""}}, {"doc": {"_id": 5, "title": "Implement full API", "content": ""}}, {"doc": {"_id": 4, "title": "Review public interface homogeneity ", "content": "All attributes and method parameters must have an identified and documented type\n"}}, {"doc": {"_id": 3, "title": "Deduce mandatory parameters", "content": ""}}, {"doc": {"_id": 2, "title": "Use objects instead of string for shas, ids, etc. arguments", "content": ""}}, {"doc": {"_id": 1, "title": "Gitub -> Github everywhere", "content": ""}}]}